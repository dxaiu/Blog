<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[我和我的祖国]]></title>
    <url>%2Fzh-cn%2Fmyself-china.html</url>
    <content type="text"><![CDATA[从1949年到2019年，弹指之间，新中国将迎来它的第70个年头。中国从一个贫穷落后的国家发展成了如今的第二大经济强国。70年前中国百废待兴，70年后中国百业昌盛!我们为祖国感到骄傲!我们为五星红旗感到自豪! 下为1949年开国大典影像资料： Your browser does not support the video tag. 戳我观看国庆70周年阅兵式完整视频]]></content>
      <categories>
        <category>家国情怀</category>
      </categories>
      <tags>
        <tag>情感</tag>
        <tag>生活</tag>
        <tag>祖国</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Promise 杂谈]]></title>
    <url>%2Fzh-cn%2Ftalk-promise.html</url>
    <content type="text"><![CDATA[Promise 是如何解决回调地狱问题的？ 所谓回调地狱，可能它的危害并不全在于由于过多的嵌套函数导致日渐增长的缩进最终会超过你的屏幕宽度，而是它剥夺了我们编写 try-catch，throw 这样的代码的权利，并且会有调用信任的问题。 使用回调函数调用第三方服务或者模块，回调函数的执行权会交给了第三方，可能出现的问题就会可能有多次调用，回调时间不稳定(过早或过晚)等等的问题，虽然这些问题我们可能通过其他手段进行解决，比如通过一个 flag 值来控制调用次数的问题: 123456let called = false;rpc(&apos;https://path/to/service&apos;, (err, res) =&gt; &#123; if (called) return; // do somthing with res&#125;); 但是这样始终非常不方便，代码中也会出现很多不必要的副作用，往往会给我们代码设计带来麻烦。 而 Promise 的出现，通过控制反转的方法，让回调函数只做将它本身的返回值返回的操作，然后让 Promise 将这个值存起来，并通知所有需要知道此函数调用成功的函数。 1234567new Promise((resolve, reject) =&gt; &#123; rpc(&apos;https://path/to/service&apos;, (err, res) =&gt; &#123; resolve(res); &#125;);&#125;).then((res) =&gt; &#123; // do somthing with res&#125;); 这样，有利于消除副作用，基于回调函数的返回值与代码逻辑不再全部放在第三方调用的回调中了。 而对于回调函数执行的时间不稳定问题，由于使用第三方模块的时候，回调函数的执行时机对于我们是一个黑盒，如果模块的设计者不加注意，很容易会导致 release zalgo 问题，也就是如下代码： 1234567891011let urls = &#123;&#125;;function rpc (url, callback) &#123; if (urls[url]) &#123; return callback(urls[url]); &#125; request(url, (err, res) =&gt; &#123; urls[url] = res; callback(err, res); &#125;));&#125; 如果这样实现第三方模块，那么这里的回调函数调用时机是不确定的，有可能是同步调用，有可能是异步调用，有时候这里会导致一些难以追踪的 bug。 但是使用了 Promise 进行包裹，不需要担心这个问题，因为 then 函数始终都是异步执行的。因为我们执行 new Promise 函数中的 resolve 函数的时候，内部实现是： 12345678910111213// promise 的简单实现function _resolve(value)&#123; if (self.state === &apos;pending&apos;) &#123; nextTick(() =&gt; &#123; // nextTick 代表异步执行，可以是 process.nextTick, 也可以是 setTimeout self.state = &apos;fulfilled&apos;; self.value = value; // 批量执行通过 then 函数添加的成功回调，回调函数存放到一个数组中 self.resolveQueue.forEach(cb =&gt; &#123; cb(value); &#125;); &#125;); &#125;&#125; 所以我们在取得回调函数返回值的 then 函数始终是被异步执行的，无需担心 release zalgo 问题。 并且由于 Promise 的内部实现，不会出现多次调用回调函数的问题，原因在由于 Promise 本身是一个有穷状态机，本身包含 pending, fulfilled, rejected 三种状态，并且从 pending 状态到 fulfilled 状态与 pending 状态到 rejected 状态不可逆，所以上面的回调函数中，即使写成： 123456....rpc(&apos;https://path/to/service&apos;, (err, res) =&gt; &#123; if (err) reject(err); resolve(res);&#125;);.... 也不会影响实际代码的运行，如果出现了 err, 会先运行 reject 函数, Promise 的状态就会变为 rejected 状态，后面的 resolve 函数执行会被忽略，代码变得可靠很多。 另外，在 Promise 中，你甚至可以 resolve 一个 PromiseLike 的对象，也就是一个包含 then 方法的对象，根据 Promise/A+ 规范的实现，在执行这种 PromiseLike 对象的 then 方法的时候，会对传入的 resolve，reject 方法的执行次数进行控制： 12345678910111213141516171819202122232425262728293031323334353637383940....// 此为本人根据 Promise/A+ 规范实现部分代码let called = false;// x 表示 上一个 Promise resolve 传入的值if ((x !== null &amp;&amp; typeof x === &apos;object&apos;) || typeof x === &apos;function&apos;) &#123; // 如果是对象或者是函数 try &#123; // 这里是鸭子模型，只要有 then 方法就尝试执行 let then = x.then; if (typeof then === &apos;function&apos;) &#123; // 说明是一个 thenable 对象 then.call(x, y =&gt; &#123; // 避免 then 函数中多次执行第一次传入的函数(即此函数)，如多次执行则以第一次执行为准 // 而且如果 reject 函数先执行，那么这个函数的执行会被忽略 if (called) return; called = true; resolvePromise(promise, y, resolve, reject); &#125;, err =&gt; &#123; // 避免 then 函数中多次执行第二次传入的函数(即此函数)，如多次执行则以第一次执行为准 // 而且如果 resolve(resolvePromise) 函数先执行，那么这个函数的执行会被忽略 if (called) return; called = true; return reject(err); &#125;); &#125; else &#123; resolve(x); &#125; &#125; catch (err) &#123; // 如果 then 方法中有异常，也需要将 promise 置为 reject // 但是为了防止前面 then 函数中 resolve(resolvePromise) 与 reject 已经被执行过后 // then 方法执行又出错，添加 called 值来判断，如果已经执行过 resolvePromise/reject 方法 // 那么这里 catch 到的错误会被忽略 // 否则以此错误来 reject Promise if (called) return; called = true; reject(err); &#125;&#125; else &#123; ...&#125;.... 其实，called 变量判断回调执行与否是为了防范 thenable 对象的实现不符合 Promise 的机制，例如： 1234567891011121314let p = new Promise((resolve) =&gt; &#123; resolve();&#125;);p.then(() =&gt; &#123; return &#123; then(a, b) &#123; a(); // 会执行一次 reoslve(resolvePromise) a(); // 同样会执行 resolve 函数，但是后续逻辑被 called 拦截了，不会真正执行 b(); // 执行 reject 函数，但是被 called 拦截了 throw &apos;real?&apos;; // 这里会使 try-catch 中 catch 后的代码执行，但是同样被 called 拦截 &#125; &#125;;&#125;); 对于超时问题，Promise 还提供了 race 方法，让我们的调用可以方便地添加超时机制，让代码尽可能在可控的范围内。 123456789101112131415let rpcSync = new Promise((resolve, reject) =&gt; &#123; rpc(&apos;https://path/to/service&apos;, (err, res) =&gt; &#123; if (err) return reject(err); resolve(res); &#125;);&#125;);Promise.race([ rpcSync(&apos;http://path/to/service&apos;), new Promise((resolve, reject) =&gt; &#123; setTimeout(() =&gt; &#123; resolve(); &#125;, 5000); &#125;);]); 注：函数副作用指调用函数时除了返回函数值还会修改函数外的变量 composing Promise 我们在使用 Promise 的时候，应当充分利用 Promise 的优势， 不能将 Promise 当成回调函数来使用，避免像以下的代码： 123456789UserOrm.get(id).then((data) =&gt; &#123; ... SchoolOrm.get(data.school).then((school) =&gt; &#123; ... ChairManOrm.get(school.chairMan).then((chairMan) =&gt; &#123; ..... &#125;); &#125;);&#125;); 当然，Promise 通过上面阐释的多种机制优化了很多回调函数存在的问题，上面的代码可能会比单纯使用回调函数要好，但是这样的代码风格很糟糕，如果业务逻辑复杂，会让编写者非常难受，而其实我们可以借助 Promise，让其他 Promise 进行链接。 12345678910111213UserOrm.get(id).then((data) =&gt; &#123; return SchoolOrm.get(data.school);&#125;).then((school) =&gt; &#123; return ChairManOrm.get(school.chairMan);&#125;).then((chairMan) =&gt; &#123; ....&#125;).catch((err) =&gt; &#123;&#125;) 这样的链式调用会比第一个例子中的 then 地狱要好得多，我们只需要在 then 函数里面返回另一个 Promise，那么在下一个链式的 then 函数中就能拿到返回的 Promise 的输出结果。 而原理在于，根据 Promise/A+ 规范，then 函数的内部处理中，如果 then 函数传入的第一个函数的返回值是一个 Promise 的时候，会根据 Promise Resolution Procedure 的处理，递归地为返回的 Promise 添加 then 函数处理，直到返回结果不是 Promise 对象，并以此值作为上一层 Promise 的返回结果。 而对于返回非 Promise 值，then 函数也会直接将这个返回值直接传递给下一个 Promise，这样就有利于我们写出利用缓存结果的函数了： 12345678getUrl().then((url) =&gt; &#123; if (urls[url]) &#123; return resolve(urls[url]); &#125; return rpc(url); // rpc 返回一个 promise&#125;).then((data) =&gt; &#123; // get data&#125;); 上面这个函数利用了内存结果缓存而不用担心上面所说的 release zalgo 问题，因为后一个 then 函数一定是异步被执行的。另外由于 Promise 内部对 then 函数传入的函数都添加了 try-catch 处理，所以我们在 then 函数中直接 throw 一个错误，那么这个错误会被捕获到，并以这个错误作为 Promise 的 reject 原因传给下一个 Promise。 123456789101112getUrl().then((url) =&gt; &#123; if (/^http|https/.test(url)) throw new Error(&apos;url Error&apos;); if (urls[url]) &#123; return resolve(urls[url]); &#125; return rpc(url); // rpc 返回一个 promise&#125;).then((data) =&gt; &#123; // get data&#125;).catch((err) =&gt; &#123; // get err&#125;); 后面的 catch 函数会得到在 then 函数 throw 出来的错误。 所以，我们在 then 函数里面，最好显式地 return 一个值或者 throw 一个错误，这样我们可以让 then 函数的行为符合我们的预期。 promise 值穿透问题 所谓 promise 值穿透问题就是当你在调用 then 函数的时候，传入的参数不是一个函数的话，那么传入的参数会被忽略，并返回上一个 Promise 的返回结果。 Promise.resolve(1).then(Promise.resolve(2)).then((res) =&gt; { console.log(res); }); // 1 这是因为在 Promise 中，then 函数会有传入的值类型判断： 12345then (onFulfilled, onReject) &#123; if (typeof onFulfilled !== &apos;function&apos;) onFulfilled = (res) =&gt; res; if (typeof onReject !== &apos;function&apos;) onReject = (err) =&gt; throw err; ...&#125; 当传入值非函数的时候，内部会赋予一个默认的返回 Promise 返回结果的函数，因此当我们在调用 then 函数的时候一定需要注意 then 函数是接受函数作为参数的。 批量 Promise 在业务场景中，我们会常常遇到需要批量执行一些异步操作，通常数据会存放在一个数组中，但是如果我们直接循环数组，然后希望在这些异步操作都结束之后做某些操作，在编写代码的时候不加注意，会容易写出这样的代码： 12345678orm.getList().then((datas) =&gt; &#123; datas.forEach((&#123;id&#125;) =&gt; &#123; orm.delete(id); &#125;);&#125;).then(() =&gt; &#123; console.log(&apos;all list be deleted&apos;);&#125;); 实际上，最后一个 then 函数的执行时机并不等于所有列表数据都被删除之后的时刻。按照逻辑，真正的代码应该是： 12345678910orm.getList().then((datas) =&gt; &#123; let promises = datas.map((&#123;id&#125;) =&gt; &#123; return orm.delete(id); &#125;); return Promise.all(promises);&#125;).then(() =&gt; &#123; console.log(&apos;all list be deleted&apos;);&#125;); 借助 Promise.all 来达到批量的 Promise 都执行完后再去执行某些逻辑的目的。 而如果在服务端，有一些批量异步操作可能由于数据列表过长，不希望如此大量的异步操作同一时间进行，那么我们就需要控制同一时间内可进行的异步操作的数量： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061// 一个控制 Promise 并发量的 demofunction parallel (fn, con, thisArg) &#123; let jobs = []; let current = 0; let next = () =&gt; &#123; let job = jobs.shift(); if (job) &#123; current ++; let &#123; args, resolve, reject &#125; = job; fn.apply(thisArg, args).then((res) =&gt; &#123; current --; next(); resolve(res); &#125;, (err) =&gt; &#123; current --; next(); reject(err); &#125;); &#125; &#125;; return function (...args) &#123; if (current &lt; con) &#123; current ++; return new Promise((resolve, reject) =&gt; &#123; return fn.apply(thisArg, args); &#125;).then(res =&gt; &#123; current --; next(); return res; &#125;); &#125; else &#123; return new Promise((resolve, reject) =&gt; &#123; jobs.push(&#123; resolve, reject, args &#125;); &#125;); &#125; &#125;&#125;let executor = parallel(function (data) &#123; // dom something with data return asyncOperation(data); // asyncOPeration 返回一个 Promise&#125;, 10);Promise.all(datas.map(executor)).then(() =&gt; &#123; console.log(&apos;all done&apos;);&#125;);async/await 时代async/await 是谁的语法糖？这个问题见仁见智，实现过 co 库的更熟悉 generator 运行机制的也许会说是生成器函数与 yield 操作符的语法糖，但是更熟悉 Promise 运行机制的也许会说是 Promise 的语法糖。(async function ()&#123; await new Promise((resolve) =&gt; &#123; setTimeout(() =&gt; &#123; resolve(1); &#125;, 5000); &#125;);&#125;)(); 所谓语法糖，是以某种对功能没有影响的语法，方便程序员调用并使程序更简洁。 所以在生成器角度来看，async/await 提供了类似 co 库的自动运行 generator 对象的 next 方法的机制，达到异步控制流的目的。 12345678910111213141516171819202122232425262728293031323334function _asyncToGenerator(fn) &#123; return function () &#123; var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) &#123; function step(key, arg) &#123; try &#123; var info = gen[key](arg); var value = info.value; &#125; catch (error) &#123; reject(error); return; &#125; if (info.done) &#123; resolve(value); &#125; else &#123; return Promise.resolve(value).then(function (value) &#123; step(&quot;next&quot;, value); &#125;, function (err) &#123; step(&quot;throw&quot;, err); &#125;); &#125; &#125; return step(&quot;next&quot;); &#125;); &#125;;&#125;_asyncToGenerator(function* () &#123; yield new Promise(function (resolve) &#123; setTimeout(function () &#123; resolve(1); &#125;, 5000); &#125;);&#125;)(); *注：以上代码通过 babel 插件 babel-plugin-transform-async-to-generator 进行转化 在 Promise 的角度，async/await 提供了使某个函数统一返回值为 Promise，并且提供 then 方法的方便调用方式。 1234567Promise.resolve().then(function () &#123; return new Promise(resolve =&gt; &#123; setTimeout(() =&gt; &#123; resolve(1); &#125;, 5000); &#125;);&#125;).then(function () &#123;&#125;); *注：以上代码通过 babel 插件 babel-plugin-async-to-promises 进行转化 可以看作 async 操作符内部创建了一个 Promise 对象，await 只能在 async 函数中使用，可以理解为 then 方法只能在 Promise 对象之后调用。 但是模拟与实现是两码事，从实现上来说，个人认为 async/await 更偏向于 Promise 的实现，因为在 node 中原生的 async/await 与 Promise 几乎是一样快的。 async/await 内部干了些什么事情？ 对于 async 操作符来说，它基本功能就类似下面的代码： 123456789// 转化前形如async function test () &#123; return 1;&#125;;// 经过转化后function test () &#123; return Promise.resolve(1);&#125;; 也就是说，async 操作符执行后会返回一个 Promise。 那么 await 做了什么事情呢？根据 tc39 的 async/await 实现规范来讲，它类似于以下这幅图： 那么我们自行来翻译一下，将左边 foo 函数使用我们 Promise 语法来表达右边的意思： 1234567891011function foo (v) &#123; let implicit_promise = new Promise((resolve, reject) =&gt; &#123; let promise = new Promise((resolve, reject) =&gt; &#123; resolve(v); &#125;).then(w =&gt; &#123; resolve(w) &#125;); &#125;); return implicit_promise;&#125; 首先，只要使用了 async 声明的函数，内部会创建一个隐式 promise，也就是所谓的 implicit_promise，然后 await 会将传入的 v 包裹成一个新的 Promise，对于 w 的赋值操作与后面返回 return w 这些，都放在了这个新建的 Promise 的 then 函数逻辑中了。 注意，在翻译实现的时候，故意忽略了一个 Promise 的创建也就是 throwaway Promise 这个 promise，这个 promise 是我们翻译的噪音，不需要理会，因为它本身的作用是底层引擎为了兼容适应 API 的实现，创建出来的一个 Promise，它本身并没有其他作用。 所以我们知道了，其实 async/await 更多地是给我们提供语法糖，优化了 Promise 的 then 调用链的语法使用，而对于 await 后面，它接受的是一个表达式，至于传入的 v 是一个基本类型的值还是一个 Promise 对象，它都会统一包裹一层 Promise。 对于传入值 v 为一个 Promise 的时候，我们在调用 resolve 函数的时候传入一个 Promise，最终我们在 then 函数中拿到的是传入的 Promise 的返回结果，这部分的实现逻辑与 Promise A+ 规范有关，这里不再阐述。 当然，这里是可以进一步优化的，当我们传入的 v 是一个 Promise 的时候，我们其实不需要额外包裹一层 Promise，而这个优化点也就是 node@V8 到 node@V10 的对于 async/await 的优化所在。优化的手段类似如下代码： 123456789function foo (v) &#123; let implicit_promise = new Promise((resolve, reject) =&gt; &#123; Promise.resolve(v).then(w =&gt; &#123; resolve(w); &#125;); &#125;); return implicit_promise;&#125; 即是用 Promise.resolve(v) 来代替 new Promise(res =&gt; res(v))。因为在 Promise.resolve 中如果传入值为另一个 Promise，会将这个传入的 Promise 直接返回： 12345678910111213141516171819202122232425262728293031323334353637383940let p = new Promise(res =&gt; res(1));let testP = Promise.resolve(p);testP === p // true多个 async/await 的执行顺序曾经看过一个题目，代码如下：async function first() &#123; console.log(&apos;first start&apos;); await second(); console.log(&apos;first end&apos;);&#125;async function second() &#123; console.log(&apos;second&apos;);&#125;console.log(&apos;start&apos;);setTimeout(() =&gt; &#123; console.log(&apos;setTimeout&apos;);&#125;);first();new Promise((resolve, reject) =&gt; &#123; console.log(&apos;promise1&apos;); resolve();&#125;).then(res =&gt; &#123; console.log(&apos;then&apos;);&#125;);// 结果// start// first start// seond// promise1// then// first end// setTimeout 对于结果来说，如果你已经理解了上面章节所说的 async/await 底层原理，那么就很容易写出类似下面我对上面代码进行翻译的代码： 1234567891011121314151617181920212223242526272829303132333435function first () &#123; const implicit_promise = new Promise((resolve, reject) =&gt; &#123; console.log(&apos;first start&apos;); second().then((res) =&gt; &#123; resolve(); &#125;).then(() =&gt; &#123; console.log(&apos;first end&apos;); &#125;); &#125;); return implicit_promise;&#125;function second () &#123; const implicit_promise = new Promise((resolve, reject) =&gt; &#123; console.log(&apos;second&apos;); resolve(); &#125;); return implicit_promise;&#125;console.log(&apos;start&apos;);setTimeout(() =&gt; &#123; console.log(&apos;setTimeout&apos;);&#125;);first();new Promise((resolve, reject) =&gt; &#123; console.log(&apos;promise1&apos;); resolve();&#125;).then(res =&gt; &#123; console.log(&apos;then&apos;);&#125;); 这两段代码在 chrome 浏览器 71.0.3578.98 下运行结果是一样的。 以上就是我对于 Promise 以及基于 Promise 的语法的一些思考与见解，希望大家看完都能有所收获。 附录 https://v8.js.cn/blog/fast-async/ xieranmaya/blog#3 《you don’t know javascript》]]></content>
      <categories>
        <category>ES6</category>
      </categories>
      <tags>
        <tag>promise</tag>
        <tag>请求</tag>
        <tag>ajax</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[滚滚红尘，一个转身就是陌路天涯；虚拟网络，一个删除就是再无交集！]]></title>
    <url>%2Fzh-cn%2Fvr-net.html</url>
    <content type="text"><![CDATA[​谁是你心上的疼，谁是你忘不了的情，谁是你醒不了的梦？见与不见，思念一直在；爱与不爱，心一直在。滚滚红尘，一个转身就是陌路天涯；虚拟网络，一个删除就是再无交集。相遇靠缘分，相守靠人心。不是所有的人，都能一直在等；不是所有的情，都能维系一生。许多的名字，越来越模糊；许多的心情，越来越陌生。 ​不是不想念，而是怕自作多情；不是不怀念，而是怕再也回不到曾经。一生中，总会有一个人忘不了，却再也不会去打扰。有的人，只剩下了一个名字，却怎么也舍不得删去；有的情，只留下了一段回忆，却无论如何也不能忘记。不敢打开回忆，只怕往事滚滚如潮；不敢重提旧情，放不下的牵挂，只有自己的心知道。只能，远远的看着，静静的守着，深深的祝福着。 ​ 也许，这就是缘分最好的结局，彼此爱过疼过，怨过伤过，一切又回到了陌生，却再也抹不去来过的痕迹。任四季交替，任时光飞逝，爱过的心灵，痛过的泪滴，却一直深藏在心底，未曾远离。不联系，不代表不想念；不提及，不代表不想起。有情有义的人，都不会把彼此真正忘记。相伴过的往昔，已然是一生的美丽。惟愿，你过得比我好。缘分，总有不期而遇的惊喜，亦有不说再见的离去。变幻的是心情，不变的是感情。 ​也曾一起嬉戏，一起相依；如今再无交集，再无信息。陌生的熟悉了，熟悉的走远了，缘分只是一场经历；遇见的美丽，感情需要用心珍惜。网络虽然虚拟，却有真情实意，谁也伤不起！一些人，一些事，就像是自然风景。回不去的山，回不去的水，回不去的感情；留不住的风，留不住的雨，留不住的热情。错过了，就过了；爱走了，就走了。 ​ 若是纠缠不清，累的是自己；若是留恋不放，苦的是自己。回不来的是曾经，换来的只能是同情。爱过了不后悔，爱走了不强求。缘来真心以对，缘去坦然面对。最好的感情，就是找一个能够聊得来的伴。各种的话题，永远说不完；重复的语言，也不觉得厌倦。陪伴，是两情相悦的一种习惯；懂得，是两心互通的一种眷恋。总是觉得相聚的时光太短，原来，走得最快的不是时间，而是两个人在一起时的快乐。幸福，就是有一个读懂你的人；温暖，就是有一个愿意陪伴你的人。 ​ 人总有脆弱的时候，并不需要太多的浪漫和语言。累了，有一个拥抱可以依靠；痛了，有一句懂得可以舒缓。即使两两相望，也是一份无言的喜欢。即使默默思念，也是一份踏实的心安。人，总要有一个家遮风避雨；心，总要有一个港湾休憩靠岸。最长久的情，是平淡中的不离不弃；最贴心的暖，是风雨中的相依相伴。懂，是心灵的一种呵护，是生命的一种温度。距离的远近，妨碍不了心与心的对语，阻隔不了魂与魂的相吸。穿越时空的心音，总是让人悸动；流在眼角的热泪，总是让人心疼。 ​因为有人懂，情怀可以诉说，痛苦可以解脱；因为有人懂，孤单时有人相陪，无助时有人安慰。懂，是世界上最温情的语言。简短的话语，却包含了万千。因为深有体会，所以知你的负累，懂你的苦衷；因为感同身受，所以心疼你的真诚，珍惜你的感情。懂，是通往心里的桥梁，引起共鸣。因为懂得，所以包容；因为懂得，所以心同。 ​ 懂得，让心与心没有距离，让生命彼此疼惜。懂得，是生命中最美好的相通，最深刻的感动。家，很平淡，只要每天都能看见亲人的笑脸，就是幸福的展现；爱，很简单，只要每天都会彼此挂念，就是踏实的情感。幸福并不缥缈，在于心的感受；爱情并不遥远，在于两心知的默契。心，只有一颗，不要装的太多；人，只有一生，不要追逐的太累。 ​ 心灵的愉悦，来自精神的富有；简单的快乐，来自心态的知足。时间，会沉淀最真的情感；风雨，会考验最暖的陪伴。走远的，只是过眼云烟；留下的，才是值得珍惜的情缘。来得热烈，未必守得长久；爱得平淡，未必无情无义。眼睛看到的许是假象，心的感受才最真实；耳朵听到的许是虚幻，心的聆听才最重要。 ​ 时间会告诉我们，简单的喜欢，最长远；平凡中的陪伴，最心安；懂你的人，最温暖。用心呵护一份情，用爱守望这一程，不留遗憾给生命。遇见，只是一个开始；守望，才能相伴一生。珍惜爱你的人和你爱的人！]]></content>
      <categories>
        <category>美文欣赏</category>
      </categories>
      <tags>
        <tag>人生感悟</tag>
        <tag>情感</tag>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[迟来的2018总结]]></title>
    <url>%2Fzh-cn%2Fsum-of-2018.html</url>
    <content type="text"><![CDATA[输入密码，查看文章内容。 Incorrect Password! No content to display! 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]]></content>
      <categories>
        <category>心情随笔</category>
      </categories>
      <tags>
        <tag>感悟</tag>
        <tag>生活总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Vue响应式原理]]></title>
    <url>%2Fzh-cn%2Fvue-response-principle.html</url>
    <content type="text"><![CDATA[1、vue响应式原理就是对你数据的变化，vue会有一个响应，去完成某件事。 2、vue的响应式原理就是基于vue知道了数据发生了变化，那么vue是如何知道数据发生了变化呢？ 3、数据劫持 vue.js 采用数据劫持结合发布者-订阅者模式的方式，通过Object.defineProperty()来劫持各个属性的setter,getter，在数据变动时发布消息给订阅者，触发相应的监听回调 1Object.defineProperty()方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回这个值 4、数据劫持盲区 1234561. vue 在实例化的时候会将data数据中的属性全部做数据劫持2. 如果时对象，也会迭代本身属性将全部属性都实现数据劫持3. 当赋值的时候，如果时newVal是对象，也会迭代newVal的属性实现全部属性的数据劫持什么时候会发生盲区： 比如说，data中现有一个obj 的值 list，但是现有list中没有name 这个属性。现在主动 list.name = 1，因为list.name的属性不是 Getter/Setter，所以赋值后不会去发布消息给订阅者，订阅者也没有办法更新。这就是数据劫持盲区 但是有一个有趣的现象：就是虽然obj.newparam不会发布消息，但是如果别的发布者触发的时候，页面局部渲染时如果包括obj.newparam的值，渲染效果也是会显示obj.newparam的最新值。这是由于页面更新时是直接读取的obj.newparam的值。 5. 数组Array的特殊性 123vue中实现的方法实际是对数组的属性重写，重写过后的方法不仅能实现原有的功能，还能发布消息给订阅者。当然Array也有特殊现象：如果要更新 Array 某个索引对应的值得时候，要用Vue.set方式实现]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>原理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[为何一定要买一线城市的房子？]]></title>
    <url>%2Fzh-cn%2Fbug-house.html</url>
    <content type="text"><![CDATA[普通人投资最好的方式是什么？ 那么毋庸置疑是房子。为什么说是房子呢？ 因为买房子的难度低风险低，只有房子是保值增值最好的投资品。那么普通人能挣钱的方法和渠道有哪些, 工作? 创业? 投资？ A. 对于工作，朝九晚五可以维系基本的生活，人生一眼可以看到头。 B. 对于创业，那是九死一生，你要有勇气，要有战略，有策略，会经营，懂管理，还要会抓建设。 C.对于投资，我个人认为风险第一，那么买房和其他的投资品，比如股票基金，期货外汇相比，买房的收益是七个人挣钱，两个人持平，一个人亏本，而股票却刚刚好相反。七个人亏本，两个人持平，一个人赚钱，十年前的股票，2600点，十年后的今天股票依然是2600点，而房子从十年前5000多块钱涨到现在的5万多块钱，所以证明股票是用来住的，房子是用来哈哈的，大家都懂。 对于我个人而言，是从职场到创业到做企业，到买房。 总结：明明可以买房致富，非要装逼创业。其实财富是认知的变现，人要有拥有财富的能力，更加要有驾驭财富的能力，为什么普通人投资最好的方式是买房，因为买房是大确定性低风险。 为什么要买房？年初不买房，一年又白忙，怎么解释呢？ 1.通货膨胀，负债缩水，怎么讲呢，比如：20年前1万块钱，那可是全村的首富，那现在1万块钱可能会变成贫困户，如果我们1万块钱存在银行，银行支付利息给你，那么恭喜你从首富变成了贫困户，我们的钱存在银行，通货膨胀不值钱，如果我们20年前找银行借了1万块钱，买深圳的地建房，现在还银行的本金和利息，请问财富发生了什么变化？通货膨胀导致钱不值钱，那负债同样也会缩水。 2.货币贬值，先讲什么是货币？早期的货币是用贵金属，金，银，铜等来做交易，因为贵金属的稀缺性和铸造技术瓶颈等原因，难以量产，所以不容易引发严重的通货膨胀和财富变动，18世纪，纸币走上了历史舞台，通过印发纸币，政府可以简单粗暴的拿到资金，做国家的各项开销，纸币就是政府的信用背书。大家可以关注一下，2008年至2018年十年时间，广义货币供应量m2，从最初的47.5万亿增加到180.2万亿，增加3.8倍，十年里平均增速达到了16.35%，远超过GDP的年均7个点的增速。 3.明显的感受到工资上涨，物价上涨，当然房子也上涨。先说工资，十年前请一个收银员，月薪800到1000元，工作十小时，休息两天，现在请一个收银员，月薪4000元，工作八小时，休息四天。物价上涨，十年前一个鸡煲48块钱，四个人吃，平均客单价12块，现在198元一个鸡煲，四个人吃，平均客单价50左右，而房子的价格，2009年深圳平均单价，8000元每平方，2019年平均单价54000左右，平均增长了20.4%，十年增长了6.5倍，远超m2的平均增幅。 所以为什么要买房，因为房价上涨的速度高于工资上涨，物价上涨，所以年初不买房一年又白忙。 “买房投资理念是什么”？ 国家发展的红利，城市发展的红利；买房长期看人口，中期看土地，短期看金融，当下看政策，跟随人口城市化进程的发展，农村人赚到钱要去镇上生活，镇上的人赚到钱要去市里，市里的人赚到钱要去省会城市，省会城市的人赚到钱要来一线城市，人往高处走，水向低处流。 只有一线城市才有房地产，因为它是一个产业链，有金融属性，而三四线城市就是商品房给人消费的，所以买房就要买核心城市的核心资产。 在香港民间流传一句话，先上车再置换，讲的是不要等好存钱再去买房，先在当下买一个，用资产来追资产，涨一波再来置换。其实在深圳，30-40平方的房子，单价5万左右，总价也就150-200万，首付也就50万-60万，可以先在一线城市有一个物业再说。 那么具体怎么买，可以根据一个人的资产负债，收入支出，现金流来做个买房计划，那买房最大的风险是什么，月供，做好五年防守计划就可以了。 我的买房理念是四高一低，哪四高？高流通性，高租金，高杠杆，高收益，低风险 买房投资是一个计算和计划，以及对财富的认知的过程。 买房是一道数学题。例如100万全款买一套房子， 1.如果房子涨了10%，房子的总价变成110万，那么投资回报率10%，如果100万的房子首付三成30万，房子同样涨10%，那么投资回报率33%，同样100万的房子，首付一成，10万的房子同样涨10%，那投资回报率百分之百，这数学题会做了吗？ 2.这样有人就会说贷款有利息;没有利息，哪里有利润，那好吧，我买的房子我算过账，260万的房子，70万全包买完，贷款200万，月供10500，租金可以租到6000，月供差5500，(里面还有自己的还款的本金1800)，那10500-6000-1800=2700块，2700元*12个月=32400，260万总价的房子，大家可以算一下，房子每年涨多少可以覆盖成本。得出来的结论是32400÷260万=1.25%，这是有形的成本，还有无形的价值，还记得为什么要买房？里面有讲过通货膨胀和负债缩水吗？这样大家就知道明白了吧。 3.涨幅看选愁，赚钱靠杠杆，深圳买房无非是领涨 普涨 和补涨的问题。但是热点片区涨幅是很快，但首付比例，要高一些，补涨的片区可能涨得慢一些，因为涨得慢不好卖，所以可以买到性价比高的房子，首付低用长时间来看，只是先涨或是后涨的问题，那么投资的收益可是完全不同的。 总结 买房是一道数学题，涨幅看选愁，赚钱靠杠杆，吃不穷，穿不穷，算不好帐，一辈子穷。]]></content>
      <categories>
        <category>房产</category>
      </categories>
      <tags>
        <tag>买房</tag>
        <tag>投资</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vue表格编辑]]></title>
    <url>%2Fzh-cn%2Fvue-table-editing.html</url>
    <content type="text"><![CDATA[由于最近项目遇到需要在表格里面添加编辑并且对表格进行编辑判断，所以总结了下方法，希望为遇到类似问题的同学提供参考 HTML内容 123456789101112131415161718192021&lt;div id="app"&gt;&lt;template&gt; &lt;el-table :data="tableData" border style="width: 100%"&gt; &lt;el-table-column prop="date" label="日期" width="180"&gt; &lt;/el-table-column&gt; &lt;el-table-column prop="name" label="姓名" width="180"&gt; &lt;/el-table-column&gt; &lt;el-table-column prop="address" label="地址"&gt; &lt;/el-table-column&gt; &lt;el-table-column label="编辑"&gt; &lt;template slot-scope="scope"&gt; &lt;el-form :model="scope.row" :rules="rules" ref="testForm"&gt; &lt;el-form-item prop="test"&gt; &lt;el-input v-model="scope.row.test" auto-complete="off"&gt;&lt;/el-input&gt; &lt;/el-form-item&gt; &lt;/el-form&gt; &lt;/template&gt; &lt;/el-table-column&gt; &lt;/el-table&gt;&lt;/template&gt;&lt;/div&gt; JS内容 123456789101112131415161718192021222324252627282930313233var Main = &#123; data() &#123; const testValidate = function(rules, value, callback) &#123; if (value) &#123; console.log(value) &#125; &#125; return &#123; rules:&#123; test: [&#123;required: true, validator: testValidate, trigger: 'blur'&#125;] &#125;, tableData: [&#123; date: '2016-05-02', name: '王小虎', address: '上海市普陀区金沙江路 1518 弄' &#125;, &#123; date: '2016-05-04', name: '王小虎', address: '上海市普陀区金沙江路 1517 弄' &#125;, &#123; date: '2016-05-01', name: '王小虎', address: '上海市普陀区金沙江路 1519 弄' &#125;, &#123; date: '2016-05-03', name: '王小虎', address: '上海市普陀区金沙江路 1516 弄' &#125;] &#125; &#125; &#125;var Ctor = Vue.extend(Main)new Ctor().$mount('#app') 效果]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>vuejs</tag>
        <tag>表格</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[前端库]]></title>
    <url>%2Fzh-cn%2Ffront-end-library.html</url>
    <content type="text"><![CDATA[收集一些自己遇到过（用过）的插件，demo一类，收集记录一下，亦或是觉得不错的知识点，查漏补缺，总结自己的不足之处 前端文档 印记中文 深入挖掘国外前端新领域，为中国 Web 前端开发人员提供优质文档！ 小程序开发 美团mpvue mpvue文档 汇总awesome-mpvue 前端库 vue日历组件 vue-calendar 基于vuejs+webpack环境使用的日期选择插件 精简类的日历，支持多选日期 vue-fullcalendar 基于vuejs的fullcalendar，日历记事本一类的 vue2-calendar 各种类型日历均有，价格日历，API丰富 vue-component-calendar 类似美团，移动端用，底部弹出层，可选开始与结束日期 UI库 Element 基于 Vue 2.0 的组件库 iView 一套基于Vue.js的高质量的UI组件库 Vuex 应用设计的状态管理架构 Vux 基于 Vue 和 WeUI 的移动端 UI 组件库 价格日历 酒店价格日历 基于YUI3开发的价格日历组件 price-calendar 价格日历，可以统一设置全月每天的价格，还可以单独设置某天的价格 price-calendar 精简价格展示日历 daymoney 简易价格日历，可编辑价格 滚动条插件 jquery-custom-content-scroller 页面多列滚动布局 ES6知识 es6-cheatsheet-chinese ES6中文版，包括一些常用代码片段 ES5规范 ES5 前端书籍 前端书籍墙（电子书） 百度盘分享书籍（电子书） JSON在线效验工具 JSONLint HTML各个版本head头部样式 HTML head Generator 工具库 underscore zepto backbone icomoon 图片字体 Vue学习建议 Vue 2.0 的建议学习顺序 各大框架包管理 Libraries]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>工具</tag>
        <tag>前端库</tag>
        <tag>组件</tag>
        <tag>小程序</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[elementui表格头提示信息]]></title>
    <url>%2Fzh-cn%2Felementui-table-header-prompt-information.html</url>
    <content type="text"><![CDATA[第一步 在表格添加 :render-header=“renderHeader” 12&lt;el-table :data="tableData" border style="width: 100%"&gt; &lt;el-table-column inline-template label="日期" width="180" :render-header="renderHeader"&gt; 第二步 在method方法里添加方法 123456789101112131415161718192021renderHeader(createElement, &#123; column, _self&#125;) &#123; let label = column.label return createElement('div',&#123;'class' : 'header-center'&#125;, [ createElement('span', &#123;attrs: &#123;type: 'text'&#125;&#125;, [label]), createElement('el-tooltip', &#123; attrs: &#123; 'content': '这是一个提示', 'placement': 'top' &#125; &#125;, [ createElement('i', &#123;'class': 'el-icon-information'&#125;) ] ) /* createElement('i', &#123;'class': 'el-icon-information ml-5'&#125;) */ ] ); &#125;, 效果]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>表格头</tag>
        <tag>elementUI</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[对过去，要淡；对现在，要惜。对未来，要信]]></title>
    <url>%2Fzh-cn%2Ftrust-in-the-future.html</url>
    <content type="text"><![CDATA[​ 幸福的人生，需要三种姿态 ：对过去，要淡；对现在，要惜。对未来，要信。人生的答卷没有橡皮擦，写上去就无法再更改，过去的就让它过去，否则就是跟自己过不去。真正属于你的，只有活生生的现在，只有握得住当下，才有可能掌控自己的命运。只有相信未来，相信自己，今天的你才能成就明天的你。]]></content>
      <categories>
        <category>心情随笔</category>
      </categories>
      <tags>
        <tag>人生感悟</tag>
        <tag>哲理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[前端路线]]></title>
    <url>%2Fzh-cn%2Ffront-end-route.html</url>
    <content type="text"><![CDATA[声明 这个路线图的本意是让你对整体有一个大致的了解，并能在当你为接下来需要学习什么而感到困惑时引导你，而不是鼓励你去学习那些时尚和潮流的东西 (what is hip and trendy)。你应该对关于 为什么一个工具在某些场景下比另一个更适合使用有自己的理解 (grow some understanding)，并记住时尚和潮流永远不意味着它最适合这份工作 (best suited for the job) 🚀 介绍 🎨 前端路线图 👽 后端路线图 👷 DevOps 路线图]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>学习路线</tag>
        <tag>大前端</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[对js的call和apply的理解]]></title>
    <url>%2Fzh-cn%2Funderstanding-call-apply.html</url>
    <content type="text"><![CDATA[apply和call的区别在哪里？ 什么情况下用哪apply什么情况下用call？ apply的其他巧妙用法？ 首先理解下为什么要用call 和 apply?在js的OOP（面向对象编程）中，经常这样用 1234567891011121314151617181920212223// 定义了一个叫cat的构造函数function cat ()&#123;&#125;// 每个对象都有个隐藏的原型属性，叫prototype。cat.prototype=&#123; food:"fish", say:function()&#123; console.log("喵喵喵~") &#125;&#125;// 对这个对象进行实例化var black_cat=new cat();black_cat.say(); //喵喵喵~但是如果我们有一个对象white_cat=&#123;food:"bone"&#125;,我们不想对他重新定义say方法。那么久可以用black_cat的say方法：var white_cat;black_cat.say.call(white_cat) //喵喵喵~black_cat.say.apply(white_cat) //喵喵喵~所以：call和apply就是为了动态改变this而存在的。 call、apply方法能劫持另外一个对象的方法，继承另外一个对象的属性. function.call(obj,params)方法能接受两个参数，obj：代表function类里面的this对象 。params是参数列表。 function.apply(obj,arr)方法能接受两个参数，obj：代表function类里面的this对象 。arr是参数数组。 所以：call和apply的意思差不多。只是接受参数的形式不一样。 apply的巧妙用法： Array.prototype.push 可以实现两个数组合并 同样push方法没有提供push一个数组,但是它提供了push(param1,param,…paramN) 所以同样也可以通过apply来装换一下这个数组,即: 12345678var arr1=new Array("1","2","3");var arr2=new Array("4","5","6");Array.prototype.push.apply(arr1,arr2);或者求数组里面的最大值：var arr=[1,2,3,4,5,6];Math.max.apply(null,arr)]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[遇见]]></title>
    <url>%2Fzh-cn%2Fto-meeting.html</url>
    <content type="text"><![CDATA[在对的时间遇到对的人，幸福。 ​ 在错的时间遇到对的人，遗憾。 ​ 在对的时间遇到错的人，失望。 ​ 在错的时间遇到错的人，痛苦。 ​]]></content>
      <categories>
        <category>心情随笔</category>
      </categories>
      <tags>
        <tag>人生感悟</tag>
        <tag>哲理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[写给2018年的自己，再见2017，你好2018！]]></title>
    <url>%2Fzh-cn%2Fto-myself-2018.html</url>
    <content type="text"><![CDATA[输入密码，查看文章内容。 Incorrect Password! No content to display! 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]]></content>
      <categories>
        <category>心情随笔</category>
      </categories>
      <tags>
        <tag>感悟</tag>
        <tag>励志</tag>
        <tag>生活总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JavaScript里的循环方法]]></title>
    <url>%2Fzh-cn%2Floop-method-in-javaScript.html</url>
    <content type="text"><![CDATA[JavaScript诞生已经有20多年了，我们一直使用的用来循环一个数组的方法是这样的： 123for (var index = 0; index &lt; myArray.length; index++) &#123; console.log(myArray[index]);&#125; 自从JavaScript5起，我们开始可以使用内置的forEach方法： 123myArray.forEach(function (value) &#123; console.log(value);&#125;); 写法简单了许多，但也有短处：你不能中断循环(使用break语句或使用return语句。 JavaScript里还有一种循环方法：for–in for-in循环实际是为循环”enumerable“对象而设计的： 12345678910var obj = &#123;a:1, b:2, c:3&#125;;for (var prop in obj) &#123; console.log(&quot;obj.&quot; + prop + &quot; = &quot; + obj[prop]);&#125;// 输出:// &quot;obj.a = 1&quot;// &quot;obj.b = 2&quot;// &quot;obj.c = 3&quot; 你也可以用它来循环一个数组： 123for (var index in myArray) &#123; // 不推荐这样 console.log(myArray[index]);&#125; 不推荐用for-in来循环一个数组，因为，不像对象，数组的index跟普通的对象属性不一样，是重要的数值序列指标。 总之，for–in是用来循环带有字符串key的对象的方法。 for-of循环 JavaScript6里引入了一种新的循环方法，它就是for-of循环，它既比传统的for循环简洁，同时弥补了forEach和for-in循环的短板。 我们看一下它的for-of的语法： 123for (var value of myArray) &#123; console.log(value);&#125; for-of的语法看起来跟for-in很相似，但它的功能却丰富的多，它能循环很多东西。 for-of循环使用例子： 循环一个数组(Array): 12345678let iterable = [10, 20, 30];for (let value of iterable) &#123; console.log(value);&#125;// 10// 20// 30 我们可以使用const来替代let，这样它就变成了在循环里的不可修改的静态变量。 12345678let iterable = [10, 20, 30];for (const value of iterable) &#123; console.log(value);&#125;// 10// 20// 30 循环一个字符串： 12345678let iterable = &quot;boo&quot;;for (let value of iterable) &#123; console.log(value);&#125;// &quot;b&quot;// &quot;o&quot;// &quot;o&quot; 循环一个类型化的数组(TypedArray)： 1234567let iterable = new Uint8Array([0x00, 0xff]);for (let value of iterable) &#123; console.log(value);&#125;// 0// 255 循环一个Map: 123456789101112131415let iterable = new Map([[&quot;a&quot;, 1], [&quot;b&quot;, 2], [&quot;c&quot;, 3]]);for (let [key, value] of iterable) &#123; console.log(value);&#125;// 1// 2// 3for (let entry of iterable) &#123; console.log(entry);&#125;// [a, 1]// [b, 2]// [c, 3] 循环一个 Set: 12345678let iterable = new Set([1, 1, 2, 2, 3, 3]);for (let value of iterable) &#123; console.log(value);&#125;// 1// 2// 3 循环一个 DOM collection 循环一个DOM collections，比如NodeList，之前我们讨论过如何循环一个NodeList，现在方便了，可以直接使用for-of循环： 1234567// Note: This will only work in platforms that have// implemented NodeList.prototype[Symbol.iterator]let articleParagraphs = document.querySelectorAll(&quot;article &gt; p&quot;);for (let paragraph of articleParagraphs) &#123; paragraph.classList.add(&quot;read&quot;);&#125; 循环一个拥有enumerable属性的对象 for–of循环并不能直接使用在普通的对象上，但如果我们按对象所拥有的属性进行循环，可使用内置的Object.keys()方法： 123for (var key of Object.keys(someObject)) &#123; console.log(key + &quot;: &quot; + someObject[key]);&#125; 循环一个生成器(generators) 我们可循环一个生成器(generators): 123456789101112131415function* fibonacci() &#123; // a generator function let [prev, curr] = [0, 1]; while (true) &#123; [prev, curr] = [curr, prev + curr]; yield curr; &#125;&#125;for (let n of fibonacci()) &#123; console.log(n); // truncate the sequence at 1000 if (n &gt;= 1000) &#123; break; &#125;&#125;]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>总结</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用ionic打包android apk的教程]]></title>
    <url>%2Fzh-cn%2Fuse-ionic-apk.html</url>
    <content type="text"><![CDATA[Ionic(ionicframework)一款开源的Html5移动App开发框架,是AngularJS移动端解决方案,Ionic以流行的原生移动开发SDK为蓝本,使开发过原生iOS或安卓app的任何人都容易理解，下面我们来看一篇关于使用ionic打包android apk例子吧。 ionic进行开发完项目后，需要进行打包。如果需要上架的话，在Android端，打完包后还需要签名然后上传至各应用商店。 首先是关于apk签名，Android程序的安装是以包名（package name）进行区分的，就是同样的包名会被认作是同一个程序。这样就可以进行升级、替换。但是包名是一个可以被查看的字符串，这样就可能被伪造，然后其他人就可以自己创建一个应用去替代你的应用，结果可想而知。而签名就是为了防止这样的情况发生，当你的程序被签名后安装，只有同样包名与签名的程序才能被替换安装。而签名是不可能简单被伪造的，从而保证了程序的安全性。 一、打包apk ionic bulid android //打包测试包 ionic build --release android //打包正式包 ionic里面打包的命令特别简单，只需要一条命令，上面一条命令是用来打包测试包的，里面已经包含了签名，可以直接在手机上安装，但是不能用来上应用市场，第二条命令是打包成一个没有签名的apk，不能直接安装，需要进行第二个步骤。 二、签名apk 1.生成签名(.keystore)文件 keytool -genkey -v -keystore demo.keystore -alias demo.keystore -keyalg RSA -validity 20000 keytool是工具名称，-genkey意味着执行的是生成数字证书操作，-v表示将生成证书的详细信息打印出来； -keystore demo.keystore 证书的文件名； -alias demo.keystore 表示证书的别名 -keyalg RSA 生成密钥文件所采用的算法； -validity 20000 该数字证书的有效期； 输入后会让你回答关于你公司和地区的一些问题，这些回答一定要记住，以后更新apk的时候需要用到，最好截屏记录。 2.签名apk jarsigner -verbose -keystore /yourpath/demo.keystore -signedjar demo_signed.apk demo.apk demo.keystore jarsigner是工具名称，-verbose表示将签名过程中的详细信息打印出来； -keystore /yourpath/demo.keystore 之前生成的证书 -signedjar demo_signed.apk 签名后的apk demo.apk 需要签名的apk demo.keystore 证书的别名 1.首先要对源代码进行编译 1cordova build --release android 注意，发布要使用Release版本，所以这里加上–release选项。完成之后生成了未签名的apk，在这个目录中platforms/android/build/outputs/apk/HelloWorld-release-unsigned.apk。 2.生成key 在应用开发的时候，因为有微信分享等功能，所以已经有keystore文件了。那么就可以忽略该步骤。 1keytool -genkey -v -keystore my-release-key.keystore -alias alias_name -keyalg RSA -keysize 2048 -validity 10000 该工具会问一些问题，填写之后生成keystore文件。 3.对apk文件进行签名 进入到platforms/android/build/outputs/apk/目录中。 1cd platforms/android/build/outputs/apk/ keystore文件和apk文件在一个目录下的话比较方便，最好把keystore拷贝到apk的目录。然后执行： 1jarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 -keystore my-release-key.keystore HelloWorld-release-unsigned.apk alias_name jarsigner是JDK中的工具，请确保JDK的安装配置是正确的。 4.使用zipalign优化apk zipalign工具位于/path/to/Android/sdk/build-tools/VERSION/zipalign，请确保Android SDK的配置是正确的。然后执行： 1D:\Android\sdk\build-tools\23.0.3\zipalign -v 4 HelloWorld-release-unsigned.apk HelloWorld.apk 其实只要第一步就够了，生成了release的apk之后，就可以使用签名工具了！只需要注意一点，把JDK和Android SDK配置正确就好了！地址在这里。]]></content>
      <categories>
        <category>移动端</category>
      </categories>
      <tags>
        <tag>cordova</tag>
        <tag>ionic</tag>
        <tag>手机</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[搭建ionic]]></title>
    <url>%2Fzh-cn%2Fcreate-ionic-project.html</url>
    <content type="text"><![CDATA[查看ionic版本信息 ionic -v 降级ionic版本 1234npm uninstall -g ionicnpm cache cleannpm install -g ionic@2ionic start your-project blank --v2 --id com.xxx.myproject 安装ionic ：npm install -g ionic@1.2.4 安装过程 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667安装ionic 及 cordova安装命令npm install -g cordova ionic更新命令npm update -g cordova ionic安装特定版本npm install -g ionic cordova@5.0.0npm install -g ionic@1.6.5删除命令npm uninstall cordova -gnpm uninstall ionic -gnpm 淘宝镜像(GFW，导致很多插件下载失败)npm install -g cnpm --registry=https://registry.npm.taobao.org// 安装完成后，以后所有的插件都使用cnpm这个命令来进行安装cnpm install -g ionic cordova创建应用创建ionic 项目，可选模板：sidemenu（侧滑菜单），tabs（底部tab），blank 空白ionic start myapp blankionic start myapp tabsionic start myapp sidemenu如果是github上下载的项目，里面的插件、依赖项一般通过下面命令下载：bower installnpm install如果是老ionic 项目，如果需要更新项目里面的ionic文件（如js类库）ionic lib update浏览器端运行ionic serveionic serve --lab真机模拟、打包、运行ionic platform add android //[iOS]最新命令cordova compile android （ionic build android）ionic run androidionic emulate android如何用xcode 打包IONIC 项目（IPK）将项目文件copy到MAC底下。运行终端，cd到项目所在文件夹，运行ionic platform add ios然后finder，在 platforms-&gt;ios-&gt;xxx.xcodeproj 打开项目然后，将xcode的模拟器类型选成iOS Device然后在XCODE 的菜单栏 选择 Product -- Archive ，会生成 xxx的Archive文件。在窗口右侧的Submit to AppStore 按钮的下方，点击 Export...有三个选项Save to IOS App Store DeploymentSave to Ad Hoc DeploymentSave for Enterprise Deployment选第二个Save to Ad Hoc Deployment 打包成.ipk选择证书等等，选择导出文件夹，导出 ionic start payApp tabs --type=ionic-angular]]></content>
      <categories>
        <category>移动端</category>
      </categories>
      <tags>
        <tag>cordova</tag>
        <tag>ionic</tag>
        <tag>手机</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[红尘渡口，你的痴心遇见了谁的情缘]]></title>
    <url>%2Fzh-cn%2Fmeeting-love.html</url>
    <content type="text"><![CDATA[​自古红尘多忧愁，入了红尘，亦醉了红尘。红尘多梦，梦亦然，红尘梦里一场烟，梦里红尘一场空。一支断箫，承载了多少迷人的爱情故事；一曲离殇，吟唱了多少不舍的红尘美梦。梦，早已随风消逝，情，却在红尘里徘徊缠绵。 ​ 相思桥下，你的痴心会遇见谁的情缘？谁的等待会邂逅你的守候？青石板旁，你的脚步会为谁停留？而谁又会是那个一直等待你出现的有缘人？几经波折，几经弯路，你眉下的倾城笑容为谁扬起？红尘彼岸的烟花又为谁灿烂绽放？风萧萧，路遥遥，一指嫣红为谁停留，一倾相思为谁痴守。 ​ 红尘渡口渡有缘，有缘遇见便是分，缘分自古三分天意，七分争取，如能牵手便是福分，如若不能一起白头，便惟愿各自安好。红尘渡口不知渡了多少有缘人，渡桥边不知又有多少人在苦苦等待有缘人的到来。等待只是为了遇见对的人，而对的人总会在恰当的时候出现，不浮不躁，不卑不亢，冥冥之中，我们都会遇见一个倾心之人。 ​ 成长的步伐从来不会为谁而停止，不知不觉，后知后觉，时光的脚步带领着自己也来到了红尘的渡口，矫情的岁月在渡桥边焕发着多少的痴男怨女，唯美浪漫的爱情故事不知让多少人甘愿一往情深。在这红尘渡口下，我终于遇见了人潮汹涌里那个特别的你，情愿一生痴守的你。今生有幸与你牵手，今世甘愿为你守候。 ​ 渡桥边，西楼上悬挂着如钩的月儿，庭院一角锁着的是谁的落寞？窗前的一帘幽梦，苍老了谁的痴心等待？今宵月光正好，星星也正闪耀，晚风开始唤起我对你美好的追忆，那一段柔情岁月。渡口旁，我邀明月共赏，我等天地见证。 ​ 一刻停留，一世等待，遇见你是我今生的缘，牵起你的手更是我今世的分。奈何，烟花易冷；奈何，情缘难分。当痴心遇上了冷风，不知吹散了多少的相遇，而那瞬间绚丽的花期，又不知辜负了多少的斑斓年华。 ​ 我想在红尘渡口边建一间温暖小屋，在那里只有属于我们的世界，那是我期盼已久的事情，那是我能想到最浪漫的事情，与你一起牵手，看尽繁华流年，阅遍风花雪月。于是，在每一个风淡云轻的日子里，在每一个夜深人静的黑夜里，我总是忍不住遥望远方灯火阑珊处，不敢挑逗脑海里不灭的思绪，亦不想去思量心底那缠绵的思念。偏偏，夜越是深，人越是静，我越是控制不了自己去想你，幻想着一切只属于我们的美好。 ​ 红尘渡口停留凝望注视，回首彼岸，犹记当初相遇时，你仿佛诗歌里柔情的女子一般出现在我的世界，你我只一眼的对视，你的容颜从此扣动着我的心弦，让我惹上了孤独的相思，无尽的眷恋。一世情长只为你一人，一生眷恋独倾你一人心。 ​ 当过往被定格成照片，岁月覆盖了所有美好的曾经，往事一幕一幕在脑海里放映，可爱的人儿被一页一页翻过，而你始终是我最不愿翻过的一页。岁月辗转，流年似水一去不复返，时光如同激流一般匆匆逝去，纵然一切早已物是人非，纵然一切早已随风飘逝，但你依然是我红尘渡口上不舍的眷恋。 ​ 自古红尘美梦令人醉，醉心红尘入凡间，痴心永存心底成追忆。我欲剪一段流年光阴，寄于岁月深处下；拾一段时光回忆，藏于红尘碎梦里。我想要把你就这样一笔一划地写进心里，写成心底最美丽的诗。我想要把你就这样一字一句地唱到脑海，唱成记忆里最动听的歌。 ​红尘渡口，你的痴心遇见了谁的情缘？而又是谁的等待邂逅了你的守候？凡尘俗世里，在经历了感情的风风雨雨之后，在漫长的独自等待之后，愿你我都能遇见一个动心的温暖人儿，如此，甚好。]]></content>
      <categories>
        <category>美文欣赏</category>
      </categories>
      <tags>
        <tag>情感</tag>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[jQuery学习和知识点总结]]></title>
    <url>%2Fzh-cn%2Fsummary-of-jquery.html</url>
    <content type="text"><![CDATA[jQuery目前在Web前端开发所占的比重越来越高，在我们jQuery学习和开发的过程中都会去使用。jQuery帮我们解决了浏览器之间JS一些不兼容的地方和简化了原生JS对DOM的操作。下面把PHP程序员雷雪松对jQuery的知识点总结和归纳分享给大家。 1、jQuery简介 jQuery是一个实用的JavaScript库。jQuery极大地简化了JS对DOM的操作，实现一些常用的方法，jQuery还可以链式操作。 2、jQuery的基本用法 1234567891011//引入jQuery文件，可以本地也可以远程&lt;script type=&quot;text/javascript&quot; src=&quot;jQuery.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot;&gt;//当文档完成加载完时触发，避免获取dom对象时，dom对象还没有加载$(document).ready(function()&#123;//写js语句或者jQuery函数$(&quot;p&quot;).click(function()&#123;$(this).hide();&#125;);&#125;);&lt;/script&gt; 3、jQuery常用的选择器和事件，和CSS的选择器很相似 12345678910111213141516171819$() – 使用CSS选择器匹配元素jQuery的事件和JS的事件基本相同，在使用的时候，去掉JS事件前面的on即可。jQuery常用的事件：load：当文档加载时运行脚本blur：当窗口失去焦点时运行脚本focus：当窗口获得焦点时运行脚本change：当元素改变时运行脚本submit：当提交表单时运行脚本keydown：当按下按键时运行脚本keypress：当按下并松开按键时运行脚本keyup：当松开按键时运行脚本click：当单击鼠标时运行脚本dblclick：当双击鼠标时运行脚本mousedown：当按下鼠标按钮时运行脚本mousemove：当鼠标指针移动时运行脚本mouseout：当鼠标指针移出元素时运行脚本mouseover：当鼠标指针移至元素之上时运行脚本mouseup：当松开鼠标按钮时运行脚本abort：当发生中止事件时运行脚本 4、jQuery常用的效果方法 12345678910$(selector).hide() – 隐藏被选的元素$(selector).show() – 显示被选的元素$(selector).toggle() – 对被选元素进行隐藏和显示的切换$(selector).slideDown() – 通过调整高度来滑动显示被选元素$(selector).slideToggle() – 对被选元素进行滑动隐藏和滑动显示的切换$(selector).slideUp() – 通过调整高度来滑动隐藏被选元素$(selector).fadeIn() – 逐渐改变被选元素的不透明度，从隐藏到可见$(selector).fadeOut() – 逐渐改变被选元素的不透明度，从可见到隐藏$(selector).fadeTo() – 把被选元素逐渐改变至给定的不透明度$(selector).animate() – 对被选元素应用“自定义”的动画 5、jQuery常用的DOM元素操作方法 123456789101112131415161718192021222324252627282930313233$(selector).parent() – 返回被选元素的直接父元素。$(selector).parents() – 返回被选元素的所有祖先元素，它一路向上直到文档的根元素 (&lt;html&gt;)，可选参数来过滤对祖先元素的搜索$(selector).children() – 返回被选元素的所有直接子元素。可选参数来过滤对子元素的搜索$(selector).find() – 返回被选元素的后代元素，一路向下直到最后一个后代，可选参数来过滤对后后代元素的搜索$(selector).siblings() – 返回被选元素的所有同胞元素。过滤对同胞元素的搜索。$(selector).next() – 返回被选元素的下一个同胞元素。$(selector).nextAll() – 返回匹配元素集合中每个元素之后的所有同辈元素，由选择器进行筛选（可选）。$(selector).prev() – 返回的是前面的同胞元素$(selector).prevAll() – 返回匹配元素集合中每个元素之前的所有同辈元素，由选择器进行筛选（可选）。$(selector).first() – 将匹配元素集合缩减为集合中的第一个元素。$(selector).last() – 将匹配元素集合缩减为集合中的最后一个元素。$(selector).eq() – 指定索引的新元素。$(selector).get() – 获得由选择器指定的 DOM 元素。$(selector).index() – 返回指定元素相对于其他指定元素的 index 位置。注：parent()、next()、prev()、first()、last()、eq()只返回一个元素。返回元素集合的函数都可以传传参数筛选，比如：parents()、siblings()、nextAll()、prevAll()、siblings()。$(selector).each() 对对象进行迭代，为每个元素执行函数$(selector).toArray() 以数组的形式返回 jQuery 选择器匹配的元素$(selector).size() 返回被 jQuery 选择器匹配的元素的数量$(selector).text() – 设置或返回所选元素的文本内容$(selector).html() – 设置或返回所选元素的内容（包括 HTML 标记）$(selector).val() – 设置或返回表单字段的值$(selector).append() – 在被选元素的结尾插入内容$(selector).prepend() – 在被选元素的开头插入内容$(selector).after() – 在被选元素之后插入内容$(selector).before() – 在被选元素之前插入内容$(selector).remove() – 删除被选元素（及其子元素）$(selector).empty() – 从被选元素中删除子元素$(selector).removeAttr() – 从所有匹配的元素中移除指定的属性。$(selector).clone() – 创建匹配元素集合的副本$(selector).load() – 从服务器加载数据，然后把返回到 HTML 放入匹配元素 6、jQuery对CSS的操作 1234567$(selector).height() – 设置或返回匹配元素的高度。$(selector).width() – 设置或返回匹配元素的宽度。$(selector).addClass() – 向被选元素添加一个或多个类$(selector).removeClass() – 从被选元素删除一个或多个类$(selector).toggleClass() – 对被选元素进行添加/删除类的切换操作$(selector).css() – 设置或返回样式属性$(selector).hasClass() 检查匹配的元素是否拥有指定的类。 7、jQuery其他知识点 1234$(selector).data() – 存储与匹配元素相关的任意数据$(selector).removeData() – 移除之前存放的数据$(selector).serialize() – 将表单内容序列化为字符串$(selector).serializeArray() – 序列化表单元素，返回 JSON 数据结构数据 $冲突的解决办法 1234//释放$标识符的控制，使用默认的变量jQuery$.noConflict();//自定义变量var jq = $.noConflict(); 8、jQuery Ajax 操作函数 12345$.ajax() – 执行Ajax异步请求$.get() – 使用GET请求从服务器获取数据$.getJSON() – 使用GET从服务器请求JSON编码数据$.getScript() – 使用GET从服务器请求JavaScript文件并执行该文件$.post() – 使用POST请求从服务器获取数据]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>jQuery</tag>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何使用GitHub（二）]]></title>
    <url>%2Fzh-cn%2Fhow-to-use-gitHub-2.html</url>
    <content type="text"><![CDATA[本篇文章是对如何在github上进行操作的总结第二季 创建仓库 实际创建一个公开的仓库。点击右上角工具栏中的“+”下拉菜单里的New repository，创建新的仓库。 在Repository name 栏中输入仓库的名称。 Description栏中可以设置仓库的说明。这一栏不是必须项，可以留空。 选择Public，创建公开仓库，仓库内的所有内容都会被公开。 选择Private，创建非公开仓库，用户可以设置访问权限，但这项服务是收费的。 在Initialize this repository with a README选项上打钩，随后GitHub会自动初始化仓库并设置README文件，让用户可以立刻clone这个仓库。如果想向GitHub添加手中已有的Git仓库，建议不要勾选，直接手动push。 下方左侧的下拉菜单Add .gitignore非常方便，通过它可以在初始化时自动生成.gitignore文件。这个设定会帮我们把不需要再Git仓库中进行版本管理的文件记录在.gitignore文件中，省去了每次根据框架进行设置的麻烦。下拉菜单中包含了主要的语言及框架，选择今后将要使用的即可。 下方右侧的下拉菜单Add a license可以选择要添加的许可协议文件。如果这个仓库中包含的代码已经确定了许可协议，那么请在这里进行选择。随后将自动生成包含许可协议内容的LICENSE文件，用来表明仓库内容的许可协议。 输入选择都完成后，点击Create repository按钮，完成仓库的创建。 clone已有仓库 123git clone 仓库的路径cd 目录名称 编写代码 12345vim test.php&lt;?phpecho &quot;Hello World&quot;;?&gt; 查看状态 1git status 提交 123git add test.phpgit commit -m &quot;Add test.php&quot; 通过git add命令将文件加入暂存区，再通过git commit命令提交。 添加成功后，可以通过git log命令查看提交日志。 1git log 进行push 之后只要执行push，GitHub上的仓库就会被更新 1git push 这样一来代码就在GitHub上公开了。 在使用github的时候也会存在一些错误，以下是比较常见的两种错误 Github错误解决 Warning: Permanently added ‘github.com,192.30.252.120’ (RSA) to the list of know ssh -T git@github.com The authenticity of host 'github.com (192.30.252.120)’ can’t be established. RSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8. Are you sure you want to continue connecting (yes/no)? yes Warning: Permanently added ‘github.com,192.30.252.120’ (RSA) to the list of known hosts. Permission denied (publickey). 解决方案： 1234567cd .sshls -larm -rf id_rsarm -rf id_rsa.pub 重新设置SSH Key，并添加公开密钥。 Warning: Permanently added the RSA host key for IP address ‘192.30.252.129’ to t Warning: Permanently added the RSA host key for IP address ‘192.30.252.129’ to the list of known hosts. 解决方案： 1sudo vim /etc/hosts 添加如下代码： 1192.30.252.129 github.com]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>github</tag>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何使用GitHub（一）]]></title>
    <url>%2Fzh-cn%2Fhow-to-use-gitHub-1.html</url>
    <content type="text"><![CDATA[本篇文章是对如何在github上进行操作的总结 创建账户 打开创建账户的页面https://github.com/join 在Username一栏中用英文和数字输入要创建的ID，您的公开页面的URL（例如：https://github.com/weirubo）会用到这个ID。其它项目也请按照页面要求输入。 填写完所有的项目后点击Create an account，就能完成账户的创建。账户创建完后会直接进入登录状态，用户可以立即开始使用GitHub。登录状态下用户名会显示在页面的右上方。 设置头像 在GitHub上随处可见的头像是通过Gravatar服务显示的。使用过WordPress的读者可能对它有所了解。 只要使用创建GitHub账户时注册的邮箱在Gravatar上设置头像，GitHub的头像就会变成您设置的样子。 设置SSH Key GitHub上连接已有仓库时的认证，是通过使用了SSH的公开密钥认证方式进行的。现在让我们来创建公开密钥认证所需的SSH Key，并将其添加至GitHub。 ==运行下面的命令创建SSH Key== 123456789ssh-keygen -t rsa -C &quot;your_email@example.com&quot;Generating public/private rsa key pair.Enter file in which to save the key (/Users/your_user_directory/.ssh/id_rsa):[按回车键] #如果需要创建多个ssh key并且已存在ssh key，需要起别名再按回车键（例如：id_rsa.work），否则会覆盖原来的ssh keyEnter passphrase (empty for no passphrase):[输入密码]Enter same passphrase agin:[再次输入密码] “your_email@example.com”的部分请修改成您在创建账户时使用的邮箱地址。密码需要在认证时输入，请选择复杂度高并且容易记忆的组合。 ==输入密码后会出现以下结果== 123456789Your identification has been saved in /Users/your_user_directory/.ssh/id_rsa.Your public key has been saved in /Users/your_user_directory/.ssh/id_rsa.pubThe key fingerprint is:[fingerprint值] your_email@example.comThe key&apos;s randomart image is: id_rsa文件是私有密钥，id_rsa.pub是公开密钥 ==注意：如果创建多个ssh key，需要在.ssh下创建config文件，内容如下：== 123456789101112131415Host github.comHostName github.comPreferredAuthentications publickeyIdentityFile ~/.ssh/id_rsaHost git.oschina.netHostName git.oschina.netPreferredAuthentications publickeyIdentityFile ~/.ssh/id_rsa.work 添加公开密钥 在GitHub中添加公开密钥，今后就可以用私有密钥进行认证了。 点击右上角头像下拉菜单中的账户设定按钮（Settings），选择SSH and GPG keys菜单，点击New SSH Key，会出现Title和Key两个输入框。在Title中输入适当的密钥名称。Key部分请粘贴id_rsa.pub 文件里的内容。 ==id_rsa.pub的内容可以用如下方法查看。== 123cat ~/.ssh/id_rsa.pubssh-rsa [公开密钥的内容] your_email@example.com 添加成功之后，创建账户时所用的邮箱会接到一封提示“公共密钥添加完成”的邮件。 完成以上设置后，就可以用手中的私人密钥与GitHub进行认证和通信了。 1234567ssh -T git@github.comThe authenticity of host &apos;github.com(192.30.252.120)&apos; can&apos;t be established.RSA key fingerprint is [fingerpring值].Are you sure you want to continue connecting(yes/no)?[输入yes] 出现如下结果即为成功。 1Hi your_username! You&apos;ve successfully authenticated,but GitHub does not provide shell access.]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>github</tag>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git远程操作详解]]></title>
    <url>%2Fzh-cn%2Fgit-remote-operations-detailed.html</url>
    <content type="text"><![CDATA[最近发现很多小伙伴都在用git管理代码和文件，由于日常使用比较多的都是svn，所有也研究学习了一下git的基本操作，写下总结以便日后使用。 一、git clone 远程操作的第一步，通常是从远程主机克隆一个版本库，这时就要用到git clone命令。命令如下： 1$ git clone &lt;版本库的网址&gt; 比如，克隆jQuery的版本库 1$ git clone https://github.com/jquery/jquery.git 该命令会在本地主机生成一个目录，与远程主机的版本库同名。如果要指定不同的目录名，可以将目录名作为git clone命令的第二个参数 1$ git clone &lt;版本库的网址&gt; &lt;本地目录名&gt; git clone支持多种协议，除了HTTP(s)以外，还支持SSH、Git、本地文件协议等，下面是一些例子 12345678910111213$ git clone http[s]://example.com/path/to/repo.git/$ git clone ssh://example.com/path/to/repo.git/$ git clone git://example.com/path/to/repo.git/$ git clone /opt/git/project.git$ git clone file:///opt/git/project.git$ git clone ftp[s]://example.com/path/to/repo.git/$ git clone rsync://example.com/path/to/repo.git/ SSH协议还有另一种写法 1$ git clone [user@]example.com:path/to/repo.git/ 通常来说，Git协议下载速度最快，SSH协议用于需要用户认证的场合。各种协议优劣的详细讨论请参考官方文档。 二、git remote 为了便于管理，Git要求每个远程主机都必须指定一个主机名。git remote命令就用于管理主机名。 不带选项的时候，git remote命令列出所有远程主机。 123$ git remoteorigin 使用-v选项，可以参看远程主机的网址 12345$ git remote -vorigin git@github.com:jquery/jquery.git (fetch)origin git@github.com:jquery/jquery.git (push) 上面命令表示，当前只有一台远程主机，叫做origin，以及它的网址。 克隆版本库的时候，所使用的远程主机自动被Git命名为origin。如果想用其他的主机名，需要用git clone命令的-o选项指定。 12345$ git clone -o jQuery https://github.com/jquery/jquery.git$ git remotejQuery 上面命令表示，克隆的时候，指定远程主机叫做jQuery。 git remote show命令加上主机名，可以查看该主机的详细信息。 1$ git remote show &lt;主机名&gt; git remote add命令用于添加远程主机。 1$ git remote add &lt;主机名&gt; &lt;网址&gt; git remote rm命令用于删除远程主机。 1$ git remote rm &lt;主机名&gt; git remote rename命令用于远程主机的改名。 1$ git remote rename &lt;原主机名&gt; &lt;新主机名&gt; 三、git fetch 一旦远程主机的版本库有了更新（Git术语叫做commit），需要将这些更新取回本地，这时就要用到git fetch命令。 1$ git fetch &lt;远程主机名&gt; 上面命令将某个远程主机的更新，全部取回本地。 默认情况下，git fetch取回所有分支（branch）的更新。如果只想取回特定分支的更新，可以指定分支名。 1$ git fetch &lt;远程主机名&gt; &lt;分支名&gt; 比如，取回origin主机的master分支。 1$ git fetch origin master 所取回的更新，在本地主机上要用&quot;远程主机名/分支名&quot;的形式读取。比如origin主机的master，就要用origin/master读取。 git branch命令的-r选项，可以用来查看远程分支，-a选项查看所有分支。 123456789$ git branch -rorigin/master$ git branch -amasterremotes/origin/master 上面命令表示，本地主机的当前分支是master，远程分支是origin/master。 取回远程主机的更新以后，可以在它的基础上，使用git checkout命令创建一个新的分支。 1$ git checkout -b newBrach origin/master 上面命令表示，在origin/master的基础上，创建一个新分支。 此外，也可以使用git merge命令或者git rebase命令，在本地分支上合并远程分支。 12345$ git merge origin/master# 或者$ git rebase origin/master 上面命令表示在当前分支上，合并origin/master。 四、git pull git pull命令的作用是，取回远程主机某个分支的更新，再与本地的指定分支合并。它的完整格式稍稍有点复杂。 1$ git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt; 比如，取回origin主机的next分支，与本地的master分支合并，需要写成下面这样。 1$ git pull origin next:master 如果远程分支是与当前分支合并，则冒号后面的部分可以省略。 1$ git pull origin next 上面命令表示，取回origin/next分支，再与当前分支合并。实质上，这等同于先做git fetch，再做git merge。 123$ git fetch origin$ git merge origin/next 在某些场合，Git会自动在本地分支与远程分支之间，建立一种追踪关系（tracking）。比如，在git clone的时候，所有本地分支默认与远程主机的同名分支，建立追踪关系，也就是说，本地的master分支自动&quot;追踪&quot;origin/master分支。 Git也允许手动建立追踪关系。 1git branch --set-upstream master origin/next 上面命令指定master分支追踪origin/next分支。 如果当前分支与远程分支存在追踪关系，git pull就可以省略远程分支名。 1$ git pull origin 上面命令表示，本地的当前分支自动与对应的origin主机&quot;追踪分支&quot;（remote-tracking branch）进行合并。 如果当前分支只有一个追踪分支，连远程主机名都可以省略。 1$ git pull 上面命令表示，当前分支自动与唯一一个追踪分支进行合并。 如果合并需要采用rebase模式，可以使用–rebase选项。 1$ git pull --rebase &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt; 如果远程主机删除了某个分支，默认情况下，git pull 不会在拉取远程分支的时候，删除对应的本地分支。这是为了防止，由于其他人操作了远程主机，导致git pull不知不觉删除了本地分支。 但是，你可以改变这个行为，加上参数 -p 就会在本地删除远程已经删除的分支。 1234567$ git pull -p# 等同于下面的命令$ git fetch --prune origin$ git fetch -p 五、git push git push命令用于将本地分支的更新，推送到远程主机。它的格式与git pull命令相仿。 1$ git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt; 注意，分支推送顺序的写法是&lt;来源地&gt;:&lt;目的地&gt;，所以git pull是&lt;远程分支&gt;:&lt;本地分支&gt;，而git push是&lt;本地分支&gt;:&lt;远程分支&gt;。 如果省略远程分支名，则表示将本地分支推送与之存在&quot;追踪关系&quot;的远程分支（通常两者同名），如果该远程分支不存在，则会被新建。 1$ git push origin master 上面命令表示，将本地的master分支推送到origin主机的master分支。如果后者不存在，则会被新建。 如果省略本地分支名，则表示删除指定的远程分支，因为这等同于推送一个空的本地分支到远程分支。 12345$ git push origin :master# 等同于$ git push origin --delete master 上面命令表示删除origin主机的master分支。 如果当前分支与远程分支之间存在追踪关系，则本地分支和远程分支都可以省略。 1$ git push origin 上面命令表示，将当前分支推送到origin主机的对应分支。 如果当前分支只有一个追踪分支，那么主机名都可以省略。 1$ git push 如果当前分支与多个主机存在追踪关系，则可以使用-u选项指定一个默认主机，这样后面就可以不加任何参数使用git push。 1$ git push -u origin master 上面命令将本地的master分支推送到origin主机，同时指定origin为默认主机，后面就可以不加任何参数使用git push了。 不带任何参数的git push，默认只推送当前分支，这叫做simple方式。此外，还有一种matching方式，会推送所有有对应的远程分支的本地分支。Git 2.0版本之前，默认采用matching方法，现在改为默认采用simple方式。如果要修改这个设置，可以采用git config命令。 12345$ git config --global push.default matching# 或者$ git config --global push.default simple 还有一种情况，就是不管是否存在对应的远程分支，将本地的所有分支都推送到远程主机，这时需要使用–all选项。 1$ git push --all origin 上面命令表示，将所有本地分支都推送到origin主机。 如果远程主机的版本比本地版本更新，推送时Git会报错，要求先在本地做git pull合并差异，然后再推送到远程主机。这时，如果你一定要推送，可以使用–force选项。 1$ git push --force origin 上面命令使用–force选项，结果导致远程主机上更新的版本被覆盖。除非你很确定要这样做，否则应该尽量避免使用–force选项。 最后，git push不会推送标签（tag），除非使用–tags选项。 1$ git push origin --tags]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>git方法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[linux操作系统的常用命令]]></title>
    <url>%2Fzh-cn%2Fcommon-commands-of-linux.html</url>
    <content type="text"><![CDATA[归纳和总结了在操作Linux系统时常用的命令，以便在后期使用的时候方便查找和熟悉，以下命令并不保证兼容所有基于Linux的系统或者其衍生操作系统。本篇命令在Ubuntu上测试通过。 Linux常用命令： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168passwd 密码 ------------修改管理员root的密码passwd 某用户 -----------修改某用户的密码su 用户名 ----------切换用户su - ----------切换到管理员用户shutdown -h now ------------马上关机（正常关机）shutdown -h now 直接关机shutdown -h 10 10分钟后关机shutdown -h 12:30 12:30分关机（定时关机）poweroff 关机（相当于强制关机，不建议使用）shutdown -r now -----重启reboot 重启pwd --------------显示当前所在的目录ls / --------------list。显示当前跟目录下所有文件夹和文件ls (相当于windows dir)参数 :ls /home/tanzhou选项 : ls -l 长模式 ls -1 一行一个 ls -a 所有的包括隐藏文件 ls -s 文件的大小 ls -sh 文件以人的阅读习惯 ls -la 多个选项一起用date显示当前时间date +% Y显示当前年份（大写显示全年，小写显示年份后两位）date +%m 显示当前月份date +%d 日date +%H 时date +%M 分date +%s 秒cal 查看当前月份日历cal 2015 查看2015年全年日历cal 11 2015 查看2015年11月份日历 【提示】：月份在前，年份在后bc 打开计算器scale 设置精度 （scale=2 就是保留两位小数位）1/3 计算1除以3.33 计算结果quit 退出计算器touch filename 创建文件（如果filename存在，则会更改已存在的时间等，不存在就创建）history 查看最近1000条历史命令!历史数字 快捷调用mkdir创建文件夹mkdir Allister 创建一个Allister文件夹rm -rf Allister/ 删除Allister文件夹touch 创建文件touch allister 创建一个allister文件rm -f allister 删除allister文件cp 复制文件或者文件夹cp Allister Allister1 复制文件Allister到当前路径下，取名为Allister1tab 自动补全 连续两次按tab，找出全部Ctrl + a 光标跳到开头Ctrl + e 光标跳到行末Ctrl + u 删除到开头Ctrl + k 删除到光标的末尾ESC + . 补全历史参数选中 按滚轮键 复制、粘贴Ctrl + d / exit 退出终端makewhatis 打开帮助whatis XX XX帮助（whatis date date的帮助信息）man 章节 XX 查看第几章节的XX 不懂找男人XX --help 查看XX的帮助信息sync 强制将内存中的数据写到硬盘中（普通用户使用只能将自己的数据保存，root用户使用可以将所有的数据保存在硬盘中）runlevel 模式切换runlevel 0 关机runlevel 3 纯命令模式runlevel 5 图形界面模式runlevel 6 重启init 0 马上关机init 3 马上切换到纯命令模式init 5 马上切换到图形界面模式init 6 马上重启echo &quot;内容&quot; &gt; 文件名 向文件中写入内容：echo &quot;明天星期三&quot; allister.txt 将内容写入到文件allister.txt中cat 文件名 读取文件的内容cat allister.txt 读取allister.txt文件的内容zip -r allister.zip allister.txt 将allister.txt文件压缩为allister.zipunzip 解压unzip -o -d /root/Allister linda.zip 将linda.zip解压到/root/Allister文件夹下（-o不提示的情况下覆盖文件，-d 指明解压路径）rm fafea 删除一个不存在的文件会提升错误，怎样才能不提示错误呢？rm fadsa 2&gt;/dev/null 这样就不会提示错误，会将错误信息抛向null null就是一个黑洞Linux中文件权限：owner 用户，文件的所有者group 用户组others 其他人上面三种都有以下三中权限：&#123;1.read （读）2.write （写）3.execute （执行）&#125;系统上的账号和一般用户，还有root用户的信息都存放在系统中的/etc/passwd文件中个人密码记录在/etc/shadow文件中组名存放在/etc/group中 命令：more /etc/groupls -al 查看用户拥有那些权限 r（读）w（写）x（执行）1：文件类型权限（d开头代表目录，-开头代表文件） 文件的种类&#123; - ：普通文件 d ：目录 b ：设备文件&#123; 1：块设备（U盘，硬盘等） 2：c开头（字符设备&lt;键盘，鼠标等&gt;） &#125; l ：快捷方式（软设备） &#125;2：连接数3：文件的所有者4：用户组5：文件的容量6：最后修改时间7：文件名chgrp 改变用户组：chgrp users install.log 将install.log文件的用户组改为userschown 改变文件的所有者chown bin install.log 将文件instal.log文件的所有者改为bin【chown root:root install.log 将install.log文件的所有者和用户组都改为root】chmod 改变文件权限 chmod （u,g,o,a） （+-=） （r w x） 文件或者目录用户 加/减/设置 权限chmod g=wx install.log 设置文件install.log的用户组权限为wx（写，执行）通过直接写数字来改变权限r 代表数字4w 代表数字2x 代表数字1rwx = r + w + x = 7在linux中可以直接用三位数字来表示9个权限如：r-x rw- --x = 561目录与文件：权限对文件而言&#123; R: 可以读取文件的实际内容，读取文本文件的文字内容； W：可以编辑，新增，修改该文件的内容 X：该文件具有被系统执行的权限&#125;权限对文件夹而言&#123; R：可以读取该文件夹的目录列表，简单地说就是可以使用ls，但不能读取该文件的详细信息 W：这个权限对于目录而言是很强大的，可以新增，删除文件和文件夹，可以重命名，可以转移文件和文件夹 X：就是说，具有X权限就可以进入到这个目录，可以用cd命令&#125;管道：目的是解决程序同时访问一个文件所造成的错误常用的扩展名&#123; .sh 脚本或者批处理文件 tar,tar.gz .zip .tgz 这些都是经过打包的压缩文件 html .php 这些都是网页文件&#125;]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>磁盘</tag>
        <tag>命令</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySQL常用的SQL查询语句]]></title>
    <url>%2Fzh-cn%2Fsql-check-common.html</url>
    <content type="text"><![CDATA[在MySQL的学习过程中，创建、修改、删除等基本命令是必须掌握的。下面总结一下在开发中比较实用的时期常用命令。可安装虚拟机进行模拟操作。 一、常用命令 在cmd命令行连接MySQL数据库 格式: mysql -h主机地址 -u用户名 -p用户密码 数据库名 1、连接到本机上的MySQL。 首先在打开cmd命令行，然后键入命令mysql -uroot -p，回车后提示你输密码，输入密码后直接回车即可进入 到MYSQL中了，MySQL的提示符是：mysql&gt; 示例如下： C:&gt; mysql -uroot -pmysql test mysql&gt; show databases; 显示所有的数据库 mysql&gt; use mysql; 切换数据库 mysql&gt; show tables; 显示数据库中的所有表 mysql&gt; exit;(回车) 退出mysql 2、连接到远程主机上的MySQL。假设远程主机的IP为:192.168.1.22，用户名为root，密码为root。键入以下命令: C:&gt; mysql -h192.168.1.22 -uroot -proot (注:u与root可以不用加空格，其它也一样) 3、退出MySQL命令: exit (回车) 二、MySQL控制台部分命令 1、启动和关闭数据库 12net start mysqlnet stop mysql 所以命令必须是一行的第一个，并且以分号结尾： All text commands must be first on line and end with “;” 2、根据用户名密码，登录数据库 123mysql -uroot -p;如果数据库没有密码则使用mysql -uroot; 3、查看在当前服务器中有多少个数据库 1show databases; 4、删除某个数据库 12drop database databaseName;commit; 5、创建数据库 1create database databaseName; 6、选择使用某个数据库 1use databaseName; 7、查看数据库中有多少的表 1show tables; 8、创建表 12345create table tableName( id bigint name varchar(20) ... ); 9、显示表结构 1describe tableName; 10、向表中加入数据并查看 12insert into tableName(id、name...) values(&apos;1&apos;、&apos;admin&apos;、...);select * from tableName; 11、导入.sql文件(文件所在路径是F:\file.sql 1source F:/file.sql; 12、删除表 1drop table tableName; 13、删除表中的所有数据，但是表结构依然存在 1delete from tableName; 14、更新表中的数据、如果没有where，则将影响所有的记录 1update tableName set name=&apos;administrator&apos; where id=&apos;1&apos;; 15、查看服务器版本和当前日期 123select version()、current_date;select version();select now(); 16、把mysql作为一个简单的计算器 12select pi();select pi()*10; 17、查看用户 1select user(); 18、使用load 1load data local infile filePath into table tableName; 三、全局管理权限： FILE: 在MySQL服务器上读写文件。 PROCESS: 显示或杀死属于其它用户的服务线程。 RELOAD: 重载访问控制表，刷新日志等。 SHUTDOWN: 关闭MySQL服务。 数据库/数据表/数据列权限： ALTER: 修改已存在的数据表(例如增加/删除列)和索引。 CREATE: 建立新的数据库或数据表。 DELETE: 删除表的记录。 DROP: 删除数据表或数据库。 INDEX: 建立或删除索引。 INSERT: 增加表的记录。 SELECT: 显示/搜索表的记录。 UPDATE: 修改表中已存在的记录。 特别的权限： ALL: 允许做任何事(和root一样)。 USAGE: 只允许登录–其它什么也不允许做。 删除服务：sc delete mysql; 四、导出和导入数据 导出数据： mysqldump --opt test &gt; mysql.test 即将数据库test数据库导出到mysql.test文件，后者是一个文本文件 如：mysqldump -u root -p123456 --databases dbname &gt; mysql.dbname 就是把数据库dbname导出到文件mysql.dbname中。 导入数据: mysqlimport -u root -p123456 &lt; mysql.dbname。 将文本数据导入数据库: 文本数据的字段数据之间用tab键隔开。 use test; load data local infile “文件名” into table 表名; 1:使用SHOW语句找出在服务器上当前存在什么数据库： mysql&gt; SHOW DATABASES; 2、创建一个数据库MYSQLDATA mysql&gt; CREATE DATABASE MYSQLDATA; 3:选择你所创建的数据库 mysql&gt; USE MYSQLDATA; (按回车键出现Database changed 时说明操作成功!) 4:查看现在的数据库中存在什么表 mysql&gt; SHOW TABLES; 5:创建一个数据库表 mysql&gt; CREATE TABLE MYTABLE (name VARCHAR(20), sex CHAR(1)); 6:显示表的结构： mysql&gt; DESCRIBE MYTABLE;（DESC MYTABLE;） 7:往表中加入记录 mysql&gt; insert into MYTABLE values (“hyq”,“M”); 8:用文本方式将数据装入数据库表中(例如D:/mysql.txt) mysql&gt; LOAD DATA LOCAL INFILE “D:/mysql.txt” INTO TABLE MYTABLE; 9:导入.sql文件命令(例如D:/mysql.sql) mysql&gt;use database; mysql&gt;source d:/mysql.sql; 10:删除表 mysql&gt;drop TABLE MYTABLE; 11:清空表 mysql&gt;delete from MYTABLE; 12:更新表中数据 mysql&gt;update MYTABLE set sex=“f” where name=‘hyq’; 13：备份数据库 mysqldump -u root 库名&gt;xxx.data 14：例2：连接到远程主机上的MYSQL 假设远程主机的IP为：110.110.110.110，用户名为root,密码为abcd123。则键入以下命令： mysql -h110.110.110.110 -uroot -pabcd123 (注:u与root可以不用加空格，其它也一样) 3、退出MYSQL命令： exit (回车) 五、常用sql 语句 1:使用SHOW语句找出在服务器上当前存在什么数据库： mysql&gt; SHOW DATABASES; 2:创建一个数据库MYSQLDATA mysql&gt; Create DATABASE MYSQLDATA; 3:选择你所创建的数据库 mysql&gt; USE MYSQLDATA; (按回车键出现Database changed 时说明操作成功！) 4:查看现在的数据库中存在什么表 mysql&gt; SHOW TABLES; 5:创建一个数据库表 mysql&gt; Create TABLE MYTABLE (name VARCHAR(20), sex CHAR(1)); 6:显示表的结构： mysql&gt; DESCRIBE MYTABLE; 7:往表中加入记录 mysql&gt; insert into MYTABLE values (”hyq”,”M”); 8:用文本方式将数据装入数据库表中（例如D:/mysql.txt） mysql&gt; LOAD DATA LOCAL INFILE “D:/mysql.txt” INTO TABLE MYTABLE; 9:导入.sql文件命令（例如D:/mysql.sql） mysql&gt;use database; mysql&gt;source d:/mysql.sql; 10:删除表 mysql&gt;drop TABLE MYTABLE; 11:清空表 mysql&gt;delete from MYTABLE; 12:更新表中数据 mysql&gt;update MYTABLE set sex=”f” where name=’hyq’; 13:插入数据 mysq&gt;linsert into MYTABLE values (1, ‘第二章’, 0×2134545); 14:登录后使用数据库 mysql mysql -u root -p mysql mysql -u root -p -h 11.11.11.11 database 15:mysql jdbc连接url 使用中文 jdbc:mysql://localhost/test?useUnicode=true&amp;characterEncoding=utf-8]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>SQL</tag>
        <tag>MySql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[人生就该向这些花儿一样]]></title>
    <url>%2Fzh-cn%2Fsame-flower.html</url>
    <content type="text"><![CDATA[​人生就该向这些花儿一样，不管生长在贫瘠的土地，还是肥沃的良田，都应该在风雨中吸取养分，在阳光下灿烂的微笑，只要是种子发出了芽，就该茁壮的成长，不要顾虑自己会不会像牡丹那样妖娆，也不要在清新典雅的茉莉花前自渐形秽，是花，就要怒放生命。春来秋去，花开花谢，生命的旅程，不在乎长短，而是认真让自己活一回，让短暂的生命，因为用心的绽放，而弥久飘香，厚重而又沉稳。]]></content>
      <categories>
        <category>心情随笔</category>
      </categories>
      <tags>
        <tag>人生感悟</tag>
        <tag>哲理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux命令：ls]]></title>
    <url>%2Fzh-cn%2Flinux-check-ls.html</url>
    <content type="text"><![CDATA[在MySQL的学习过程中，最复杂，最考验SQL功底的就是SELECT查询语句了。下面总结一下在WEB网站开发中比较实用的时期查询SQL语句。假设MySQL数据库表中时间字段为add_time，类型为datetime。 1、查询当天 1SELECT * FROM `article` WHERE to_days(`add_time`) = to_days(now()); 2、查询昨天 1SELECT * FROM `article` WHERE to_days(now()) – to_days(`add_time`) = 1; 3、查询最近7天 1SELECT * FROM `article` WHERE date_sub(curdate(), INTERVAL 7 DAY) &lt;= DATE(`add_time`); 或者 1SELECT * FROM `article` WHERE curdate()- INTERVAL 7 DAY &lt;= DATE(`add_time`); 4、查询最近30天 1SELECT * FROM `article` WHERE date_sub(curdate(), INTERVAL 30 DAY) &lt;= DATE(`add_time`); 或者 1SELECT * FROM `article` WHERE curdate()-INTERVAL 30 DAY &lt;= DATE(`add_time`); 5、查询截止到当前本周 12SELECT * FROM `article` WHERE YEARWEEK(date_format(`add_time`,'%Y-%m-%d')) = YEARWEEK(now());#默认从周日开始到周六SELECT * FROM `article` WHERE YEARWEEK(date_format(`add_time`,'%Y-%m-%d'),1) = YEARWEEK(now(),1);#设置为从周一开始到周日 6、查询上周的数据 1SELECT * FROM `article` WHERE YEARWEEK(date_format(`add_time`,'%Y-%m-%d')) = YEARWEEK(now())-1; 7、查询截止到当前本月 1SELECT * FROM `article` WHERE date_format(`add_time`, '%Y%m') = date_format(curdate() , '%Y%m'); 8、查询上一月 1SELECT * FROM `article` WHERE period_diff(date_format(now() , '%Y%m') , date_format(`add_time`, '%Y%m')) =1;]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux命令</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySQL基础知识点总结归纳]]></title>
    <url>%2Fzh-cn%2Flinux-sum.html</url>
    <content type="text"><![CDATA[在开发的过程中，基本标配的数据库为MySQL。我们不用像数据库DBA那样熟悉所有的MySQL知识，作为一个PHP程序员我们还是必须会MySQL基本的数据增删查改。下面总结归纳一些MySQL基础知识点分享给大家。 一、数据库操作 1、创建数据库 1mysql&gt; CREATE DATABASE dbname; 2、删除数据库 1mysql&gt; DROP DATABASE dbname; 3、选择数据库 1mysql&gt; USE dbname; 二、基本的SQL语句 增 12mysql&gt; INSERT INTO TABLE_NAME (column1,column2...) VALUES (value1,value2...);//插入指定字段INSERT INTO TABLE_NAME VALUES (column1,column2...);//插入所有字段 删 1mysql&gt; DELETE FROM TABLE WHERE COLUMN=VALUE;//删除指定的记录 查 1mysql&gt; SELECT column1,column2... FROM TABLE;//所有列为SELECT * FROM TABLE 改 1mysql&gt; UPDATE TABLE SET column1=value1,column2=value2,... WHERE COLUMN=VALUE;//修改 指定的记录一个值或多个值 删改的时候一定要带where条件， 删除时分为物理删除，逻辑删除，一般建议逻辑删除,通过一个状态字段判断是否删除。 三、高级SQL查询 1、LIKE模糊匹配 SQL通配符（LIKE和NOT LIKE) % 匹配0个或多个字符 _ 匹配一个字符 1mysql&gt; SELECT column1,column2... FROM TABLE WHERE COLUMN LIKE "%lei%";//模糊匹配 正则模式匹配（REGEXP、NOT REGEXP和RLIKR、NOT RLIKE） . 匹配任何单个的字符 匹配零个或多个在它前面的东西 [charlist] 字符列中的任何单一字符[a-z][0-9] [^charlist] or [!charlist] 不在字符列中的任何单一字符 1mysql&gt; SELECT column1,column2... FROM TABLE WHERE COLUMN RLIKR "lei*";//模糊匹配 ORDER BY排序 1mysql&gt; SELECT column1,column2... FROM TABLE WHERE ORDER BY COLUMN ASC|DESC;//字段顺序或者倒序 LIMIT返回条数 1mysql&gt; SELECT column1,column2... FROM TABLE WHERE LIMIT 5,10; // 检索记录行 6-15 NULL处理 IS NULL: 当列的值是NULL，此运算符返回true。 IS NOT NULL: 当列的值不为NULL，运算符返回true。 &lt;=&gt;: 比较操作符（不同于=运算符），当比较的的两个值为NULL时返回true。 关联 INNER JOIN（内连接或等值连接）：获取两个表中字段匹配关系的记录。 LEFT JOIN（左连接）：获取左表所有记录，即使右表没有对应匹配的记录。 RIGHT JOIN（右连接）： 与 LEFT JOIN 相反，用于获取右表所有记录，即使左表没有对应匹配的记录。 分组查询 GROUP BY column;//根据字段分组查询 分组结果筛选 HAVING]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>SQL</tag>
        <tag>MySql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySQL常用的SQL查询语句]]></title>
    <url>%2Fzh-cn%2Fsql-check.html</url>
    <content type="text"><![CDATA[在MySQL的学习过程中，最复杂，最考验SQL功底的就是SELECT查询语句了。下面总结一下在WEB网站开发中比较实用的时期查询SQL语句。假设MySQL数据库表中时间字段为add_time，类型为datetime。 1、查询当天 1SELECT * FROM `article` WHERE to_days(`add_time`) = to_days(now()); 2、查询昨天 1SELECT * FROM `article` WHERE to_days(now()) – to_days(`add_time`) = 1; 3、查询最近7天 1SELECT * FROM `article` WHERE date_sub(curdate(), INTERVAL 7 DAY) &lt;= DATE(`add_time`); 或者 1SELECT * FROM `article` WHERE curdate()- INTERVAL 7 DAY &lt;= DATE(`add_time`); 4、查询最近30天 1SELECT * FROM `article` WHERE date_sub(curdate(), INTERVAL 30 DAY) &lt;= DATE(`add_time`); 或者 1SELECT * FROM `article` WHERE curdate()-INTERVAL 30 DAY &lt;= DATE(`add_time`); 5、查询截止到当前本周 12SELECT * FROM `article` WHERE YEARWEEK(date_format(`add_time`,'%Y-%m-%d')) = YEARWEEK(now());#默认从周日开始到周六SELECT * FROM `article` WHERE YEARWEEK(date_format(`add_time`,'%Y-%m-%d'),1) = YEARWEEK(now(),1);#设置为从周一开始到周日 6、查询上周的数据 1SELECT * FROM `article` WHERE YEARWEEK(date_format(`add_time`,'%Y-%m-%d')) = YEARWEEK(now())-1; 7、查询截止到当前本月 1SELECT * FROM `article` WHERE date_format(`add_time`, '%Y%m') = date_format(curdate() , '%Y%m'); 8、查询上一月 1SELECT * FROM `article` WHERE period_diff(date_format(now() , '%Y%m') , date_format(`add_time`, '%Y%m')) =1;]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>SQL</tag>
        <tag>MySql</tag>
      </tags>
  </entry>
</search>
