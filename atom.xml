<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>听雨轩</title>
  
  <subtitle>靠近我，温暖你，拥抱我，满足你</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.dxain.ml/"/>
  <updated>2019-10-02T10:11:22.000Z</updated>
  <id>https://www.dxain.ml/</id>
  
  <author>
    <name>Alliot</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>我和我的祖国</title>
    <link href="https://www.dxain.ml/zh-cn/myself-china.html"/>
    <id>https://www.dxain.ml/zh-cn/myself-china.html</id>
    <published>2019-09-28T19:33:49.000Z</published>
    <updated>2019-10-02T10:11:22.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/uploads/china-birsday.png" alt></p><a id="more"></a><p>从1949年到2019年，弹指之间，新中国将迎来它的第70个年头。中国从一个贫穷落后的国家发展成了如今的第二大经济强国。70年前中国百废待兴，70年后中国百业昌盛!我们为祖国感到骄傲!我们为五星红旗感到自豪!</p><div class="note success"><p>下为1949年开国大典影像资料：</p></div><p><video poster="/uploads/70th.png" src="https://bestzuo.cn/开国大典.mp4" style="max-height:100%;max-width:100%;display:block;margin-left:auto;margin-right:auto" controls loop preload="meta">Your browser does not support the video tag.</video></p><blockquote><p><font face="黑体" color="green" size="5"><a href="https://v.qq.com/x/cover/mzc002005wlunzw/d30031hm2g5.html" target="_blank" rel="noopener">戳我观看国庆70周年阅兵式完整视频</a></font></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/uploads/china-birsday.png&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="家国情怀" scheme="https://www.dxain.ml/categories/%E5%AE%B6%E5%9B%BD%E6%83%85%E6%80%80/"/>
    
    
      <category term="情感" scheme="https://www.dxain.ml/tags/%E6%83%85%E6%84%9F/"/>
    
      <category term="生活" scheme="https://www.dxain.ml/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="祖国" scheme="https://www.dxain.ml/tags/%E7%A5%96%E5%9B%BD/"/>
    
  </entry>
  
  <entry>
    <title>Promise 杂谈</title>
    <link href="https://www.dxain.ml/zh-cn/talk-promise.html"/>
    <id>https://www.dxain.ml/zh-cn/talk-promise.html</id>
    <published>2019-03-01T11:12:21.000Z</published>
    <updated>2022-07-23T10:32:11.502Z</updated>
    
    <content type="html"><![CDATA[<h4 id="promise-是如何解决回调地狱问题的？">Promise 是如何解决回调地狱问题的？</h4><p>所谓回调地狱，可能它的危害并不全在于由于过多的嵌套函数导致日渐增长的缩进最终会超过你的屏幕宽度，而是它剥夺了我们编写 try-catch，throw 这样的代码的权利，并且会有调用信任的问题。</p><p>使用回调函数调用第三方服务或者模块，回调函数的执行权会交给了第三方，可能出现的问题就会可能有多次调用，回调时间不稳定(过早或过晚)等等的问题，虽然这些问题我们可能通过其他手段进行解决，比如通过一个 flag 值来控制调用次数的问题:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">let called = false;</span><br><span class="line"></span><br><span class="line">rpc(&apos;https://path/to/service&apos;, (err, res) =&gt; &#123;</span><br><span class="line">    if (called) return;</span><br><span class="line">    // do somthing with res</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>但是这样始终非常不方便，代码中也会出现很多不必要的副作用，往往会给我们代码设计带来麻烦。</p><p>而 Promise 的出现，通过控制反转的方法，让回调函数只做将它本身的返回值返回的操作，然后让 Promise 将这个值存起来，并通知所有需要知道此函数调用成功的函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">    rpc(&apos;https://path/to/service&apos;, (err, res) =&gt; &#123;</span><br><span class="line">    resolve(res);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;).then((res) =&gt; &#123;</span><br><span class="line">    // do somthing with res</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这样，有利于消除副作用，基于回调函数的返回值与代码逻辑不再全部放在第三方调用的回调中了。</p><p>而对于回调函数执行的时间不稳定问题，由于使用第三方模块的时候，回调函数的执行时机对于我们是一个黑盒，如果模块的设计者不加注意，很容易会导致 release zalgo 问题，也就是如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">let urls = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">function rpc (url, callback) &#123;</span><br><span class="line">    if (urls[url]) &#123;</span><br><span class="line">        return callback(urls[url]);</span><br><span class="line">    &#125;</span><br><span class="line">    request(url, (err, res) =&gt; &#123;</span><br><span class="line">        urls[url] = res;</span><br><span class="line">        callback(err, res);</span><br><span class="line">    &#125;));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果这样实现第三方模块，那么这里的回调函数调用时机是不确定的，有可能是同步调用，有可能是异步调用，有时候这里会导致一些难以追踪的 bug。</p><p>但是使用了 Promise 进行包裹，不需要担心这个问题，因为 then 函数始终都是异步执行的。因为我们执行 new Promise 函数中的 resolve 函数的时候，内部实现是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// promise 的简单实现</span><br><span class="line">function _resolve(value)&#123;</span><br><span class="line">if (self.state === &apos;pending&apos;) &#123;</span><br><span class="line">       nextTick(() =&gt; &#123; // nextTick 代表异步执行，可以是 process.nextTick, 也可以是 setTimeout</span><br><span class="line">           self.state = &apos;fulfilled&apos;;</span><br><span class="line">           self.value = value;</span><br><span class="line">           // 批量执行通过 then 函数添加的成功回调，回调函数存放到一个数组中</span><br><span class="line">           self.resolveQueue.forEach(cb =&gt; &#123;</span><br><span class="line">               cb(value);</span><br><span class="line">           &#125;);</span><br><span class="line">       &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以我们在取得回调函数返回值的 then 函数始终是被异步执行的，无需担心 release zalgo 问题。</p><p>并且由于 Promise 的内部实现，不会出现多次调用回调函数的问题，原因在由于 Promise 本身是一个有穷状态机，本身包含 pending, fulfilled, rejected 三种状态，并且从 pending 状态到 fulfilled 状态与 pending 状态到 rejected 状态不可逆，所以上面的回调函数中，即使写成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">....</span><br><span class="line">rpc(&apos;https://path/to/service&apos;, (err, res) =&gt; &#123;</span><br><span class="line">   if (err) reject(err);</span><br><span class="line">    resolve(res);</span><br><span class="line">&#125;);</span><br><span class="line">....</span><br></pre></td></tr></table></figure><p>也不会影响实际代码的运行，如果出现了 err, 会先运行 reject 函数, Promise 的状态就会变为 rejected 状态，后面的 resolve 函数执行会被忽略，代码变得可靠很多。</p><p>另外，在 Promise 中，你甚至可以 resolve 一个 PromiseLike 的对象，也就是一个包含 then 方法的对象，根据 Promise/A+ 规范的实现，在执行这种 PromiseLike 对象的 then 方法的时候，会对传入的 resolve，reject 方法的执行次数进行控制：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">....</span><br><span class="line">// 此为本人根据 Promise/A+ 规范实现部分代码</span><br><span class="line">let called = false;</span><br><span class="line">// x 表示 上一个 Promise resolve 传入的值</span><br><span class="line">if ((x !== null &amp;&amp; typeof x === &apos;object&apos;) || typeof x === &apos;function&apos;) &#123; // 如果是对象或者是函数</span><br><span class="line">    try &#123;</span><br><span class="line">        // 这里是鸭子模型，只要有 then 方法就尝试执行</span><br><span class="line">    let then = x.then;</span><br><span class="line">        if (typeof then === &apos;function&apos;) &#123;</span><br><span class="line">             // 说明是一个 thenable 对象</span><br><span class="line">            then.call(x, y =&gt; &#123;</span><br><span class="line">                // 避免 then 函数中多次执行第一次传入的函数(即此函数)，如多次执行则以第一次执行为准</span><br><span class="line">                 // 而且如果 reject 函数先执行，那么这个函数的执行会被忽略</span><br><span class="line">                if (called) return;</span><br><span class="line">                called = true;</span><br><span class="line">                resolvePromise(promise, y, resolve, reject);</span><br><span class="line">            &#125;, err =&gt; &#123;</span><br><span class="line">                // 避免 then 函数中多次执行第二次传入的函数(即此函数)，如多次执行则以第一次执行为准</span><br><span class="line">                // 而且如果 resolve(resolvePromise) 函数先执行，那么这个函数的执行会被忽略</span><br><span class="line">                if (called) return;</span><br><span class="line">                called = true;</span><br><span class="line">                return reject(err);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            resolve(x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch (err) &#123;</span><br><span class="line">        // 如果 then 方法中有异常，也需要将 promise 置为 reject</span><br><span class="line">        // 但是为了防止前面 then 函数中 resolve(resolvePromise) 与 reject 已经被执行过后</span><br><span class="line">        // then 方法执行又出错，添加 called 值来判断，如果已经执行过 resolvePromise/reject 方法</span><br><span class="line">        // 那么这里 catch 到的错误会被忽略</span><br><span class="line">        // 否则以此错误来 reject Promise</span><br><span class="line">        if (called) return;</span><br><span class="line">        called = true;</span><br><span class="line">        reject(err);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line">....</span><br></pre></td></tr></table></figure><p>其实，called 变量判断回调执行与否是为了防范 thenable 对象的实现不符合 Promise 的机制，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">let p = new Promise((resolve) =&gt; &#123;</span><br><span class="line">    resolve();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">p.then(() =&gt; &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">        then(a, b) &#123;</span><br><span class="line">            a(); // 会执行一次 reoslve(resolvePromise)</span><br><span class="line">            a(); // 同样会执行 resolve 函数，但是后续逻辑被 called 拦截了，不会真正执行</span><br><span class="line">            b(); // 执行 reject 函数，但是被 called 拦截了</span><br><span class="line">            throw &apos;real?&apos;; // 这里会使 try-catch 中 catch 后的代码执行，但是同样被 called 拦截</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>对于超时问题，Promise 还提供了 race 方法，让我们的调用可以方便地添加超时机制，让代码尽可能在可控的范围内。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">let rpcSync = new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">    rpc(&apos;https://path/to/service&apos;, (err, res) =&gt; &#123;</span><br><span class="line">    if (err) return reject(err);</span><br><span class="line">        resolve(res);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">Promise.race([</span><br><span class="line">    rpcSync(&apos;http://path/to/service&apos;),</span><br><span class="line">    new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">        setTimeout(() =&gt; &#123;</span><br><span class="line">            resolve();</span><br><span class="line">        &#125;, 5000);</span><br><span class="line">    &#125;);</span><br><span class="line">]);</span><br></pre></td></tr></table></figure><p>注：函数副作用指调用函数时除了返回函数值还会修改函数外的变量</p><p>composing Promise<br>我们在使用 Promise 的时候，应当充分利用 Promise 的优势， 不能将 Promise 当成回调函数来使用，避免像以下的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">UserOrm.get(id).then((data) =&gt; &#123;</span><br><span class="line">...</span><br><span class="line">SchoolOrm.get(data.school).then((school) =&gt; &#123;</span><br><span class="line">        ...</span><br><span class="line">       ChairManOrm.get(school.chairMan).then((chairMan) =&gt; &#123;</span><br><span class="line">        .....</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>当然，Promise 通过上面阐释的多种机制优化了很多回调函数存在的问题，上面的代码可能会比单纯使用回调函数要好，但是这样的代码风格很糟糕，如果业务逻辑复杂，会让编写者非常难受，而其实我们可以借助 Promise，让其他 Promise 进行链接。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">UserOrm.get(id)</span><br><span class="line">.then((data) =&gt; &#123;</span><br><span class="line">    return SchoolOrm.get(data.school);</span><br><span class="line">&#125;)</span><br><span class="line">.then((school) =&gt; &#123;</span><br><span class="line">    return ChairManOrm.get(school.chairMan);</span><br><span class="line">&#125;)</span><br><span class="line">.then((chairMan) =&gt; &#123;</span><br><span class="line">    ....</span><br><span class="line">&#125;)</span><br><span class="line">.catch((err) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这样的链式调用会比第一个例子中的 then 地狱要好得多，我们只需要在 then 函数里面返回另一个 Promise，那么在下一个链式的 then 函数中就能拿到返回的 Promise 的输出结果。</p><p>而原理在于，根据 Promise/A+ 规范，then 函数的内部处理中，如果 then 函数传入的第一个函数的返回值是一个 Promise 的时候，会根据 Promise Resolution Procedure 的处理，递归地为返回的 Promise 添加 then 函数处理，直到返回结果不是 Promise 对象，并以此值作为上一层 Promise 的返回结果。</p><p>而对于返回非 Promise 值，then 函数也会直接将这个返回值直接传递给下一个 Promise，这样就有利于我们写出利用缓存结果的函数了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">getUrl().then((url) =&gt; &#123;</span><br><span class="line">    if (urls[url]) &#123;</span><br><span class="line">        return resolve(urls[url]);</span><br><span class="line">    &#125;</span><br><span class="line">    return rpc(url); // rpc 返回一个 promise</span><br><span class="line">&#125;).then((data) =&gt; &#123;</span><br><span class="line">    // get data</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>上面这个函数利用了内存结果缓存而不用担心上面所说的 release zalgo 问题，因为后一个 then 函数一定是异步被执行的。另外由于 Promise 内部对 then 函数传入的函数都添加了 try-catch 处理，所以我们在 then 函数中直接 throw 一个错误，那么这个错误会被捕获到，并以这个错误作为 Promise 的 reject 原因传给下一个 Promise。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">getUrl().then((url) =&gt; &#123;</span><br><span class="line">    if (/^http|https/.test(url)) throw new Error(&apos;url Error&apos;);</span><br><span class="line">    if (urls[url]) &#123;</span><br><span class="line">        return resolve(urls[url]);</span><br><span class="line">    &#125;</span><br><span class="line">    return rpc(url); // rpc 返回一个 promise</span><br><span class="line">&#125;).then((data) =&gt; &#123;</span><br><span class="line">    // get data</span><br><span class="line">&#125;)</span><br><span class="line">.catch((err) =&gt; &#123;</span><br><span class="line">    // get err</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>后面的 catch 函数会得到在 then 函数 throw 出来的错误。</p><p>所以，我们在 then 函数里面，最好显式地 return 一个值或者 throw 一个错误，这样我们可以让 then 函数的行为符合我们的预期。</p><p>promise 值穿透问题<br>所谓 promise 值穿透问题就是当你在调用 then 函数的时候，传入的参数不是一个函数的话，那么传入的参数会被忽略，并返回上一个 Promise 的返回结果。</p><p>Promise.resolve(1).then(Promise.resolve(2)).then((res) =&gt; { console.log(res); }); // 1<br>这是因为在 Promise 中，then 函数会有传入的值类型判断：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">then (onFulfilled, onReject) &#123;</span><br><span class="line">    if (typeof onFulfilled !== &apos;function&apos;) onFulfilled = (res) =&gt; res;</span><br><span class="line">    if (typeof onReject !== &apos;function&apos;) onReject = (err) =&gt; throw err;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当传入值非函数的时候，内部会赋予一个默认的返回 Promise 返回结果的函数，因此当我们在调用 then 函数的时候一定需要注意 then 函数是接受函数作为参数的。</p><p>批量 Promise<br>在业务场景中，我们会常常遇到需要批量执行一些异步操作，通常数据会存放在一个数组中，但是如果我们直接循环数组，然后希望在这些异步操作都结束之后做某些操作，在编写代码的时候不加注意，会容易写出这样的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">orm.getList().then((datas) =&gt; &#123;</span><br><span class="line">    datas.forEach((&#123;id&#125;) =&gt; &#123;</span><br><span class="line">        orm.delete(id);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)</span><br><span class="line">.then(() =&gt; &#123;</span><br><span class="line">    console.log(&apos;all list be deleted&apos;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>实际上，最后一个 then 函数的执行时机并不等于所有列表数据都被删除之后的时刻。按照逻辑，真正的代码应该是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">orm.getList().then((datas) =&gt; &#123;</span><br><span class="line">    let promises = datas.map((&#123;id&#125;) =&gt; &#123;</span><br><span class="line">        return orm.delete(id);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    return Promise.all(promises);</span><br><span class="line">&#125;)</span><br><span class="line">.then(() =&gt; &#123;</span><br><span class="line">    console.log(&apos;all list be deleted&apos;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>借助 Promise.all 来达到批量的 Promise 都执行完后再去执行某些逻辑的目的。</p><p>而如果在服务端，有一些批量异步操作可能由于数据列表过长，不希望如此大量的异步操作同一时间进行，那么我们就需要控制同一时间内可进行的异步操作的数量：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">// 一个控制 Promise 并发量的 demo</span><br><span class="line">function parallel (fn, con, thisArg) &#123;</span><br><span class="line">    let jobs = [];</span><br><span class="line">    let current = 0;</span><br><span class="line">    let next = () =&gt; &#123;</span><br><span class="line">      let job = jobs.shift();</span><br><span class="line">        if (job) &#123;</span><br><span class="line">            current ++;</span><br><span class="line">            let &#123; args, resolve, reject &#125; = job;</span><br><span class="line">            fn.apply(thisArg, args).then((res) =&gt; &#123;</span><br><span class="line">                current --;</span><br><span class="line">                next();</span><br><span class="line">                resolve(res);</span><br><span class="line">            &#125;, (err) =&gt; &#123;</span><br><span class="line">                current --;</span><br><span class="line">                next();</span><br><span class="line">                reject(err);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    return function (...args) &#123;</span><br><span class="line">        if (current &lt; con) &#123;</span><br><span class="line">            current ++;</span><br><span class="line">            return new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">               return fn.apply(thisArg, args);</span><br><span class="line">            &#125;).then(res =&gt; &#123;</span><br><span class="line">                current --;</span><br><span class="line">                next();</span><br><span class="line">                return res;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">                jobs.push(&#123;</span><br><span class="line">                    resolve,</span><br><span class="line">                    reject,</span><br><span class="line">                    args</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let executor = parallel(function (data) &#123;</span><br><span class="line">    // dom something with data</span><br><span class="line">    return asyncOperation(data); // asyncOPeration 返回一个 Promise</span><br><span class="line">&#125;, 10);</span><br><span class="line"></span><br><span class="line">Promise.all(datas.map(executor)).then(() =&gt; &#123;</span><br><span class="line">    console.log(&apos;all done&apos;);</span><br><span class="line">&#125;);</span><br><span class="line">async/await 时代</span><br><span class="line">async/await 是谁的语法糖？</span><br><span class="line">这个问题见仁见智，实现过 co 库的更熟悉 generator 运行机制的也许会说是生成器函数与 yield 操作符的语法糖，但是更熟悉 Promise 运行机制的也许会说是 Promise 的语法糖。</span><br><span class="line"></span><br><span class="line">(async function ()&#123;</span><br><span class="line">    await new Promise((resolve) =&gt; &#123;</span><br><span class="line">        setTimeout(() =&gt; &#123;</span><br><span class="line">            resolve(1);</span><br><span class="line">        &#125;, 5000);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>所谓语法糖，是以某种对功能没有影响的语法，方便程序员调用并使程序更简洁。</p><p>所以在生成器角度来看，async/await 提供了类似 co 库的自动运行 generator 对象的 next 方法的机制，达到异步控制流的目的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">function _asyncToGenerator(fn) &#123;</span><br><span class="line">return function () &#123;</span><br><span class="line">var gen = fn.apply(this, arguments);</span><br><span class="line">return new Promise(function (resolve, reject) &#123;</span><br><span class="line">function step(key, arg) &#123;</span><br><span class="line">try &#123;</span><br><span class="line">var info = gen[key](arg);</span><br><span class="line">var value = info.value;</span><br><span class="line">&#125; catch (error) &#123;</span><br><span class="line">reject(error);</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">if (info.done) &#123;</span><br><span class="line">resolve(value);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">return Promise.resolve(value).then(function (value) &#123;</span><br><span class="line">step(&quot;next&quot;, value);</span><br><span class="line">&#125;, function (err) &#123;</span><br><span class="line">step(&quot;throw&quot;, err);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return step(&quot;next&quot;);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">_asyncToGenerator(function* () &#123;</span><br><span class="line">    yield new Promise(function (resolve) &#123;</span><br><span class="line">        setTimeout(function () &#123;</span><br><span class="line">            resolve(1);</span><br><span class="line">        &#125;, 5000);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>*注：以上代码通过 babel 插件 babel-plugin-transform-async-to-generator 进行转化</p><p>在 Promise 的角度，async/await 提供了使某个函数统一返回值为 Promise，并且提供 then 方法的方便调用方式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Promise.resolve().then(function () &#123;</span><br><span class="line">    return new Promise(resolve =&gt; &#123;</span><br><span class="line">        setTimeout(() =&gt; &#123;</span><br><span class="line">            resolve(1);</span><br><span class="line">        &#125;, 5000);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;).then(function () &#123;&#125;);</span><br></pre></td></tr></table></figure><p>*注：以上代码通过 babel 插件 babel-plugin-async-to-promises 进行转化</p><p>可以看作 async 操作符内部创建了一个 Promise 对象，await 只能在 async 函数中使用，可以理解为 then 方法只能在 Promise 对象之后调用。</p><p>但是模拟与实现是两码事，从实现上来说，个人认为 async/await 更偏向于 Promise 的实现，因为在 node 中原生的 async/await 与 Promise 几乎是一样快的。</p><p>async/await 内部干了些什么事情？<br>对于 async 操作符来说，它基本功能就类似下面的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 转化前形如</span><br><span class="line">async function test () &#123;</span><br><span class="line">    return 1;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 经过转化后</span><br><span class="line">function test () &#123;</span><br><span class="line">    return Promise.resolve(1);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>也就是说，async 操作符执行后会返回一个 Promise。</p><p>那么 await 做了什么事情呢？根据 tc39 的 async/await 实现规范来讲，它类似于以下这幅图：</p><p>那么我们自行来翻译一下，将左边 foo 函数使用我们 Promise 语法来表达右边的意思：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function foo (v) &#123;</span><br><span class="line">let implicit_promise = new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">        let promise = new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">            resolve(v);</span><br><span class="line">        &#125;).then(w =&gt; &#123;</span><br><span class="line">            resolve(w)</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">return implicit_promise;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先，只要使用了 async 声明的函数，内部会创建一个隐式 promise，也就是所谓的 implicit_promise，然后 await 会将传入的 v 包裹成一个新的 Promise，对于 w 的赋值操作与后面返回 return w 这些，都放在了这个新建的 Promise 的 then 函数逻辑中了。</p><p>注意，在翻译实现的时候，故意忽略了一个 Promise 的创建也就是 throwaway Promise 这个 promise，这个 promise 是我们翻译的噪音，不需要理会，因为它本身的作用是底层引擎为了兼容适应 API 的实现，创建出来的一个 Promise，它本身并没有其他作用。</p><p>所以我们知道了，其实 async/await 更多地是给我们提供语法糖，优化了 Promise 的 then 调用链的语法使用，而对于 await 后面，它接受的是一个表达式，至于传入的 v 是一个基本类型的值还是一个 Promise 对象，它都会统一包裹一层 Promise。</p><p>对于传入值 v 为一个 Promise 的时候，我们在调用 resolve 函数的时候传入一个 Promise，最终我们在 then 函数中拿到的是传入的 Promise 的返回结果，这部分的实现逻辑与 Promise A+ 规范有关，这里不再阐述。</p><p>当然，这里是可以进一步优化的，当我们传入的 v 是一个 Promise 的时候，我们其实不需要额外包裹一层 Promise，而这个优化点也就是 node@V8 到 node@V10 的对于 async/await 的优化所在。优化的手段类似如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function foo (v) &#123;</span><br><span class="line">let implicit_promise = new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">Promise.resolve(v).then(w =&gt; &#123;</span><br><span class="line">            resolve(w);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">return implicit_promise;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>即是用 Promise.resolve(v) 来代替 new Promise(res =&gt; res(v))。因为在 Promise.resolve 中如果传入值为另一个 Promise，会将这个传入的 Promise 直接返回：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">let p = new Promise(res =&gt; res(1));</span><br><span class="line"></span><br><span class="line">let testP = Promise.resolve(p);</span><br><span class="line"></span><br><span class="line">testP === p // true</span><br><span class="line">多个 async/await 的执行顺序</span><br><span class="line">曾经看过一个题目，代码如下：</span><br><span class="line"></span><br><span class="line">async function first() &#123;</span><br><span class="line">  console.log(&apos;first start&apos;);</span><br><span class="line">  await second();</span><br><span class="line">  console.log(&apos;first end&apos;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">async function second() &#123;</span><br><span class="line">  console.log(&apos;second&apos;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(&apos;start&apos;);</span><br><span class="line">setTimeout(() =&gt; &#123;</span><br><span class="line">  console.log(&apos;setTimeout&apos;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">first();</span><br><span class="line"></span><br><span class="line">new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">  console.log(&apos;promise1&apos;);</span><br><span class="line">  resolve();</span><br><span class="line">&#125;).then(res =&gt; &#123;</span><br><span class="line">  console.log(&apos;then&apos;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 结果</span><br><span class="line">// start</span><br><span class="line">// first start</span><br><span class="line">// seond</span><br><span class="line">// promise1</span><br><span class="line">// then</span><br><span class="line">// first end</span><br><span class="line">// setTimeout</span><br></pre></td></tr></table></figure><p>对于结果来说，如果你已经理解了上面章节所说的 async/await 底层原理，那么就很容易写出类似下面我对上面代码进行翻译的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">function first () &#123;</span><br><span class="line"> const implicit_promise = new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">        console.log(&apos;first start&apos;);</span><br><span class="line">        second().then((res) =&gt; &#123;</span><br><span class="line">            resolve();</span><br><span class="line">        &#125;).then(() =&gt; &#123;</span><br><span class="line">            console.log(&apos;first end&apos;);</span><br><span class="line">        &#125;);</span><br><span class="line"> &#125;);</span><br><span class="line"></span><br><span class="line"> return implicit_promise;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function second () &#123;</span><br><span class="line">    const implicit_promise = new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">        console.log(&apos;second&apos;);</span><br><span class="line">        resolve();</span><br><span class="line"> &#125;);</span><br><span class="line"></span><br><span class="line"> return implicit_promise;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(&apos;start&apos;);</span><br><span class="line">setTimeout(() =&gt; &#123;</span><br><span class="line">  console.log(&apos;setTimeout&apos;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">first();</span><br><span class="line"></span><br><span class="line">new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">  console.log(&apos;promise1&apos;);</span><br><span class="line">  resolve();</span><br><span class="line">&#125;).then(res =&gt; &#123;</span><br><span class="line">  console.log(&apos;then&apos;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这两段代码在 chrome 浏览器 71.0.3578.98 下运行结果是一样的。</p><p>以上就是我对于 Promise 以及基于 Promise 的语法的一些思考与见解，希望大家看完都能有所收获。</p><p>附录</p><p><a href="https://v8.js.cn/blog/fast-async/" target="_blank" rel="noopener">https://v8.js.cn/blog/fast-async/</a></p><p>xieranmaya/blog#3</p><p>《you don’t know javascript》</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;promise-是如何解决回调地狱问题的？&quot;&gt;Promise 是如何解决回调地狱问题的？&lt;/h4&gt;
&lt;p&gt;所谓回调地狱，可能它的危害并不全在于由于过多的嵌套函数导致日渐增长的缩进最终会超过你的屏幕宽度，而是它剥夺了我们编写 try-catch，throw 这样的代
      
    
    </summary>
    
      <category term="ES6" scheme="https://www.dxain.ml/categories/ES6/"/>
    
    
      <category term="promise" scheme="https://www.dxain.ml/tags/promise/"/>
    
      <category term="请求" scheme="https://www.dxain.ml/tags/%E8%AF%B7%E6%B1%82/"/>
    
      <category term="ajax" scheme="https://www.dxain.ml/tags/ajax/"/>
    
  </entry>
  
  <entry>
    <title>滚滚红尘，一个转身就是陌路天涯；虚拟网络，一个删除就是再无交集！</title>
    <link href="https://www.dxain.ml/zh-cn/vr-net.html"/>
    <id>https://www.dxain.ml/zh-cn/vr-net.html</id>
    <published>2019-01-07T19:33:49.000Z</published>
    <updated>2019-01-07T19:40:00.000Z</updated>
    
    <content type="html"><![CDATA[<p style="text-indent:2em">​谁是你心上的疼，谁是你忘不了的情，谁是你醒不了的梦？见与不见，思念一直在；爱与不爱，心一直在。滚滚红尘，一个转身就是陌路天涯；虚拟网络，一个删除就是再无交集。相遇靠缘分，相守靠人心。不是所有的人，都能一直在等；不是所有的情，都能维系一生。许多的名字，越来越模糊；许多的心情，越来越陌生。</p><a id="more"></a><p style="text-indent:2em">​不是不想念，而是怕自作多情；不是不怀念，而是怕再也回不到曾经。一生中，总会有一个人忘不了，却再也不会去打扰。有的人，只剩下了一个名字，却怎么也舍不得删去；有的情，只留下了一段回忆，却无论如何也不能忘记。不敢打开回忆，只怕往事滚滚如潮；不敢重提旧情，放不下的牵挂，只有自己的心知道。只能，远远的看着，静静的守着，深深的祝福着。</p><p><img src="https://cdn.pixabay.com/photo/2019/01/24/21/12/couple-3953348_960_720.jpg" alt></p><p>​</p><p style="text-indent:2em"><br>也许，这就是缘分最好的结局，彼此爱过疼过，怨过伤过，一切又回到了陌生，却再也抹不去来过的痕迹。任四季交替，任时光飞逝，爱过的心灵，痛过的泪滴，却一直深藏在心底，未曾远离。不联系，不代表不想念；不提及，不代表不想起。有情有义的人，都不会把彼此真正忘记。相伴过的往昔，已然是一生的美丽。惟愿，你过得比我好。缘分，总有不期而遇的惊喜，亦有不说再见的离去。变幻的是心情，不变的是感情。</p><p></p><p style="text-indent:2em">​也曾一起嬉戏，一起相依；如今再无交集，再无信息。陌生的熟悉了，熟悉的走远了，缘分只是一场经历；遇见的美丽，感情需要用心珍惜。网络虽然虚拟，却有真情实意，谁也伤不起！一些人，一些事，就像是自然风景。回不去的山，回不去的水，回不去的感情；留不住的风，留不住的雨，留不住的热情。错过了，就过了；爱走了，就走了。</p><p>​</p><p style="text-indent:2em"><br>若是纠缠不清，累的是自己；若是留恋不放，苦的是自己。回不来的是曾经，换来的只能是同情。爱过了不后悔，爱走了不强求。缘来真心以对，缘去坦然面对。最好的感情，就是找一个能够聊得来的伴。各种的话题，永远说不完；重复的语言，也不觉得厌倦。陪伴，是两情相悦的一种习惯；懂得，是两心互通的一种眷恋。总是觉得相聚的时光太短，原来，走得最快的不是时间，而是两个人在一起时的快乐。幸福，就是有一个读懂你的人；温暖，就是有一个愿意陪伴你的人。</p><p></p><p><img src="https://cdn.pixabay.com/photo/2017/01/27/16/36/love-2013497_960_720.png" alt></p><p>​</p><p style="text-indent:2em"><br>人总有脆弱的时候，并不需要太多的浪漫和语言。累了，有一个拥抱可以依靠；痛了，有一句懂得可以舒缓。即使两两相望，也是一份无言的喜欢。即使默默思念，也是一份踏实的心安。人，总要有一个家遮风避雨；心，总要有一个港湾休憩靠岸。最长久的情，是平淡中的不离不弃；最贴心的暖，是风雨中的相依相伴。懂，是心灵的一种呵护，是生命的一种温度。距离的远近，妨碍不了心与心的对语，阻隔不了魂与魂的相吸。穿越时空的心音，总是让人悸动；流在眼角的热泪，总是让人心疼。</p><p></p><p style="text-indent:2em">​因为有人懂，情怀可以诉说，痛苦可以解脱；因为有人懂，孤单时有人相陪，无助时有人安慰。懂，是世界上最温情的语言。简短的话语，却包含了万千。因为深有体会，所以知你的负累，懂你的苦衷；因为感同身受，所以心疼你的真诚，珍惜你的感情。懂，是通往心里的桥梁，引起共鸣。因为懂得，所以包容；因为懂得，所以心同。</p><p>​</p><p style="text-indent:2em"><br>懂得，让心与心没有距离，让生命彼此疼惜。懂得，是生命中最美好的相通，最深刻的感动。家，很平淡，只要每天都能看见亲人的笑脸，就是幸福的展现；爱，很简单，只要每天都会彼此挂念，就是踏实的情感。幸福并不缥缈，在于心的感受；爱情并不遥远，在于两心知的默契。心，只有一颗，不要装的太多；人，只有一生，不要追逐的太累。</p><p></p><p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1547390107439&amp;di=9a10f760cedcb5f8b257f73a4378651a&amp;imgtype=0&amp;src=http%3A%2F%2Fbpic.ooopic.com%2F15%2F89%2F26%2F97b8OOOPICc5.jpg" alt></p><p>​</p><p style="text-indent:2em"><br>心灵的愉悦，来自精神的富有；简单的快乐，来自心态的知足。时间，会沉淀最真的情感；风雨，会考验最暖的陪伴。走远的，只是过眼云烟；留下的，才是值得珍惜的情缘。来得热烈，未必守得长久；爱得平淡，未必无情无义。眼睛看到的许是假象，心的感受才最真实；耳朵听到的许是虚幻，心的聆听才最重要。</p><p></p><p>​</p><p style="text-indent:2em"><br>时间会告诉我们，简单的喜欢，最长远；平凡中的陪伴，最心安；懂你的人，最温暖。用心呵护一份情，用爱守望这一程，不留遗憾给生命。遇见，只是一个开始；守望，才能相伴一生。珍惜爱你的人和你爱的人！</p><p></p>]]></content>
    
    <summary type="html">
    
      &lt;p style=&quot;text-indent:2em&quot;&gt;
​谁是你心上的疼，谁是你忘不了的情，谁是你醒不了的梦？见与不见，思念一直在；爱与不爱，心一直在。滚滚红尘，一个转身就是陌路天涯；虚拟网络，一个删除就是再无交集。相遇靠缘分，相守靠人心。不是所有的人，都能一直在等；不是所有的情，都能维系一生。许多的名字，越来越模糊；许多的心情，越来越陌生。
&lt;/p&gt;
    
    </summary>
    
      <category term="美文欣赏" scheme="https://www.dxain.ml/categories/%E7%BE%8E%E6%96%87%E6%AC%A3%E8%B5%8F/"/>
    
    
      <category term="人生感悟" scheme="https://www.dxain.ml/tags/%E4%BA%BA%E7%94%9F%E6%84%9F%E6%82%9F/"/>
    
      <category term="情感" scheme="https://www.dxain.ml/tags/%E6%83%85%E6%84%9F/"/>
    
      <category term="生活" scheme="https://www.dxain.ml/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>迟来的2018总结</title>
    <link href="https://www.dxain.ml/zh-cn/sum-of-2018.html"/>
    <id>https://www.dxain.ml/zh-cn/sum-of-2018.html</id>
    <published>2019-01-05T17:33:49.000Z</published>
    <updated>2019-01-05T17:33:49.000Z</updated>
    
    <content type="html"><![CDATA[<div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="输入密码，查看文章内容。" />    <label for="pass">输入密码，查看文章内容。</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      这是一篇加密文章，内容可能是个人情感宣泄或者收费技术。如果你确实想看，请与我联系。
    
    </summary>
    
      <category term="心情随笔" scheme="https://www.dxain.ml/categories/%E5%BF%83%E6%83%85%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="感悟" scheme="https://www.dxain.ml/tags/%E6%84%9F%E6%82%9F/"/>
    
      <category term="生活总结" scheme="https://www.dxain.ml/tags/%E7%94%9F%E6%B4%BB%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>Vue响应式原理</title>
    <link href="https://www.dxain.ml/zh-cn/vue-response-principle.html"/>
    <id>https://www.dxain.ml/zh-cn/vue-response-principle.html</id>
    <published>2018-12-25T20:12:49.000Z</published>
    <updated>2018-12-25T20:12:49.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>1、vue响应式原理就是对你数据的变化，vue会有一个响应，去完成某件事。<br>2、vue的响应式原理就是基于vue知道了数据发生了变化，那么vue是如何知道数据发生了变化呢？<br>3、数据劫持 vue.js 采用数据劫持结合发布者-订阅者模式的方式，通过Object.defineProperty()来劫持各个属性的setter,getter，在数据变动时发布消息给订阅者，触发相应的监听回调</p></blockquote><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.defineProperty()方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回这个值</span><br></pre></td></tr></table></figure><h5 id="4-数据劫持盲区">4、数据劫持盲区</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. vue 在实例化的时候会将data数据中的属性全部做数据劫持</span><br><span class="line">2. 如果时对象，也会迭代本身属性将全部属性都实现数据劫持</span><br><span class="line">3. 当赋值的时候，如果时newVal是对象，也会迭代newVal的属性实现全部属性的数据劫持</span><br><span class="line"></span><br><span class="line">什么时候会发生盲区：</span><br><span class="line">    比如说，data中现有一个obj 的值 list，但是现有list中没有name 这个属性。现在主动 list.name = 1，因为list.name的属性不是 Getter/Setter，所以赋值后不会去发布消息给订阅者，订阅者也没有办法更新。这就是数据劫持盲区 但是有一个有趣的现象：就是虽然obj.newparam不会发布消息，但是如果别的发布者触发的时候，页面局部渲染时如果包括obj.newparam的值，渲染效果也是会显示obj.newparam的最新值。这是由于页面更新时是直接读取的obj.newparam的值。</span><br></pre></td></tr></table></figure><h5 id="5-数组array的特殊性">5. 数组Array的特殊性</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vue中实现的方法实际是对数组的属性重写，重写过后的方法不仅能实现原有的功能，还能发布消息给订阅者。</span><br><span class="line"></span><br><span class="line">当然Array也有特殊现象：如果要更新 Array 某个索引对应的值得时候，要用Vue.set方式实现</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;1、vue响应式原理就是对你数据的变化，vue会有一个响应，去完成某件事。&lt;br&gt;
2、vue的响应式原理就是基于vue知道了数据发生了变化，那么vue是如何知道数据发生了变化呢？&lt;br&gt;
3、数据劫持 vue.js 采用数据劫持结合发布者-订阅者模式的方式，通过Object.defineProperty()来劫持各个属性的setter,getter，在数据变动时发布消息给订阅者，触发相应的监听回调&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="前端" scheme="https://www.dxain.ml/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="vue" scheme="https://www.dxain.ml/tags/vue/"/>
    
      <category term="原理" scheme="https://www.dxain.ml/tags/%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>为何一定要买一线城市的房子？</title>
    <link href="https://www.dxain.ml/zh-cn/bug-house.html"/>
    <id>https://www.dxain.ml/zh-cn/bug-house.html</id>
    <published>2018-09-15T20:42:23.000Z</published>
    <updated>2018-09-15T20:42:23.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="普通人投资最好的方式是什么？">普通人投资最好的方式是什么？</h3><p>那么毋庸置疑是房子。为什么说是房子呢？</p><p>因为买房子的难度低风险低，只有房子是保值增值最好的投资品。那么普通人能挣钱的方法和渠道有哪些, 工作? 创业? 投资？</p><a id="more"></a><ul><li>A. 对于工作，朝九晚五可以维系基本的生活，人生一眼可以看到头。</li><li>B. 对于创业，那是九死一生，你要有勇气，要有战略，有策略，会经营，懂管理，还要会抓建设。</li><li>C.对于投资，我个人认为风险第一，那么买房和其他的投资品，比如股票基金，期货外汇相比，买房的收益是七个人挣钱，两个人持平，一个人亏本，而股票却刚刚好相反。七个人亏本，两个人持平，一个人赚钱，十年前的股票，2600点，十年后的今天股票依然是2600点，而房子从十年前5000多块钱涨到现在的5万多块钱，所以证明股票是用来住的，房子是用来哈哈的，大家都懂。</li></ul><p>对于我个人而言，是从职场到创业到做企业，到买房。</p><blockquote><p>总结：明明可以买房致富，非要装逼创业。其实财富是认知的变现，人要有拥有财富的能力，更加要有驾驭财富的能力，为什么普通人投资最好的方式是买房，因为买房是大确定性低风险。</p></blockquote><h3 id="为什么要买房？年初不买房-一年又白忙-怎么解释呢？">为什么要买房？年初不买房，一年又白忙，怎么解释呢？</h3><p>1.通货膨胀，负债缩水，怎么讲呢，比如：20年前1万块钱，那可是全村的首富，那现在1万块钱可能会变成贫困户，如果我们1万块钱存在银行，银行支付利息给你，那么恭喜你从首富变成了贫困户，我们的钱存在银行，通货膨胀不值钱，如果我们20年前找银行借了1万块钱，买深圳的地建房，现在还银行的本金和利息，请问财富发生了什么变化？通货膨胀导致钱不值钱，那负债同样也会缩水。</p><p>2.货币贬值，先讲什么是货币？早期的货币是用贵金属，金，银，铜等来做交易，因为贵金属的稀缺性和铸造技术瓶颈等原因，难以量产，所以不容易引发严重的通货膨胀和财富变动，18世纪，纸币走上了历史舞台，通过印发纸币，政府可以简单粗暴的拿到资金，做国家的各项开销，纸币就是政府的信用背书。大家可以关注一下，2008年至2018年十年时间，广义货币供应量m2，从最初的47.5万亿增加到180.2万亿，增加3.8倍，十年里平均增速达到了16.35%，远超过GDP的年均7个点的增速。</p><p>3.明显的感受到工资上涨，物价上涨，当然房子也上涨。先说工资，十年前请一个收银员，月薪800到1000元，工作十小时，休息两天，现在请一个收银员，月薪4000元，工作八小时，休息四天。物价上涨，十年前一个鸡煲48块钱，四个人吃，平均客单价12块，现在198元一个鸡煲，四个人吃，平均客单价50左右，而房子的价格，2009年深圳平均单价，8000元每平方，2019年平均单价54000左右，平均增长了20.4%，十年增长了6.5倍，远超m2的平均增幅。<br>所以为什么要买房，因为房价上涨的速度高于工资上涨，物价上涨，所以年初不买房一年又白忙。</p><h3 id="买房投资理念是什么-？">“买房投资理念是什么”？</h3><ul><li><p>国家发展的红利，城市发展的红利；买房长期看人口，中期看土地，短期看金融，当下看政策，跟随人口城市化进程的发展，农村人赚到钱要去镇上生活，镇上的人赚到钱要去市里，市里的人赚到钱要去省会城市，省会城市的人赚到钱要来一线城市，人往高处走，水向低处流。</p></li><li><p>只有一线城市才有房地产，因为它是一个产业链，有金融属性，而三四线城市就是商品房给人消费的，所以买房就要买核心城市的核心资产。</p></li><li><p>在香港民间流传一句话，先上车再置换，讲的是不要等好存钱再去买房，先在当下买一个，用资产来追资产，涨一波再来置换。其实在深圳，30-40平方的房子，单价5万左右，总价也就150-200万，首付也就50万-60万，可以先在一线城市有一个物业再说。</p></li><li><p>那么具体怎么买，可以根据一个人的资产负债，收入支出，现金流来做个买房计划，那买房最大的风险是什么，月供，做好五年防守计划就可以了。</p></li></ul><h3 id="我的买房理念是四高一低-哪四高？高流通性-高租金-高杠杆-高收益-低风险">我的买房理念是四高一低，哪四高？高流通性，高租金，高杠杆，高收益，低风险</h3><p>买房投资是一个计算和计划，以及对财富的认知的过程。</p><p>买房是一道数学题。例如100万全款买一套房子，</p><p>1.如果房子涨了10%，房子的总价变成110万，那么投资回报率10%，如果100万的房子首付三成30万，房子同样涨10%，那么投资回报率33%，同样100万的房子，首付一成，10万的房子同样涨10%，那投资回报率百分之百，这数学题会做了吗？</p><p>2.这样有人就会说贷款有利息;没有利息，哪里有利润，那好吧，我买的房子我算过账，260万的房子，70万全包买完，贷款200万，月供10500，租金可以租到6000，月供差5500，(里面还有自己的还款的本金1800)，那10500-6000-1800=2700块，2700元*12个月=32400，260万总价的房子，大家可以算一下，房子每年涨多少可以覆盖成本。得出来的结论是32400÷260万=1.25%，这是有形的成本，还有无形的价值，还记得为什么要买房？里面有讲过通货膨胀和负债缩水吗？这样大家就知道明白了吧。</p><p>3.涨幅看选愁，赚钱靠杠杆，深圳买房无非是领涨 普涨 和补涨的问题。但是热点片区涨幅是很快，但首付比例，要高一些，补涨的片区可能涨得慢一些，因为涨得慢不好卖，所以可以买到性价比高的房子，首付低用长时间来看，只是先涨或是后涨的问题，那么投资的收益可是完全不同的。</p><h3 id="总结">总结</h3><p>买房是一道数学题，涨幅看选愁，赚钱靠杠杆，吃不穷，穿不穷，算不好帐，一辈子穷。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;普通人投资最好的方式是什么？&quot;&gt;普通人投资最好的方式是什么？&lt;/h3&gt;
&lt;p&gt;那么毋庸置疑是房子。为什么说是房子呢？&lt;/p&gt;
&lt;p&gt;因为买房子的难度低风险低，只有房子是保值增值最好的投资品。那么普通人能挣钱的方法和渠道有哪些, 工作? 创业? 投资？&lt;/p&gt;
    
    </summary>
    
      <category term="房产" scheme="https://www.dxain.ml/categories/%E6%88%BF%E4%BA%A7/"/>
    
    
      <category term="买房" scheme="https://www.dxain.ml/tags/%E4%B9%B0%E6%88%BF/"/>
    
      <category term="投资" scheme="https://www.dxain.ml/tags/%E6%8A%95%E8%B5%84/"/>
    
  </entry>
  
  <entry>
    <title>vue表格编辑</title>
    <link href="https://www.dxain.ml/zh-cn/vue-table-editing.html"/>
    <id>https://www.dxain.ml/zh-cn/vue-table-editing.html</id>
    <published>2018-05-30T19:33:49.000Z</published>
    <updated>2018-05-30T19:33:49.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>由于最近项目遇到需要在表格里面添加编辑并且对表格进行编辑判断，所以总结了下方法，希望为遇到类似问题的同学提供参考</p></blockquote><a id="more"></a><blockquote><p>HTML内容</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-table :data=<span class="string">"tableData"</span> border style=<span class="string">"width: 100%"</span>&gt;</span><br><span class="line">    &lt;el-table-column prop=<span class="string">"date"</span> label=<span class="string">"日期"</span> width=<span class="string">"180"</span>&gt;</span><br><span class="line">    &lt;<span class="regexp">/el-table-column&gt;</span></span><br><span class="line"><span class="regexp">    &lt;el-table-column prop="name" label="姓名" width="180"&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>el-table-column&gt;</span><br><span class="line">    &lt;el-table-column prop=<span class="string">"address"</span> label=<span class="string">"地址"</span>&gt;</span><br><span class="line">    &lt;<span class="regexp">/el-table-column&gt;</span></span><br><span class="line"><span class="regexp">    &lt;el-table-column label="编辑"&gt;</span></span><br><span class="line"><span class="regexp">      &lt;template slot-scope="scope"&gt;</span></span><br><span class="line"><span class="regexp">        &lt;el-form :model="scope.row" :rules="rules" ref="testForm"&gt;</span></span><br><span class="line"><span class="regexp">          &lt;el-form-item prop="test"&gt;</span></span><br><span class="line"><span class="regexp">            &lt;el-input v-model="scope.row.test" auto-complete="off"&gt;&lt;/</span>el-input&gt;</span><br><span class="line">          &lt;<span class="regexp">/el-form-item&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>el-form&gt;</span><br><span class="line">      &lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>el-table-column&gt;</span><br><span class="line">  &lt;<span class="regexp">/el-table&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>JS内容</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Main = &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">      <span class="keyword">const</span> testValidate = <span class="function"><span class="keyword">function</span>(<span class="params">rules, value, callback</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (value) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(value)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        rules:&#123;</span><br><span class="line">        test: [&#123;<span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">validator</span>: testValidate, <span class="attr">trigger</span>: <span class="string">'blur'</span>&#125;]</span><br><span class="line">        &#125;,</span><br><span class="line">        tableData: [&#123;</span><br><span class="line">          date: <span class="string">'2016-05-02'</span>,</span><br><span class="line">          name: <span class="string">'王小虎'</span>,</span><br><span class="line">          address: <span class="string">'上海市普陀区金沙江路 1518 弄'</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">          date: <span class="string">'2016-05-04'</span>,</span><br><span class="line">          name: <span class="string">'王小虎'</span>,</span><br><span class="line">          address: <span class="string">'上海市普陀区金沙江路 1517 弄'</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">          date: <span class="string">'2016-05-01'</span>,</span><br><span class="line">          name: <span class="string">'王小虎'</span>,</span><br><span class="line">          address: <span class="string">'上海市普陀区金沙江路 1519 弄'</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">          date: <span class="string">'2016-05-03'</span>,</span><br><span class="line">          name: <span class="string">'王小虎'</span>,</span><br><span class="line">          address: <span class="string">'上海市普陀区金沙江路 1516 弄'</span></span><br><span class="line">        &#125;]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">var</span> Ctor = Vue.extend(Main)</span><br><span class="line"><span class="keyword">new</span> Ctor().$mount(<span class="string">'#app'</span>)</span><br></pre></td></tr></table></figure><blockquote><p>效果</p></blockquote><p><img src="/uploads/vue%E8%A1%A8%E6%A0%BC%E7%BC%96%E8%BE%91/%E8%A1%A8%E6%A0%BC%E7%BC%96%E8%BE%91.jpg" alt="表格编辑"></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;由于最近项目遇到需要在表格里面添加编辑并且对表格进行编辑判断，所以总结了下方法，希望为遇到类似问题的同学提供参考&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="前端" scheme="https://www.dxain.ml/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="vuejs" scheme="https://www.dxain.ml/tags/vuejs/"/>
    
      <category term="表格" scheme="https://www.dxain.ml/tags/%E8%A1%A8%E6%A0%BC/"/>
    
  </entry>
  
  <entry>
    <title>前端库</title>
    <link href="https://www.dxain.ml/zh-cn/front-end-library.html"/>
    <id>https://www.dxain.ml/zh-cn/front-end-library.html</id>
    <published>2018-04-30T15:21:49.000Z</published>
    <updated>2018-04-30T15:21:49.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>收集一些自己遇到过（用过）的插件，demo一类，收集记录一下，亦或是觉得不错的知识点，查漏补缺，总结自己的不足之处</p></blockquote><a id="more"></a><h4 id="前端文档">前端文档</h4><p><a href="https://docschina.org/" target="_blank" rel="noopener">印记中文</a></p><p>深入挖掘国外前端新领域，为中国 Web 前端开发人员提供优质文档！</p><h4 id="小程序开发">小程序开发</h4><blockquote><p>美团mpvue</p></blockquote><p><a href="http://mpvue.com/" target="_blank" rel="noopener">mpvue文档</a></p><p><a href="https://github.com/mpvue/awesome-mpvue" target="_blank" rel="noopener">汇总awesome-mpvue</a></p><h4 id="前端库">前端库</h4><blockquote><p>vue日历组件</p></blockquote><p><a href="https://github.com/jinzhe/vue-calendar" target="_blank" rel="noopener">vue-calendar</a></p><p>基于vuejs+webpack环境使用的日期选择插件</p><p>精简类的日历，支持多选日期</p><p><a href="https://github.com/Wanderxx/vue-fullcalendar" target="_blank" rel="noopener">vue-fullcalendar</a></p><p>基于vuejs的fullcalendar，日历记事本一类的</p><p><a href="https://github.com/icai/vue2-calendar" target="_blank" rel="noopener">vue2-calendar</a></p><p>各种类型日历均有，价格日历，API丰富</p><p><a href="https://github.com/Real0n/vue-component-calendar" target="_blank" rel="noopener">vue-component-calendar</a></p><p>类似美团，移动端用，底部弹出层，可选开始与结束日期</p><blockquote><p>UI库</p></blockquote><p><a href="http://element.eleme.io/#/" target="_blank" rel="noopener">Element</a></p><p>基于 Vue 2.0 的组件库</p><p><a href="https://www.iviewui.com/" target="_blank" rel="noopener">iView</a></p><p>一套基于Vue.js的高质量的UI组件库</p><p><a href="https://github.com/vuejs/vuex" target="_blank" rel="noopener">Vuex</a></p><p>应用设计的状态管理架构</p><p><a href="https://github.com/airyland/vux" target="_blank" rel="noopener">Vux</a></p><p>基于 Vue 和 WeUI 的移动端 UI 组件库</p><blockquote><p>价格日历</p></blockquote><p><a href="https://github.com/fugm/PriceCalendar" target="_blank" rel="noopener">酒店价格日历</a></p><p>基于YUI3开发的价格日历组件</p><p><a href="https://github.com/wind-stone/price-calendar" target="_blank" rel="noopener">price-calendar</a></p><p>价格日历，可以统一设置全月每天的价格，还可以单独设置某天的价格</p><p><a href="https://github.com/liukaijv/price-calendar" target="_blank" rel="noopener">price-calendar</a></p><p>精简价格展示日历</p><p><a href="https://github.com/lscho/am-daymoney" target="_blank" rel="noopener">daymoney</a></p><p>简易价格日历，可编辑价格</p><blockquote><p>滚动条插件</p></blockquote><p><a href="https://github.com/itmyhome2013/jquery-custom-content-scroller" target="_blank" rel="noopener">jquery-custom-content-scroller</a></p><p>页面多列滚动布局</p><blockquote><p>ES6知识</p></blockquote><p><a href="https://github.com/hanekaoru/es6-cheatsheet-chinese" target="_blank" rel="noopener">es6-cheatsheet-chinese</a></p><p>ES6中文版，包括一些常用代码片段</p><blockquote><p>ES5规范</p></blockquote><p><a href="https://www.w3.org/html/ig/zh/wiki/ES5" target="_blank" rel="noopener">ES5</a></p><blockquote><p>前端书籍</p></blockquote><p><a href="http://www1.w3cfuns.com/feres.php?do=picture&amp;listtype=book" target="_blank" rel="noopener">前端书籍墙（电子书）</a></p><p><a href="http://pan.baidu.com/share/home?uk=1866459472#category/type=0" target="_blank" rel="noopener">百度盘分享书籍（电子书）</a></p><blockquote><p>JSON在线效验工具</p></blockquote><p><a href="http://jsonlint.com/" target="_blank" rel="noopener">JSONLint</a></p><blockquote><p>HTML各个版本head头部样式</p></blockquote><p><a href="http://lab.dimpurr.com/html-head-generator/" target="_blank" rel="noopener">HTML head Generator</a></p><blockquote><p>工具库</p></blockquote><p><a href="https://github.com/jashkenas/underscore" target="_blank" rel="noopener">underscore</a></p><p><a href="https://github.com/madrobby/zepto" target="_blank" rel="noopener">zepto</a></p><p><a href="https://github.com/jashkenas/backbone" target="_blank" rel="noopener">backbone</a></p><p><a href="https://icomoon.io/" target="_blank" rel="noopener">icomoon</a> 图片字体</p><blockquote><p>Vue学习建议</p></blockquote><p><a href="https://zhuanlan.zhihu.com/p/23134551" target="_blank" rel="noopener">Vue 2.0 的建议学习顺序</a></p><h4 id="各大框架包管理">各大框架包管理</h4><p><a href="https://libraries.io" target="_blank" rel="noopener">Libraries</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;收集一些自己遇到过（用过）的插件，demo一类，收集记录一下，亦或是觉得不错的知识点，查漏补缺，总结自己的不足之处&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="前端" scheme="https://www.dxain.ml/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="工具" scheme="https://www.dxain.ml/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="前端库" scheme="https://www.dxain.ml/tags/%E5%89%8D%E7%AB%AF%E5%BA%93/"/>
    
      <category term="组件" scheme="https://www.dxain.ml/tags/%E7%BB%84%E4%BB%B6/"/>
    
      <category term="小程序" scheme="https://www.dxain.ml/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>elementui表格头提示信息</title>
    <link href="https://www.dxain.ml/zh-cn/elementui-table-header-prompt-information.html"/>
    <id>https://www.dxain.ml/zh-cn/elementui-table-header-prompt-information.html</id>
    <published>2018-04-25T11:22:33.000Z</published>
    <updated>2018-04-25T11:22:33.000Z</updated>
    
    <content type="html"><![CDATA[<h5 id="第一步">第一步</h5><blockquote><p>在表格添加 :render-header=“renderHeader”</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-table :data=<span class="string">"tableData"</span> border style=<span class="string">"width: 100%"</span>&gt;</span><br><span class="line">    &lt;el-table-column inline-template label=<span class="string">"日期"</span> width=<span class="string">"180"</span> :render-header=<span class="string">"renderHeader"</span>&gt;</span><br></pre></td></tr></table></figure><h5 id="第二步">第二步</h5><blockquote><p>在method方法里添加方法</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">renderHeader(createElement, &#123; column, _self&#125;) &#123;</span><br><span class="line">      <span class="keyword">let</span> label = column.label</span><br><span class="line">        <span class="keyword">return</span> createElement(<span class="string">'div'</span>,&#123;<span class="string">'class'</span> : <span class="string">'header-center'</span>&#125;,</span><br><span class="line">          [</span><br><span class="line">            createElement(<span class="string">'span'</span>, &#123;<span class="attr">attrs</span>: &#123;<span class="attr">type</span>: <span class="string">'text'</span>&#125;&#125;, [label]),</span><br><span class="line">            createElement(<span class="string">'el-tooltip'</span>,</span><br><span class="line">            &#123;</span><br><span class="line">                attrs: &#123;</span><br><span class="line">                  <span class="string">'content'</span>: <span class="string">'这是一个提示'</span>,</span><br><span class="line">                          <span class="string">'placement'</span>: <span class="string">'top'</span></span><br><span class="line">                          &#125;</span><br><span class="line">                 &#125;,</span><br><span class="line">                 [</span><br><span class="line">               createElement(<span class="string">'i'</span>, &#123;<span class="string">'class'</span>: <span class="string">'el-icon-information'</span>&#125;)</span><br><span class="line">              ]</span><br><span class="line">               )</span><br><span class="line">               <span class="comment">/* createElement('i', &#123;'class': 'el-icon-information ml-5'&#125;) */</span></span><br><span class="line"></span><br><span class="line">          ]</span><br><span class="line">        );</span><br><span class="line">      &#125;,</span><br></pre></td></tr></table></figure><blockquote><p>效果</p></blockquote><p><img src="/uploads/%E8%A1%A8%E6%A0%BC%E5%A4%B4%E6%8F%90%E7%A4%BA/%E8%A1%A8%E6%A0%BC%E5%A4%B4%E6%8F%90%E7%A4%BA.jpg" alt="表格头提示"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;第一步&quot;&gt;第一步&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;在表格添加 :render-header=“renderHeader”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;
      
    
    </summary>
    
      <category term="前端" scheme="https://www.dxain.ml/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="表格头" scheme="https://www.dxain.ml/tags/%E8%A1%A8%E6%A0%BC%E5%A4%B4/"/>
    
      <category term="elementUI" scheme="https://www.dxain.ml/tags/elementUI/"/>
    
  </entry>
  
  <entry>
    <title>对过去，要淡；对现在，要惜。对未来，要信</title>
    <link href="https://www.dxain.ml/zh-cn/trust-in-the-future.html"/>
    <id>https://www.dxain.ml/zh-cn/trust-in-the-future.html</id>
    <published>2018-04-23T14:28:11.000Z</published>
    <updated>2018-04-23T14:28:11.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1547389418814&amp;di=46d4909377faaa5db5cc021ba6032685&amp;imgtype=0&amp;src=http%3A%2F%2Fbaiducdn.pig66.com%2Fuploadfile%2F2016%2F0324%2F20160324103946535.jpg" alt="图1"></p><a id="more"></a><p>​</p><p style="text-indent:2em"><br>幸福的人生，需要三种姿态 ：对过去，要淡；对现在，要惜。对未来，要信。人生的答卷没有橡皮擦，写上去就无法再更改，过去的就让它过去，否则就是跟自己过不去。真正属于你的，只有活生生的现在，只有握得住当下，才有可能掌控自己的命运。只有相信未来，相信自己，今天的你才能成就明天的你。</p><p></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://timgsa.baidu.com/timg?image&amp;amp;quality=80&amp;amp;size=b9999_10000&amp;amp;sec=1547389418814&amp;amp;di=46d4909377faaa5db5cc021ba6032685&amp;amp;imgtype=0&amp;amp;src=http%3A%2F%2Fbaiducdn.pig66.com%2Fuploadfile%2F2016%2F0324%2F20160324103946535.jpg&quot; alt=&quot;图1&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="心情随笔" scheme="https://www.dxain.ml/categories/%E5%BF%83%E6%83%85%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="人生感悟" scheme="https://www.dxain.ml/tags/%E4%BA%BA%E7%94%9F%E6%84%9F%E6%82%9F/"/>
    
      <category term="哲理" scheme="https://www.dxain.ml/tags/%E5%93%B2%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>前端路线</title>
    <link href="https://www.dxain.ml/zh-cn/front-end-route.html"/>
    <id>https://www.dxain.ml/zh-cn/front-end-route.html</id>
    <published>2018-04-16T13:33:49.000Z</published>
    <updated>2022-07-23T10:32:11.502Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/oxsayps.png" alt="Web Developer Roadmap"></p><h2 id="声明">声明</h2><blockquote><p>这个路线图的本意是让你对整体有一个大致的了解，并能在当你为接下来需要学习什么而感到困惑时引导你，而不是鼓励你去学习那些时尚和潮流的东西 (what is hip and trendy)。你应该对关于 <strong>为什么一个工具在某些场景下比另一个更适合使用有自己的理解 (grow some understanding)，并记住时尚和潮流永远不意味着它最适合这份工作 (best suited for the job)</strong></p></blockquote><h2 id="🚀-介绍">🚀 介绍</h2><p><img src="https://note.youdao.com/yws/api/personal/file/WEB0d948dea73e2cba38188b82c458ba647?method=download&amp;shareKey=d58d37a08f577097dc2bbddee8f1bdc4" alt></p><h2 id="🎨-前端路线图">🎨 前端路线图</h2><p><img src="https://note.youdao.com/yws/api/personal/file/WEB6b82fed332c42e8e883bb892d9cad6ec?method=download&amp;shareKey=d58d37a08f577097dc2bbddee8f1bdc4" alt></p><h2 id="👽-后端路线图">👽 后端路线图</h2><p><img src="https://note.youdao.com/yws/api/personal/file/WEB2e094ae7b50152c18f0dceeab3b2efef?method=download&amp;shareKey=d58d37a08f577097dc2bbddee8f1bdc4" alt></p><h2 id="👷-devops-路线图">👷 DevOps 路线图</h2><p><img src="https://note.youdao.com/yws/api/personal/file/WEBd7fa3a35262af3d62c4b89d4e49bb42e?method=download&amp;shareKey=d58d37a08f577097dc2bbddee8f1bdc4" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://i.imgur.com/oxsayps.png&quot; alt=&quot;Web Developer Roadmap&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;声明&quot;&gt;声明&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;这个路线图的本意是让你对整体有一个大致的了解，并能
      
    
    </summary>
    
      <category term="前端" scheme="https://www.dxain.ml/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="学习路线" scheme="https://www.dxain.ml/tags/%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/"/>
    
      <category term="大前端" scheme="https://www.dxain.ml/tags/%E5%A4%A7%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>对js的call和apply的理解</title>
    <link href="https://www.dxain.ml/zh-cn/understanding-call-apply.html"/>
    <id>https://www.dxain.ml/zh-cn/understanding-call-apply.html</id>
    <published>2018-03-17T15:33:49.000Z</published>
    <updated>2018-03-17T15:33:49.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><ol><li>apply和call的区别在哪里？</li><li>什么情况下用哪apply什么情况下用call？</li><li>apply的其他巧妙用法？</li></ol></blockquote><a id="more"></a><ul><li>首先理解下为什么要用call 和 apply?在js的OOP（面向对象编程）中，经常这样用</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义了一个叫cat的构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cat</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 每个对象都有个隐藏的原型属性，叫prototype。</span></span><br><span class="line">cat.prototype=&#123;</span><br><span class="line">food:<span class="string">"fish"</span>,</span><br><span class="line">say:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"喵喵喵~"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 对这个对象进行实例化</span></span><br><span class="line"><span class="keyword">var</span> black_cat=<span class="keyword">new</span> cat();</span><br><span class="line">black_cat.say();  <span class="comment">//喵喵喵~</span></span><br><span class="line"></span><br><span class="line">但是如果我们有一个对象white_cat=&#123;<span class="attr">food</span>:<span class="string">"bone"</span>&#125;,我们不想对他重新定义say方法。那么久可以用</span><br><span class="line">black_cat的say方法：</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> white_cat;</span><br><span class="line">black_cat.say.call(white_cat)   <span class="comment">//喵喵喵~</span></span><br><span class="line">black_cat.say.apply(white_cat)   <span class="comment">//喵喵喵~</span></span><br><span class="line"></span><br><span class="line">所以：call和apply就是为了动态改变<span class="keyword">this</span>而存在的。 call、apply方法能劫持另外一个对象的方法，继承另外一个对象的属性.</span><br></pre></td></tr></table></figure><ul><li><p>function.call(obj,params)方法能接受两个参数，obj：代表function类里面的this对象 。params是参数列表。</p></li><li><p>function.apply(obj,arr)方法能接受两个参数，obj：代表function类里面的this对象 。arr是参数数组。<br>所以：call和apply的意思差不多。只是接受参数的形式不一样。</p></li><li><p>apply的巧妙用法：</p></li><li><p>Array.prototype.push 可以实现两个数组合并</p></li><li><p>同样push方法没有提供push一个数组,但是它提供了push(param1,param,…paramN) 所以同样也可以通过apply来装换一下这个数组,即:</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1=<span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">"1"</span>,<span class="string">"2"</span>,<span class="string">"3"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr2=<span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">"4"</span>,<span class="string">"5"</span>,<span class="string">"6"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.prototype.push.apply(arr1,arr2);</span><br><span class="line">或者求数组里面的最大值：</span><br><span class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line"><span class="built_in">Math</span>.max.apply(<span class="literal">null</span>,arr)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;apply和call的区别在哪里？&lt;/li&gt;
&lt;li&gt;什么情况下用哪apply什么情况下用call？&lt;/li&gt;
&lt;li&gt;apply的其他巧妙用法？&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="前端" scheme="https://www.dxain.ml/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="js" scheme="https://www.dxain.ml/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>遇见</title>
    <link href="https://www.dxain.ml/zh-cn/to-meeting.html"/>
    <id>https://www.dxain.ml/zh-cn/to-meeting.html</id>
    <published>2018-01-12T14:28:11.000Z</published>
    <updated>2018-01-12T14:28:11.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1547389254073&amp;di=7454cc0ddcadfc1a991a0ab343ada5f8&amp;imgtype=0&amp;src=http%3A%2F%2Fp0.ssl.cdn.btime.com%2Ft01bf937b6e6d28e244.png%3Fsize%3D638x342" alt></p><a id="more"></a><font size="4"><blockquote class="blockquote-center"><p>在对的时间遇到对的人，幸福。</p><p>​  在错的时间遇到对的人，遗憾。</p><p>​  在对的时间遇到错的人，失望。</p><p>​  在错的时间遇到错的人，痛苦。</p></blockquote></font>​]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://timgsa.baidu.com/timg?image&amp;amp;quality=80&amp;amp;size=b9999_10000&amp;amp;sec=1547389254073&amp;amp;di=7454cc0ddcadfc1a991a0ab343ada5f8&amp;amp;imgtype=0&amp;amp;src=http%3A%2F%2Fp0.ssl.cdn.btime.com%2Ft01bf937b6e6d28e244.png%3Fsize%3D638x342&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="心情随笔" scheme="https://www.dxain.ml/categories/%E5%BF%83%E6%83%85%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="人生感悟" scheme="https://www.dxain.ml/tags/%E4%BA%BA%E7%94%9F%E6%84%9F%E6%82%9F/"/>
    
      <category term="哲理" scheme="https://www.dxain.ml/tags/%E5%93%B2%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>写给2018年的自己，再见2017，你好2018！</title>
    <link href="https://www.dxain.ml/zh-cn/to-myself-2018.html"/>
    <id>https://www.dxain.ml/zh-cn/to-myself-2018.html</id>
    <published>2017-12-31T10:12:46.000Z</published>
    <updated>2017-12-31T10:12:46.000Z</updated>
    
    <content type="html"><![CDATA[<div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="输入密码，查看文章内容。" />    <label for="pass">输入密码，查看文章内容。</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">U2FsdGVkX1+zqtsaqohUdXtU6XcHOuY9FnxiaQuwEcUWAKXndq6wf8JWti/6rvGyz3o6fCVhqHhCRR9Ay+BQ09mtk8i6UgFoT1hgY6V/wriBy2r0q3jyYGFQOxU9Elvcr+n7U7CJJ65zUGZh7DCgUtxRGbmUo11Hhs9pucoec3zfzHEbnoEDg+ce3r2RHULIz64TtAd4A4rAB4A80qTWLjIdxPC/zWpKS0JC6betHZkkMHLe4J2mSvvYNWQsl9TI6WIaDuMMPhaqb85+MAGDs0MKkR/iSLuTrfbE0ITomUOcvwZnbvEgGkv3N+j4Ghgp08VWzslgBN+wMbzqFCMBC3RcvDP+puLlhO4R7Bph6rbBJA5e6lsYdOF8ZQo612r9kRmD4AagdxpRiBd7dWv5VZjAMLH1oUChk+stUmgOf2gy804LBs7Ele9Tsp+gl/pq9ExY6mQhK0kgyWAoQym1mYr5xW9bxFGhF+n3TLE+SOVSyuIH8vEIKZQhb7n3ZYboMlAObsn0juh43nLa+ROYpZs6BXcKLmJ7nkQWHLD84OzZG1WH0pvF/Hvcz4k6TDhCz4IUut1VUWGQWLMfTcuxWF/Up2/Y25lyu5EVXUS8ydGXzY3gkveBohRBZ5FNCNRRX4bTTYdkFCa6L3w8Y+CDQFwb6kWVJ5+FcP2yENSE0XNyvqoDIYJK5i0nV4vkwhTRlO47+I9nsTzk5TRLYidkuVePlyhXniX8e8NFjdQPUVoIwdOAz48qLsZtN/oijVJqPn6lRmm92ShW6/RcOtwKmdK6ouXSrjbxur1YIYwlW6iE2bysUXPHZDY/aaOO5RMycqIWHqESAwDcTrruUSmOp3XBiGU0A+FfKDywEZTQGbWqC24SROpY56mMDoKc5FOMceEe/DWRG07s+R6keH5itaJpiDvgYhcLKKRJLwiEDz+r2qhnFp9t5N5MTOX0ef5QwXRqm3ahe4qaTzkFw7bTn+IAyTZwb86omQsfnh8cy3jXzq5eiag67rMjxw8LILWpaBNsJBGkiTeN2lSiX+APKelVNX+4wOyvJdW5iXsm7LsXP3e2IdfdnbIOYqwhE3ou79llboli96dPkFaUzbFb8EjiQnyMpH90CT29veETxPKmMohoe278aNyNPopdXCwmq7mYtIFI4c/JvXDQ+WLcaL2/B6zpNPydPdN7v/3HYKySrPj0nsir72j3qn7TPFIMpBIte3BcgrO6uxNNRoem8AMNLsQ6ugTf/IktvhKvBo11+TgQjd5/cw6pp+EN3IAXTLILgAGp97CYLIPhfT46lDnOQx3DiAjwV6OYtmXMDJWQkQAI/JI+eXltoRbI0883qBKB4hd8r+MxDbK9B90+4EVNH9HK6ISkrHeSuuUJH+PV0R987s5rSmq/h53eGCWRxpSClmEVgwMRbQ+FbXbRC0RBvvD5RXuGCdearmi91b32Oz19qoNGYt4CHBR5nlHhAUT5+/M6ZZLqwiMGSuqmotNfmVpmA7nfnFgUde2O03jqZ+9ioWZ8JAXCblvfQrgAykIqILWOWXinXrFEKZ5Y0rX1lgbuOohJKj6JhuFDFNp5cnOx5bZImif+3sIQRHyx5kf4duZeGsWTi67y6k+kZFT6heWvofFc/9xqDU0rM3dcCIKLpCHivH0Uva1jIh70Vd5p+l6IvRGBouerbYABpTJkQZ8FJqZvU7GfyIYQM0G1Ke7mjQm2d/0V2gu9xWls1Msx8heaMO+qr2yrgCH8CL+vpAbC37ThqRK4KsrLOgPcDHN98OdKA2Y4asCZaUN47xK2yC3E3Pu3oyg8ATVFGbV4hs9zDz0UI0UiXmFM5WaGVnrSCXlue1Tn+NVNV9G4OfMY8Xk0TsjQ8dxZhhjkpKchRRnASmDQiR6x7WilasYiEueomt+B9gGYp8joOFb0fV0NmDZh/HOK8/P4wdtjYVNj7DCjHaBSnS4TGHjnsQzqvKBTw9Jdm4tGmOcVEnIw1coqmP1636tG8gaedYguNK7u4rr+dNDeseoyM0EP6yoKg8s78wMlpndM4IKsZTBB6gTRWZ1o7IkdYgdXjTjjzML5gKhfD6l924Gv8s3k0DVoBHZJwEcKNvTXKjCJLuhSJSQj8wnbLvwPdi5SLqNKYk7W9360IzFdFFw1D1wmp2DMhWMK5HG5OWfL+gnaHr5RhA5roBz6PmV8DfpL2QtEV1VID8nzKG+k8mkVaosywScvRvv3ecyQg1hgvDQUb8OMRTrbnXAnhHk/rLP2JMH3sXVXnu9zf+iB6DoMbaSyihQ91fZ3RTvpm9XOIKuy+5ecqoTgPCqU+fhryGFKMJDjW4uFRD3ER9XsWSnBwoUdpZuQi2RLc+uJsnBYCj/+sVluqR6Ds+VvwynQUxFEchR0mLcAQh7U9BK0iiOelQ25dEZ/2Ooa9N3Ojpv5U5C2uFWYgQECHINSw3+mYOdxvAcj9kxuMcbmS/QbET/gNbQLbx1fJmVJRxD5nl6mr44fkqGpry1lmNCtFb6Op7wMtC4CdapVvbh/URNinkFKqhPKtuF5BCNtf5gYiJRh8ItBW45UmpIx5CXcKLHz28YsK+O1e1BrlpWCfFXDyiX1q0vY6q03rXJYXSBjJ+7ThSgFlYGn2pCpolW+6uWxjbPujCLPJJhMdsYM7uJtSXI+3AaLvxpnUCKv+icEQMvNBtg0LG4afmTgihJlRk3tpJUUJdEl9O7BPtMwoFTBHpheNqJcIPnh0c/sJd9Nw328O7GZMjod8oLudhf0fReYYSmcvPEsuSe87DfJAS2pziWGOJzNvbVgekMNk7laVKrKd9PNXZ7HUHoZToUeC4eRe5c6yE4IYGv/fhbrqxXOPCMHT56Df9fcInbF6qbJ444VXxmAcm10yI+3hGGdr0UegOgD7GSa0Zw8Mi2qlL5pJ7tL6B/5HEuHhZBSA7nQQyGM7L6SeE++ZEgWUDGbpV2olvBvHlfkGrVgsLafnJOUv07q+LN4OX7gjhMLm14asx30c8UBEmw2jP2trZkB7YDw4ujclPA4QpwG1Bk+tVff6ZMIdK0mp4xsy2SN6NyUgQlSeZNLgxupSYjBD2sxJtgyBB+cc0Rkbtq3v/p7CE143xK+S9MpgKPQB6IF3FpMshU//lV2lqvAKZxM/ewolQK391YHZwGHyjRPNEm9NN8IbFaUm5kgtK48NXn49Vx2fuhPDM7ReZCEfDsjRN+eH3kllZm6Ao/7LhVarmi46W4rtpBD7pGzwmyzQIbD2sQhJXGSvBm1kkws18uEjp06E86TP1wdTONeTsNJHDu59tZInqLxu3ObXo6LseMckuekOlBvu0sFHaipDu49Sj4arqBuPixE/QaBi/4gRnRlf47psr+V/QMD+XA1fWF3ib4uDTdf8ijXa/e4o+Cj1DSlELxC8Qldt3qfHKGWcCkMNqxBGQp1O8sS4qJ65SQ0Le6ybUEjGNgQyhDlgIgrE+Sabrk1oyulXZR7yw2W/WzExGOYFAcb0iTnl0r7CyIlS4ppScikSljxfIS/BME1eujVHtTzgM9sYzF20RWEmnDv8aah4hEPkraNyEfiJw+yQPu8n11xVhEEbJFdWlKSnAREoVImGPCDG5kjOwQ4fE3BpmMQGXyqsD3Tfvq9Fhf7sC0iah4Zqlr2rt1890w+FIQeNdHf+7/KdeKzAsv/gD2wGInhXHsbzP2Wyz6/fqeHxsCeNbVyNFOcezNJZ2Hy7oIFlLV2mZbk21ordo+l91D1SDBWStoEDSjqFkMrZSmC3/dUeAEAFSMbZ6QzPRR47O0aG46tJcCVftka84+RZervHjmiTIgnhOhuOwWCbasNPU67BuLtkGwarKpoYo7AHc4GediyDBE3OqbJjDryt+AoeppUKWXtfuiHhe1JYHM9SYEFLkgYpCG/q8F86OrRwUBo0BDqI0Ebqe5fSDiMEP6KpcP/ll1MQ4YHq7zbJOjB4LRoD8NSdElY6hsh</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      这是一篇加密文章，内容可能是个人情感宣泄或者收费技术。如果你确实想看，请与我联系。
    
    </summary>
    
      <category term="心情随笔" scheme="https://www.dxain.ml/categories/%E5%BF%83%E6%83%85%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="感悟" scheme="https://www.dxain.ml/tags/%E6%84%9F%E6%82%9F/"/>
    
      <category term="励志" scheme="https://www.dxain.ml/tags/%E5%8A%B1%E5%BF%97/"/>
    
      <category term="生活总结" scheme="https://www.dxain.ml/tags/%E7%94%9F%E6%B4%BB%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript里的循环方法</title>
    <link href="https://www.dxain.ml/zh-cn/loop-method-in-javaScript.html"/>
    <id>https://www.dxain.ml/zh-cn/loop-method-in-javaScript.html</id>
    <published>2017-07-25T21:08:22.000Z</published>
    <updated>2017-07-25T21:08:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>JavaScript诞生已经有20多年了，我们一直使用的用来循环一个数组的方法是这样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for (var index = 0; index &lt; myArray.length; index++) &#123;</span><br><span class="line">  console.log(myArray[index]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自从JavaScript5起，我们开始可以使用内置的forEach方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">myArray.forEach(function (value) &#123;</span><br><span class="line">  console.log(value);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>写法简单了许多，但也有短处：你不能中断循环(使用<code>break</code>语句或使用<code>return</code>语句。</p><p>JavaScript里还有一种循环方法：<code>for–in</code></p><p>for-in循环实际是为循环”enumerable“对象而设计的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123;a:1, b:2, c:3&#125;;</span><br><span class="line"></span><br><span class="line">for (var prop in obj) &#123;</span><br><span class="line">  console.log(&quot;obj.&quot; + prop + &quot; = &quot; + obj[prop]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 输出:</span><br><span class="line">// &quot;obj.a = 1&quot;</span><br><span class="line">// &quot;obj.b = 2&quot;</span><br><span class="line">// &quot;obj.c = 3&quot;</span><br></pre></td></tr></table></figure><p>你也可以用它来循环一个数组：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for (var index in myArray) &#123;    // 不推荐这样</span><br><span class="line">  console.log(myArray[index]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不推荐用for-in来循环一个数组，因为，不像对象，数组的<code>index</code>跟普通的对象属性不一样，是重要的数值序列指标。</p><p>总之，<code>for–in</code>是用来循环带有字符串key的对象的方法。</p><ol><li>for-of循环</li></ol><p>JavaScript6里引入了一种新的循环方法，它就是for-of循环，它既比传统的for循环简洁，同时弥补了forEach和for-in循环的短板。</p><p>我们看一下它的for-of的语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for (var value of myArray) &#123;</span><br><span class="line">  console.log(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>for-of的语法看起来跟for-in很相似，但它的功能却丰富的多，它能循环很多东西。</p><p>for-of循环使用例子：</p><blockquote><p>循环一个数组(Array):</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">let iterable = [10, 20, 30];</span><br><span class="line"></span><br><span class="line">for (let value of iterable) &#123;</span><br><span class="line">  console.log(value);</span><br><span class="line">&#125;</span><br><span class="line">// 10</span><br><span class="line">// 20</span><br><span class="line">// 30</span><br></pre></td></tr></table></figure><p>我们可以使用<code>const</code>来替代<code>let</code>，这样它就变成了在循环里的不可修改的静态变量。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">let iterable = [10, 20, 30];</span><br><span class="line"></span><br><span class="line">for (const value of iterable) &#123;</span><br><span class="line">  console.log(value);</span><br><span class="line">&#125;</span><br><span class="line">// 10</span><br><span class="line">// 20</span><br><span class="line">// 30</span><br></pre></td></tr></table></figure><blockquote><p>循环一个字符串：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">let iterable = &quot;boo&quot;;</span><br><span class="line"></span><br><span class="line">for (let value of iterable) &#123;</span><br><span class="line">  console.log(value);</span><br><span class="line">&#125;</span><br><span class="line">// &quot;b&quot;</span><br><span class="line">// &quot;o&quot;</span><br><span class="line">// &quot;o&quot;</span><br></pre></td></tr></table></figure><blockquote><p>循环一个类型化的数组(TypedArray)：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">let iterable = new Uint8Array([0x00, 0xff]);</span><br><span class="line"></span><br><span class="line">for (let value of iterable) &#123;</span><br><span class="line">  console.log(value);</span><br><span class="line">&#125;</span><br><span class="line">// 0</span><br><span class="line">// 255</span><br></pre></td></tr></table></figure><blockquote><p>循环一个Map:</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">let iterable = new Map([[&quot;a&quot;, 1], [&quot;b&quot;, 2], [&quot;c&quot;, 3]]);</span><br><span class="line"></span><br><span class="line">for (let [key, value] of iterable) &#123;</span><br><span class="line">  console.log(value);</span><br><span class="line">&#125;</span><br><span class="line">// 1</span><br><span class="line">// 2</span><br><span class="line">// 3</span><br><span class="line"></span><br><span class="line">for (let entry of iterable) &#123;</span><br><span class="line">  console.log(entry);</span><br><span class="line">&#125;</span><br><span class="line">// [a, 1]</span><br><span class="line">// [b, 2]</span><br><span class="line">// [c, 3]</span><br></pre></td></tr></table></figure><blockquote><p>循环一个 Set:</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">let iterable = new Set([1, 1, 2, 2, 3, 3]);</span><br><span class="line"></span><br><span class="line">for (let value of iterable) &#123;</span><br><span class="line">  console.log(value);</span><br><span class="line">&#125;</span><br><span class="line">// 1</span><br><span class="line">// 2</span><br><span class="line">// 3</span><br></pre></td></tr></table></figure><blockquote><p>循环一个 DOM collection</p></blockquote><p>循环一个DOM collections，比如NodeList，之前我们讨论过如何循环一个NodeList，现在方便了，可以直接使用for-of循环：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// Note: This will only work in platforms that have</span><br><span class="line">// implemented NodeList.prototype[Symbol.iterator]</span><br><span class="line">let articleParagraphs = document.querySelectorAll(&quot;article &gt; p&quot;);</span><br><span class="line"></span><br><span class="line">for (let paragraph of articleParagraphs) &#123;</span><br><span class="line">  paragraph.classList.add(&quot;read&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>循环一个拥有enumerable属性的对象</p></blockquote><p>for–of循环并不能直接使用在普通的对象上，但如果我们按对象所拥有的属性进行循环，可使用内置的Object.keys()方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for (var key of Object.keys(someObject)) &#123;</span><br><span class="line">  console.log(key + &quot;: &quot; + someObject[key]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>循环一个生成器(generators)</p></blockquote><p>我们可循环一个生成器(generators):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">function* fibonacci() &#123; // a generator function</span><br><span class="line">  let [prev, curr] = [0, 1];</span><br><span class="line">  while (true) &#123;</span><br><span class="line">    [prev, curr] = [curr, prev + curr];</span><br><span class="line">    yield curr;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">for (let n of fibonacci()) &#123;</span><br><span class="line">  console.log(n);</span><br><span class="line">  // truncate the sequence at 1000</span><br><span class="line">  if (n &gt;= 1000) &#123;</span><br><span class="line">    break;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;JavaScript诞生已经有20多年了，我们一直使用的用来循环一个数组的方法是这样的：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;
      
    
    </summary>
    
      <category term="前端" scheme="https://www.dxain.ml/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="总结" scheme="https://www.dxain.ml/tags/%E6%80%BB%E7%BB%93/"/>
    
      <category term="JavaScript" scheme="https://www.dxain.ml/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>使用ionic打包android apk的教程</title>
    <link href="https://www.dxain.ml/zh-cn/use-ionic-apk.html"/>
    <id>https://www.dxain.ml/zh-cn/use-ionic-apk.html</id>
    <published>2017-06-23T20:12:36.000Z</published>
    <updated>2022-07-23T10:32:11.502Z</updated>
    
    <content type="html"><![CDATA[<p>Ionic(ionicframework)一款开源的Html5移动App开发框架,是AngularJS移动端解决方案,Ionic以流行的原生移动开发SDK为蓝本,使开发过原生iOS或安卓app的任何人都容易理解，下面我们来看一篇关于使用ionic打包android apk例子吧。<br>ionic进行开发完项目后，需要进行打包。如果需要上架的话，在Android端，打完包后还需要签名然后上传至各应用商店。<br>首先是关于apk签名，Android程序的安装是以包名（package name）进行区分的，就是同样的包名会被认作是同一个程序。这样就可以进行升级、替换。但是包名是一个可以被查看的字符串，这样就可能被伪造，然后其他人就可以自己创建一个应用去替代你的应用，结果可想而知。而签名就是为了防止这样的情况发生，当你的程序被签名后安装，只有同样包名与签名的程序才能被替换安装。而签名是不可能简单被伪造的，从而保证了程序的安全性。</p><ol><li>一、打包apk</li></ol><p>ionic bulid android   //打包测试包<br>ionic build --release android  //打包正式包<br>ionic里面打包的命令特别简单，只需要一条命令，上面一条命令是用来打包测试包的，里面已经包含了签名，可以直接在手机上安装，但是不能用来上应用市场，第二条命令是打包成一个没有签名的apk，不能直接安装，需要进行第二个步骤。</p><ol start="2"><li>二、签名apk</li></ol><p>1.生成签名(.keystore)文件<br>keytool -genkey -v -keystore demo.keystore -alias demo.keystore -keyalg RSA -validity 20000<br>keytool是工具名称，-genkey意味着执行的是生成数字证书操作，-v表示将生成证书的详细信息打印出来；<br>-keystore demo.keystore 证书的文件名；<br>-alias demo.keystore 表示证书的别名<br>-keyalg RSA 生成密钥文件所采用的算法；<br>-validity 20000 该数字证书的有效期；<br>输入后会让你回答关于你公司和地区的一些问题，这些回答一定要记住，以后更新apk的时候需要用到，最好截屏记录。</p><ol start="3"><li>2.签名apk</li></ol><p>jarsigner -verbose -keystore /yourpath/demo.keystore -signedjar demo_signed.apk demo.apk demo.keystore<br>jarsigner是工具名称，-verbose表示将签名过程中的详细信息打印出来；<br>-keystore /yourpath/demo.keystore 之前生成的证书<br>-signedjar demo_signed.apk 签名后的apk<br>demo.apk 需要签名的apk<br>demo.keystore 证书的别名</p><h4 id="1-首先要对源代码进行编译">1.首先要对源代码进行编译</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cordova build --release android</span><br></pre></td></tr></table></figure><p>注意，发布要使用Release版本，所以这里加上–release选项。完成之后生成了未签名的apk，在这个目录中platforms/android/build/outputs/apk/HelloWorld-release-unsigned.apk。</p><h4 id="2-生成key">2.生成key</h4><p>在应用开发的时候，因为有微信分享等功能，所以已经有keystore文件了。那么就可以忽略该步骤。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keytool -genkey -v -keystore my-release-key.keystore -alias alias_name -keyalg RSA -keysize 2048 -validity 10000</span><br></pre></td></tr></table></figure><p>该工具会问一些问题，填写之后生成keystore文件。</p><h4 id="3-对apk文件进行签名">3.对apk文件进行签名</h4><p>进入到platforms/android/build/outputs/apk/目录中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd platforms/android/build/outputs/apk/</span><br></pre></td></tr></table></figure><p>keystore文件和apk文件在一个目录下的话比较方便，最好把keystore拷贝到apk的目录。然后执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 -keystore my-release-key.keystore HelloWorld-release-unsigned.apk alias_name</span><br></pre></td></tr></table></figure><p>jarsigner是JDK中的工具，请确保JDK的安装配置是正确的。</p><h4 id="4-使用zipalign优化apk">4.使用zipalign优化apk</h4><p>zipalign工具位于/path/to/Android/sdk/build-tools/VERSION/zipalign，请确保Android SDK的配置是正确的。然后执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D:\Android\sdk\build-tools\23.0.3\zipalign -v 4 HelloWorld-release-unsigned.apk HelloWorld.apk</span><br></pre></td></tr></table></figure><p>其实只要第一步就够了，生成了release的apk之后，就可以使用签名工具了！只需要注意一点，把JDK和Android SDK配置正确就好了！<a href="https://pan.baidu.com/s/1boNf6Q7" target="_blank" rel="noopener">地址在这里</a>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Ionic(ionicframework)一款开源的Html5移动App开发框架,是AngularJS移动端解决方案,Ionic以流行的原生移动开发SDK为蓝本,使开发过原生iOS或安卓app的任何人都容易理解，下面我们来看一篇关于使用ionic打包android apk例
      
    
    </summary>
    
      <category term="移动端" scheme="https://www.dxain.ml/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
    
      <category term="cordova" scheme="https://www.dxain.ml/tags/cordova/"/>
    
      <category term="ionic" scheme="https://www.dxain.ml/tags/ionic/"/>
    
      <category term="手机" scheme="https://www.dxain.ml/tags/%E6%89%8B%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>搭建ionic</title>
    <link href="https://www.dxain.ml/zh-cn/create-ionic-project.html"/>
    <id>https://www.dxain.ml/zh-cn/create-ionic-project.html</id>
    <published>2017-06-12T13:33:49.000Z</published>
    <updated>2022-07-23T10:32:11.502Z</updated>
    
    <content type="html"><![CDATA[<ol><li>查看ionic版本信息 ionic -v</li><li>降级ionic版本</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall -g ionic</span><br><span class="line">npm cache clean</span><br><span class="line">npm install -g ionic@2</span><br><span class="line">ionic start your-project blank --v2 --id com.xxx.myproject</span><br></pre></td></tr></table></figure><ol start="3"><li>安装ionic ：npm install -g ionic@1.2.4</li><li>安装过程</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">安装ionic 及 cordova</span><br><span class="line">安装命令</span><br><span class="line">npm install -g cordova ionic</span><br><span class="line"></span><br><span class="line">更新命令</span><br><span class="line">npm update -g cordova ionic</span><br><span class="line"></span><br><span class="line">安装特定版本</span><br><span class="line">npm install -g ionic cordova@5.0.0</span><br><span class="line">npm install -g ionic@1.6.5</span><br><span class="line"></span><br><span class="line">删除命令</span><br><span class="line">npm uninstall cordova -g</span><br><span class="line">npm uninstall ionic -g</span><br><span class="line"></span><br><span class="line">npm 淘宝镜像(GFW，导致很多插件下载失败)</span><br><span class="line"></span><br><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br><span class="line">// 安装完成后，以后所有的插件都使用cnpm这个命令来进行安装</span><br><span class="line">cnpm install -g ionic cordova</span><br><span class="line">创建应用</span><br><span class="line"></span><br><span class="line">创建ionic 项目，可选模板：sidemenu（侧滑菜单），tabs（底部tab），blank 空白</span><br><span class="line"></span><br><span class="line">ionic start myapp blank</span><br><span class="line">ionic start myapp tabs</span><br><span class="line">ionic start myapp sidemenu</span><br><span class="line">如果是github上下载的项目，里面的插件、依赖项一般通过下面命令下载：</span><br><span class="line"></span><br><span class="line">bower install</span><br><span class="line">npm install</span><br><span class="line">如果是老ionic 项目，如果需要更新项目里面的ionic文件（如js类库）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ionic lib update</span><br><span class="line">浏览器端运行</span><br><span class="line"></span><br><span class="line">ionic serve</span><br><span class="line">ionic serve --lab</span><br><span class="line">真机模拟、打包、运行</span><br><span class="line"></span><br><span class="line">ionic platform add android  //[iOS]</span><br><span class="line">最新命令cordova compile android   （ionic build android）</span><br><span class="line">ionic run android</span><br><span class="line">ionic emulate android</span><br><span class="line">如何用xcode 打包IONIC 项目（IPK）</span><br><span class="line"></span><br><span class="line">将项目文件copy到MAC底下。运行终端，cd到项目所在文件夹，运行</span><br><span class="line"></span><br><span class="line">ionic platform add ios</span><br><span class="line">然后finder，在 platforms-&gt;ios-&gt;xxx.xcodeproj 打开项目</span><br><span class="line"></span><br><span class="line">然后，将xcode的模拟器类型选成iOS Device</span><br><span class="line"></span><br><span class="line">然后在XCODE 的菜单栏 选择 Product -- Archive ，会生成 xxx的Archive文件。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">在窗口右侧的Submit to AppStore 按钮的下方，点击 Export...</span><br><span class="line"></span><br><span class="line">有三个选项</span><br><span class="line"></span><br><span class="line">Save to IOS App Store Deployment</span><br><span class="line">Save to Ad Hoc Deployment</span><br><span class="line">Save for Enterprise Deployment</span><br><span class="line">选第二个Save to Ad Hoc Deployment 打包成.ipk</span><br><span class="line"></span><br><span class="line">选择证书等等，选择导出文件夹，导出</span><br></pre></td></tr></table></figure><p>ionic start payApp tabs --type=ionic-angular</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;查看ionic版本信息 ionic -v&lt;/li&gt;
&lt;li&gt;降级ionic版本&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;
      
    
    </summary>
    
      <category term="移动端" scheme="https://www.dxain.ml/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
    
      <category term="cordova" scheme="https://www.dxain.ml/tags/cordova/"/>
    
      <category term="ionic" scheme="https://www.dxain.ml/tags/ionic/"/>
    
      <category term="手机" scheme="https://www.dxain.ml/tags/%E6%89%8B%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>红尘渡口，你的痴心遇见了谁的情缘</title>
    <link href="https://www.dxain.ml/zh-cn/meeting-love.html"/>
    <id>https://www.dxain.ml/zh-cn/meeting-love.html</id>
    <published>2016-08-16T19:33:49.000Z</published>
    <updated>2016-08-16T19:33:49.000Z</updated>
    
    <content type="html"><![CDATA[<p style="text-indent:2em">​自古红尘多忧愁，入了红尘，亦醉了红尘。红尘多梦，梦亦然，红尘梦里一场烟，梦里红尘一场空。一支断箫，承载了多少迷人的爱情故事；一曲离殇，吟唱了多少不舍的红尘美梦。梦，早已随风消逝，情，却在红尘里徘徊缠绵。</p><a id="more"></a><p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1547388954146&amp;di=5920b7a841ab3b824dc76fb2aa9ff1ff&amp;imgtype=0&amp;src=http%3A%2F%2Fpic1.win4000.com%2Fwallpaper%2F2018-03-13%2F5aa75d78ecbfb.jpg" alt="图1"></p><p>​</p><p style="text-indent:2em"><br>相思桥下，你的痴心会遇见谁的情缘？谁的等待会邂逅你的守候？青石板旁，你的脚步会为谁停留？而谁又会是那个一直等待你出现的有缘人？几经波折，几经弯路，你眉下的倾城笑容为谁扬起？红尘彼岸的烟花又为谁灿烂绽放？风萧萧，路遥遥，一指嫣红为谁停留，一倾相思为谁痴守。</p><p></p><p>​</p><p style="text-indent:2em"><br>红尘渡口渡有缘，有缘遇见便是分，缘分自古三分天意，七分争取，如能牵手便是福分，如若不能一起白头，便惟愿各自安好。红尘渡口不知渡了多少有缘人，渡桥边不知又有多少人在苦苦等待有缘人的到来。等待只是为了遇见对的人，而对的人总会在恰当的时候出现，不浮不躁，不卑不亢，冥冥之中，我们都会遇见一个倾心之人。</p><p></p><p>​</p><p style="text-indent:2em"><br>成长的步伐从来不会为谁而停止，不知不觉，后知后觉，时光的脚步带领着自己也来到了红尘的渡口，矫情的岁月在渡桥边焕发着多少的痴男怨女，唯美浪漫的爱情故事不知让多少人甘愿一往情深。在这红尘渡口下，我终于遇见了人潮汹涌里那个特别的你，情愿一生痴守的你。今生有幸与你牵手，今世甘愿为你守候。</p><p></p><p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1547389050195&amp;di=70e5fc02578d771152bdf9130e12d803&amp;imgtype=0&amp;src=http%3A%2F%2Fpic1.win4000.com%2Fwallpaper%2F2017-11-06%2F59fffdeced3d6.jpg" alt="图2"></p><p>​</p><p style="text-indent:2em"><br>渡桥边，西楼上悬挂着如钩的月儿，庭院一角锁着的是谁的落寞？窗前的一帘幽梦，苍老了谁的痴心等待？今宵月光正好，星星也正闪耀，晚风开始唤起我对你美好的追忆，那一段柔情岁月。渡口旁，我邀明月共赏，我等天地见证。</p><p></p><p>​</p><p style="text-indent:2em"><br>一刻停留，一世等待，遇见你是我今生的缘，牵起你的手更是我今世的分。奈何，烟花易冷；奈何，情缘难分。当痴心遇上了冷风，不知吹散了多少的相遇，而那瞬间绚丽的花期，又不知辜负了多少的斑斓年华。</p><p></p><p>​</p><p style="text-indent:2em"><br>我想在红尘渡口边建一间温暖小屋，在那里只有属于我们的世界，那是我期盼已久的事情，那是我能想到最浪漫的事情，与你一起牵手，看尽繁华流年，阅遍风花雪月。于是，在每一个风淡云轻的日子里，在每一个夜深人静的黑夜里，我总是忍不住遥望远方灯火阑珊处，不敢挑逗脑海里不灭的思绪，亦不想去思量心底那缠绵的思念。偏偏，夜越是深，人越是静，我越是控制不了自己去想你，幻想着一切只属于我们的美好。</p><p></p><p>​</p><p style="text-indent:2em"><br>红尘渡口停留凝望注视，回首彼岸，犹记当初相遇时，你仿佛诗歌里柔情的女子一般出现在我的世界，你我只一眼的对视，你的容颜从此扣动着我的心弦，让我惹上了孤独的相思，无尽的眷恋。一世情长只为你一人，一生眷恋独倾你一人心。</p><p></p><p><img src="https://dpic.tiankong.com/vc/je/QJ6345815289.jpg?x-oss-process=style/670ws" alt="图3"></p><p>​</p><p style="text-indent:2em"><br>当过往被定格成照片，岁月覆盖了所有美好的曾经，往事一幕一幕在脑海里放映，可爱的人儿被一页一页翻过，而你始终是我最不愿翻过的一页。岁月辗转，流年似水一去不复返，时光如同激流一般匆匆逝去，纵然一切早已物是人非，纵然一切早已随风飘逝，但你依然是我红尘渡口上不舍的眷恋。</p><p></p><p>​</p><p style="text-indent:2em"><br>自古红尘美梦令人醉，醉心红尘入凡间，痴心永存心底成追忆。我欲剪一段流年光阴，寄于岁月深处下；拾一段时光回忆，藏于红尘碎梦里。我想要把你就这样一笔一划地写进心里，写成心底最美丽的诗。我想要把你就这样一字一句地唱到脑海，唱成记忆里最动听的歌。</p><p></p><p style="text-indent:2em">​红尘渡口，你的痴心遇见了谁的情缘？而又是谁的等待邂逅了你的守候？凡尘俗世里，在经历了感情的风风雨雨之后，在漫长的独自等待之后，愿你我都能遇见一个动心的温暖人儿，如此，甚好。</p>]]></content>
    
    <summary type="html">
    
      &lt;p style=&quot;text-indent:2em&quot;&gt;
​自古红尘多忧愁，入了红尘，亦醉了红尘。红尘多梦，梦亦然，红尘梦里一场烟，梦里红尘一场空。一支断箫，承载了多少迷人的爱情故事；一曲离殇，吟唱了多少不舍的红尘美梦。梦，早已随风消逝，情，却在红尘里徘徊缠绵。
&lt;/p&gt;
    
    </summary>
    
      <category term="美文欣赏" scheme="https://www.dxain.ml/categories/%E7%BE%8E%E6%96%87%E6%AC%A3%E8%B5%8F/"/>
    
    
      <category term="情感" scheme="https://www.dxain.ml/tags/%E6%83%85%E6%84%9F/"/>
    
      <category term="生活" scheme="https://www.dxain.ml/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>jQuery学习和知识点总结</title>
    <link href="https://www.dxain.ml/zh-cn/summary-of-jquery.html"/>
    <id>https://www.dxain.ml/zh-cn/summary-of-jquery.html</id>
    <published>2016-08-03T10:28:11.000Z</published>
    <updated>2016-08-03T10:28:11.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>jQuery目前在Web前端开发所占的比重越来越高，在我们jQuery学习和开发的过程中都会去使用。jQuery帮我们解决了浏览器之间JS一些不兼容的地方和简化了原生JS对DOM的操作。下面把PHP程序员雷雪松对jQuery的知识点总结和归纳分享给大家。</p></blockquote><h4 id="1-jquery简介">1、jQuery简介</h4><p>jQuery是一个实用的JavaScript库。jQuery极大地简化了JS对DOM的操作，实现一些常用的方法，jQuery还可以链式操作。</p><h4 id="2-jquery的基本用法">2、jQuery的基本用法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//引入jQuery文件，可以本地也可以远程</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;jQuery.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">//当文档完成加载完时触发，避免获取dom对象时，dom对象还没有加载</span><br><span class="line">$(document).ready(function()&#123;</span><br><span class="line">//写js语句或者jQuery函数</span><br><span class="line">$(&quot;p&quot;).click(function()&#123;</span><br><span class="line">$(this).hide();</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="3-jquery常用的选择器和事件-和css的选择器很相似">3、jQuery常用的选择器和事件，和CSS的选择器很相似</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$() – 使用CSS选择器匹配元素</span><br><span class="line">jQuery的事件和JS的事件基本相同，在使用的时候，去掉JS事件前面的on即可。</span><br><span class="line">jQuery常用的事件：</span><br><span class="line">load：当文档加载时运行脚本</span><br><span class="line">blur：当窗口失去焦点时运行脚本</span><br><span class="line">focus：当窗口获得焦点时运行脚本</span><br><span class="line">change：当元素改变时运行脚本</span><br><span class="line">submit：当提交表单时运行脚本</span><br><span class="line">keydown：当按下按键时运行脚本</span><br><span class="line">keypress：当按下并松开按键时运行脚本</span><br><span class="line">keyup：当松开按键时运行脚本</span><br><span class="line">click：当单击鼠标时运行脚本</span><br><span class="line">dblclick：当双击鼠标时运行脚本</span><br><span class="line">mousedown：当按下鼠标按钮时运行脚本</span><br><span class="line">mousemove：当鼠标指针移动时运行脚本</span><br><span class="line">mouseout：当鼠标指针移出元素时运行脚本</span><br><span class="line">mouseover：当鼠标指针移至元素之上时运行脚本</span><br><span class="line">mouseup：当松开鼠标按钮时运行脚本</span><br><span class="line">abort：当发生中止事件时运行脚本</span><br></pre></td></tr></table></figure><h4 id="4-jquery常用的效果方法">4、jQuery常用的效果方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$(selector).hide() – 隐藏被选的元素</span><br><span class="line">$(selector).show() – 显示被选的元素</span><br><span class="line">$(selector).toggle() – 对被选元素进行隐藏和显示的切换</span><br><span class="line">$(selector).slideDown() – 通过调整高度来滑动显示被选元素</span><br><span class="line">$(selector).slideToggle() – 对被选元素进行滑动隐藏和滑动显示的切换</span><br><span class="line">$(selector).slideUp() – 通过调整高度来滑动隐藏被选元素</span><br><span class="line">$(selector).fadeIn() – 逐渐改变被选元素的不透明度，从隐藏到可见</span><br><span class="line">$(selector).fadeOut() – 逐渐改变被选元素的不透明度，从可见到隐藏</span><br><span class="line">$(selector).fadeTo() – 把被选元素逐渐改变至给定的不透明度</span><br><span class="line">$(selector).animate() – 对被选元素应用“自定义”的动画</span><br></pre></td></tr></table></figure><h4 id="5-jquery常用的dom元素操作方法">5、jQuery常用的DOM元素操作方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">$(selector).parent() – 返回被选元素的直接父元素。</span><br><span class="line">$(selector).parents() – 返回被选元素的所有祖先元素，它一路向上直到文档的根元素 (&lt;html&gt;)，可选参数来过滤对祖先元素的搜索</span><br><span class="line">$(selector).children() – 返回被选元素的所有直接子元素。可选参数来过滤对子元素的搜索</span><br><span class="line">$(selector).find() – 返回被选元素的后代元素，一路向下直到最后一个后代，可选参数来过滤对后后代元素的搜索</span><br><span class="line">$(selector).siblings() – 返回被选元素的所有同胞元素。过滤对同胞元素的搜索。</span><br><span class="line">$(selector).next() – 返回被选元素的下一个同胞元素。</span><br><span class="line">$(selector).nextAll() – 返回匹配元素集合中每个元素之后的所有同辈元素，由选择器进行筛选（可选）。</span><br><span class="line">$(selector).prev() – 返回的是前面的同胞元素</span><br><span class="line">$(selector).prevAll() – 返回匹配元素集合中每个元素之前的所有同辈元素，由选择器进行筛选（可选）。</span><br><span class="line">$(selector).first() – 将匹配元素集合缩减为集合中的第一个元素。</span><br><span class="line">$(selector).last() – 将匹配元素集合缩减为集合中的最后一个元素。</span><br><span class="line">$(selector).eq() – 指定索引的新元素。</span><br><span class="line">$(selector).get() – 获得由选择器指定的 DOM 元素。</span><br><span class="line">$(selector).index() – 返回指定元素相对于其他指定元素的 index 位置。</span><br><span class="line"></span><br><span class="line">注：parent()、next()、prev()、first()、last()、eq()只返回一个元素。返回元素集合的函数都可以传传参数筛选，比如：parents()、siblings()、nextAll()、prevAll()、siblings()。</span><br><span class="line"></span><br><span class="line">$(selector).each() 对对象进行迭代，为每个元素执行函数</span><br><span class="line">$(selector).toArray() 以数组的形式返回 jQuery 选择器匹配的元素</span><br><span class="line">$(selector).size() 返回被 jQuery 选择器匹配的元素的数量</span><br><span class="line"></span><br><span class="line">$(selector).text() – 设置或返回所选元素的文本内容</span><br><span class="line">$(selector).html() – 设置或返回所选元素的内容（包括 HTML 标记）</span><br><span class="line">$(selector).val() – 设置或返回表单字段的值</span><br><span class="line">$(selector).append() – 在被选元素的结尾插入内容</span><br><span class="line">$(selector).prepend() – 在被选元素的开头插入内容</span><br><span class="line">$(selector).after() – 在被选元素之后插入内容</span><br><span class="line">$(selector).before() – 在被选元素之前插入内容</span><br><span class="line">$(selector).remove() – 删除被选元素（及其子元素）</span><br><span class="line">$(selector).empty() – 从被选元素中删除子元素</span><br><span class="line">$(selector).removeAttr() – 从所有匹配的元素中移除指定的属性。</span><br><span class="line">$(selector).clone() – 创建匹配元素集合的副本</span><br><span class="line">$(selector).load() – 从服务器加载数据，然后把返回到 HTML 放入匹配元素</span><br></pre></td></tr></table></figure><h4 id="6-jquery对css的操作">6、jQuery对CSS的操作</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$(selector).height() – 设置或返回匹配元素的高度。</span><br><span class="line">$(selector).width() – 设置或返回匹配元素的宽度。</span><br><span class="line">$(selector).addClass() – 向被选元素添加一个或多个类</span><br><span class="line">$(selector).removeClass() – 从被选元素删除一个或多个类</span><br><span class="line">$(selector).toggleClass() – 对被选元素进行添加/删除类的切换操作</span><br><span class="line">$(selector).css() – 设置或返回样式属性</span><br><span class="line">$(selector).hasClass() 检查匹配的元素是否拥有指定的类。</span><br></pre></td></tr></table></figure><h4 id="7-jquery其他知识点">7、jQuery其他知识点</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(selector).data() – 存储与匹配元素相关的任意数据</span><br><span class="line">$(selector).removeData() – 移除之前存放的数据</span><br><span class="line">$(selector).serialize() – 将表单内容序列化为字符串</span><br><span class="line">$(selector).serializeArray() – 序列化表单元素，返回 JSON 数据结构数据</span><br></pre></td></tr></table></figure><blockquote><p>$冲突的解决办法</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//释放$标识符的控制，使用默认的变量jQuery</span><br><span class="line">$.noConflict();</span><br><span class="line">//自定义变量</span><br><span class="line">var jq = $.noConflict();</span><br></pre></td></tr></table></figure><h4 id="8-jquery-ajax-操作函数">8、jQuery Ajax 操作函数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$.ajax() – 执行Ajax异步请求</span><br><span class="line">$.get() – 使用GET请求从服务器获取数据</span><br><span class="line">$.getJSON() – 使用GET从服务器请求JSON编码数据</span><br><span class="line">$.getScript() – 使用GET从服务器请求JavaScript文件并执行该文件</span><br><span class="line">$.post() – 使用POST请求从服务器获取数据</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;jQuery目前在Web前端开发所占的比重越来越高，在我们jQuery学习和开发的过程中都会去使用。jQuery帮我们解决了浏览器之间JS一些不兼容的地方和简化了原生JS对DOM的操作。下面把PHP程序员雷雪松对jQuery的知识点总结和归纳分享给
      
    
    </summary>
    
      <category term="前端" scheme="https://www.dxain.ml/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="jQuery" scheme="https://www.dxain.ml/tags/jQuery/"/>
    
      <category term="总结" scheme="https://www.dxain.ml/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>如何使用GitHub（二）</title>
    <link href="https://www.dxain.ml/zh-cn/how-to-use-gitHub-2.html"/>
    <id>https://www.dxain.ml/zh-cn/how-to-use-gitHub-2.html</id>
    <published>2016-07-11T12:11:26.000Z</published>
    <updated>2016-07-11T12:11:26.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本篇文章是对如何在github上进行操作的总结第二季</p></blockquote><h4 id="创建仓库">创建仓库</h4><ol><li><p>实际创建一个公开的仓库。点击右上角工具栏中的“+”下拉菜单里的New repository，创建新的仓库。</p></li><li><p>在Repository name 栏中输入仓库的名称。</p></li><li><p>Description栏中可以设置仓库的说明。这一栏不是必须项，可以留空。</p></li><li><p>选择Public，创建公开仓库，仓库内的所有内容都会被公开。</p></li><li><p>选择Private，创建非公开仓库，用户可以设置访问权限，但这项服务是收费的。</p></li><li><p>在Initialize this repository with a README选项上打钩，随后GitHub会自动初始化仓库并设置README文件，让用户可以立刻clone这个仓库。如果想向GitHub添加手中已有的Git仓库，建议不要勾选，直接手动push。</p></li><li><p>下方左侧的下拉菜单Add .gitignore非常方便，通过它可以在初始化时自动生成.gitignore文件。这个设定会帮我们把不需要再Git仓库中进行版本管理的文件记录在.gitignore文件中，省去了每次根据框架进行设置的麻烦。下拉菜单中包含了主要的语言及框架，选择今后将要使用的即可。</p></li><li><p>下方右侧的下拉菜单Add a license可以选择要添加的许可协议文件。如果这个仓库中包含的代码已经确定了许可协议，那么请在这里进行选择。随后将自动生成包含许可协议内容的LICENSE文件，用来表明仓库内容的许可协议。</p></li><li><p>输入选择都完成后，点击Create repository按钮，完成仓库的创建。</p></li></ol><h4 id="clone已有仓库">clone已有仓库</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone 仓库的路径</span><br><span class="line"></span><br><span class="line">cd 目录名称</span><br></pre></td></tr></table></figure><h4 id="编写代码">编写代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vim test.php</span><br><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line">echo &quot;Hello World&quot;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h4 id="查看状态">查看状态</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure><h4 id="提交">提交</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add test.php</span><br><span class="line"></span><br><span class="line">git commit -m &quot;Add test.php&quot;</span><br></pre></td></tr></table></figure><p>通过git add命令将文件加入暂存区，再通过git commit命令提交。</p><p>添加成功后，可以通过git log命令查看提交日志。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log</span><br></pre></td></tr></table></figure><h4 id="进行push">进行push</h4><p>之后只要执行push，GitHub上的仓库就会被更新</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push</span><br></pre></td></tr></table></figure><p>这样一来代码就在GitHub上公开了。</p><p>在使用github的时候也会存在一些错误，以下是比较常见的两种错误</p><h4 id="github错误解决">Github错误解决</h4><ol><li><p>Warning: Permanently added ‘<a href="http://github.com" target="_blank" rel="noopener">github.com</a>,192.30.252.120’ (RSA) to the list of know</p><p>ssh -T <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a></p><p>The authenticity of host '<a href="http://github.com" target="_blank" rel="noopener">github.com</a></p><p>(192.30.252.120)’ can’t be established.</p><p>RSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8.</p><p>Are you sure you want to continue connecting (yes/no)? yes</p><p>Warning: Permanently added ‘<a href="http://github.com" target="_blank" rel="noopener">github.com</a>,192.30.252.120’ (RSA) to the list of known hosts.</p><p>Permission denied (publickey).</p><p>解决方案：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cd .ssh</span><br><span class="line"></span><br><span class="line">ls -la</span><br><span class="line"></span><br><span class="line">rm -rf id_rsa</span><br><span class="line"></span><br><span class="line">rm -rf id_rsa.pub</span><br></pre></td></tr></table></figure><p>重新设置SSH Key，并添加公开密钥。</p></li><li><p>Warning: Permanently added the RSA host key for IP address ‘192.30.252.129’ to t</p><p>Warning: Permanently added the RSA host key for IP address ‘192.30.252.129’ to the list of known hosts.</p><p>解决方案：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/hosts</span><br></pre></td></tr></table></figure><p>添加如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">192.30.252.129 github.com</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本篇文章是对如何在github上进行操作的总结第二季&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;创建仓库&quot;&gt;创建仓库&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;实际创建一个公开的仓库。点击右上角工具栏中的“+”下拉菜单里的New reposit
      
    
    </summary>
    
      <category term="前端" scheme="https://www.dxain.ml/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="github" scheme="https://www.dxain.ml/tags/github/"/>
    
      <category term="工具" scheme="https://www.dxain.ml/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
</feed>
