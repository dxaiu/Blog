<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>听雨轩</title>
  
  <subtitle>知识是永远不变的流行色</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.dxain.ml/"/>
  <updated>2019-10-02T10:11:22.000Z</updated>
  <id>https://www.dxain.ml/</id>
  
  <author>
    <name>Alliot</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>我和我的祖国</title>
    <link href="https://www.dxain.ml/zh-cn/myself-china.html"/>
    <id>https://www.dxain.ml/zh-cn/myself-china.html</id>
    <published>2019-09-28T19:33:49.000Z</published>
    <updated>2019-10-02T10:11:22.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/uploads/china-birsday.png" alt></p><a id="more"></a><p>从1949年到2019年，弹指之间，新中国将迎来它的第70个年头。中国从一个贫穷落后的国家发展成了如今的第二大经济强国。70年前中国百废待兴，70年后中国百业昌盛!我们为祖国感到骄傲!我们为五星红旗感到自豪!</p><div class="note success"><p>下为1949年开国大典影像资料：</p></div><iframe src="//player.bilibili.com/player.html?aid=983873600&bvid=BV1wt4y1V7uD&cid=782925845&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="height:600px;width:100%;display:block;margin-left:auto;margin-right:auto"> </iframe> <!-- <video poster="/uploads/70th.png" src="https://player.bilibili.com/player.html?aid=983873600&bvid=BV1wt4y1V7uD&cid=782925845&page=1" style="max-height:100%;max-width:100%;display:block;margin-left:auto;margin-right:auto" controls="" loop="" preload="meta">Your browser does not support the video tag.</video> --><blockquote><p><font face="黑体" color="green" size="5"><a href="https://v.qq.com/x/cover/mzc002005wlunzw/d30031hm2g5.html" target="_blank" rel="noopener">戳我观看国庆70周年阅兵式完整视频</a></font></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/uploads/china-birsday.png&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="家国情怀" scheme="https://www.dxain.ml/categories/%E5%AE%B6%E5%9B%BD%E6%83%85%E6%80%80/"/>
    
    
      <category term="情感" scheme="https://www.dxain.ml/tags/%E6%83%85%E6%84%9F/"/>
    
      <category term="生活" scheme="https://www.dxain.ml/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="祖国" scheme="https://www.dxain.ml/tags/%E7%A5%96%E5%9B%BD/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript之再学习</title>
    <link href="https://www.dxain.ml/zh-cn/js-base-learn.html"/>
    <id>https://www.dxain.ml/zh-cn/js-base-learn.html</id>
    <published>2019-04-21T11:36:03.000Z</published>
    <updated>2019-04-21T11:36:03.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概览">概览</h2><p>JavaScript 是一种面向对象的动态语言，它包含类型、运算符、标准内置（ built-in）对象和方法。它的语法来源于 Java 和 C，所以这两种语言的许多语法特性同样适用于 JavaScript。需要注意的一个主要区别是 JavaScript 不支持类，类这一概念在 JavaScript 通过对象原型（object prototype）得到延续。另一个主要区别是 JavaScript 中的函数也是对象，JavaScript 允许函数在包含可执行代码的同时，能像其他对象一样被传递。</p><h2 id="数据类型和结构">数据类型和结构</h2><h3 id="1-动态类型">1. 动态类型</h3><p><code>JavaScript</code>是一种弱类型或者说动态语言。这意味着你不用提前声明变量的类型，在程序运行过程中，类型会被自动确定。这也意味着你可以使用同一个变量保存不同类型的数据：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="number">42</span>;    <span class="comment">// foo is a Number now</span></span><br><span class="line"><span class="keyword">var</span> foo = <span class="string">"bar"</span>; <span class="comment">// foo is a String now</span></span><br><span class="line"><span class="keyword">var</span> foo = <span class="literal">true</span>;  <span class="comment">// foo is a Boolean now</span></span><br></pre></td></tr></table></figure><h3 id="2-数据类型">2. 数据类型</h3><p>最新的<code>ECMAScript</code>标准定义了 7 种数据类型:</p><ul><li>6 种原始类型<ul><li><code>Null</code> (空, 只有一个值<code>null</code>)</li><li><code>Undefined</code> (未定义, 一个没有被赋值的变量的默认值是<code>undefined</code>):</li><li><code>Boolean</code> (布尔, 可以有两个值：<code>true</code> 和 <code>false</code>)</li><li><code>Number</code> (数字)</li><li><code>String</code> (字符串)</li><li><code>Symbol</code> (符号, ECMAScript 6 新定义的类型，表示独一无二的值)</li></ul></li><li>和 <code>Object</code> (对象)<ul><li><code>Function</code> (函数)</li><li><code>Array</code> (数组)</li><li><code>Date</code> (日期)</li><li><code>JSON</code> (JS对象标识,来序列化对象、数组、数值、字符串、布尔值和 <code>null</code>)</li><li><code>Math</code> (数学方面的计算)</li><li><code>RegExp</code> (正则表达式)</li><li><code>Error</code> (错误)</li><li><code>Map</code></li><li><code>Set</code></li></ul></li></ul><h3 id="内置对象">内置对象</h3><p>这里的<strong>内置对象</strong>指的是在全局作用域(<code>global scope</code>)中的对象，由于很多，不再一一列出说明，更全面的解释在<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects" target="_blank" rel="noopener">这里</a>。</p><p>全局对象本身可通过<code>this</code>操作符在全局作用域中获得。实际上，全局作用域就是由全局对象的各个属性组成的（包括继承来的属性）。</p><h2 id="严格模式">严格模式</h2><p>除了正常运行模式，ECMAscript 5添加了第二种运行模式：“严格模式”（<code>strict mode</code>）。顾名思义，这种模式使得Javascript在更严格的条件下运行。</p><p>严格模式可以应用到整个script标签或个别函数中。设立&quot;严格模式&quot;的目的，主要有以下几个：</p><ul><li>消除 Javascript 语法的一些不合理、不严谨之处，减少一些怪异行为;</li><li>消除代码运行的一些不安全之处，保证代码运行的安全；</li><li>提高编译器效率，增加运行速度；</li><li>为未来新版本的 Javascript 做好铺垫。</li></ul><h3 id="为某个script标签开启严格模式">为某个script标签开启严格模式</h3><p>进入严格模式的标志，是下面这行语句：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span></span><br></pre></td></tr></table></figure><h3 id="为某个函数开启严格模式">为某个函数开启严格模式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">strict</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 函数级别严格模式语法</span></span><br><span class="line"><span class="meta">  'use strict'</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">"I'm a strict mode function!  "</span> + nested();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">notStrict</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"I'm not strict."</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="相等性判断">相等性判断</h2><p>JavaScript提供三种不同的值比较操作：</p><ul><li>严格相等 (“triple equals” 或 “identity”)，使用<code>===</code></li><li>宽松相等 (“double equals”) ，使用<code>==</code></li><li>以及<code>Object.is</code> (ECMAScript 2015/ ES6 新特性)</li></ul><p>简而言之，在比较两件事情时，双等号将执行类型转换; 三等号将进行相同的比较，而不进行类型转换 (如果类型不同, 只是总会返回 false );  而<code>Object.is</code>的行为方式与三等号相同，但是对于NaN和-0和+0进行特殊处理，所以最后两个不相同，而<code>Object.is(NaN，NaN)</code>将为 true。</p><p><img src="http://static.blinkfox.com/js_equals.png" alt="各原始类型值的相等比较对照表"></p><h2 id="作用域">作用域</h2><p>作用域就是变量与函数的可访问范围，即作用域控制着变量与函数的可见性和生命周期。在JavaScript中，变量的作用域有<strong>全局作用域</strong>和<strong>局部作用域</strong>两种。</p><h3 id="全局作用域">全局作用域</h3><p>在代码中任何地方都能访问到的对象拥有全局作用域。一般来说以下几种情形：</p><ul><li>最外层函数和在最外层函数外面定义的变量拥有全局作用域。</li><li>所有未定义而直接赋值的变量自动声明为拥有全局作用域。</li><li>所有window对象的属性拥有全局作用域。如：<code>window.name</code>、<code>window.location</code>等。</li></ul><blockquote><p><strong>注</strong>：全局变量存在于程序的整个生命周期。没有块级作用域。</p></blockquote><h3 id="局部作用域">局部作用域</h3><p>局部作用域一般只在固定的代码片段内可访问到，最常见的是在函数内部，所有在一些地方也会看到有人把这种作用域称为<strong>函数作用域</strong>。</p><h3 id="作用域链">作用域链</h3><p>JavaScript里一切都是对象。函数对象和其它对象一样，拥有可以通过代码访问的属性和一系列仅供JavaScript引擎访问的内部属性。其中一个内部属性是<code>Scope</code>，该内部属性包含了函数被创建的作用域中对象的集合，这个集合被称为函数的作用域链，它决定了哪些数据能被函数访问。</p><p>因为全局变量总是存在于<strong>运行时上下文</strong>作用域链的最末端。所以，在标识符解析的时候，查找全局变量是最慢的。所以，在编写代码的时候应尽量少使用全局变量，尽可能使用局部变量。一个好的经验法则是：<strong>如果一个跨作用域的对象被引用了一次以上，则先把它存储到局部变量里再使用</strong>。</p><p><code>with</code>语句主要用来临时扩展作用域链，将语句中的对象添加到作用域的头部。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">person = &#123;<span class="attr">name</span>: <span class="string">"yhb"</span>, <span class="attr">age</span>: <span class="number">22</span>, <span class="attr">height</span>:<span class="number">175</span>, <span class="attr">wife</span>: &#123;<span class="attr">name</span>: <span class="string">"lwy"</span>, <span class="attr">age</span>: <span class="number">21</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">with</span> (person.wife) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>with语句将<code>person.wife</code>添加到当前作用域链的头部，所以输出的就是：<code>lwy</code>；with语句结束后，作用域链恢复正常。</p><blockquote><p>当代码运行到with语句时，运行期上下文的作用域链临时被改变了。一个新的可变对象被创建，它包含了参数指定的对象的所有属性。这个对象将被推入作用域链的头部，这意味着函数的所有局部变量现在处于第二个作用域链对象中，因此访问代价更高了。<br><strong>注</strong>：在程序中应避免使用with语句。</p></blockquote><h2 id="闭包-closures">闭包(Closures)</h2><h3 id="一个示例">一个示例</h3><p>如何从外部读取局部变量？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> n=<span class="number">999</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(n); <span class="comment">// 999</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的代码中，函数f2就被包括在函数f1内部，这时f1内部的所有局部变量，对f2都是可见的。但是反过来就不行，f2内部的局部变量，对f1就是不可见的。这就是Javascript语言特有的&quot;链式作用域&quot;结构（<code>chain scope</code>），子对象会一级一级地向上寻找所有父对象的变量。所以，<strong>父对象的所有变量，对子对象都是可见的，反之则不成立</strong>。</p><p>既然f2可以读取f1中的局部变量，那么只要把f2作为返回值，我们不就可以在f1外部读取它的内部变量了吗！</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> n=<span class="number">999</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(n); <span class="comment">// 999</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> f2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> result=f1();</span><br><span class="line">result(); <span class="comment">// 999</span></span><br></pre></td></tr></table></figure><h3 id="闭包解释">闭包解释</h3><blockquote><p><strong>闭包定义</strong>：闭包是一个函数和函数所声明的词法环境的结合。</p></blockquote><p>在上面的代码中，f2函数就是闭包。<strong>闭包</strong>（<code>closure</code>）定义非常抽象，很难看懂。我的理解是，<strong>闭包就是能够读取其他函数内部变量的函数</strong>。在本质上，闭包就是将函数内部和函数外部连接起来的一座桥梁。</p><p>闭包最大用处有两个，一个是可以读取函数内部的变量，另一个就是让这些变量的值始终保持在内存中，不会在调用结束后被垃圾回收机制（<code>garbage collection</code>）回收。</p><h3 id="立即执行函数表达式">立即执行函数表达式</h3><p>有时你想模拟一个模拟块级作用域，例如你想将变量从全局作用域隔离。完成这个工作的模式叫做<code>IIFE</code>(立即执行函数表达式(<code>Immediately Invoked Function Expression</code>))：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;  <span class="comment">// 块开始</span></span><br><span class="line">    <span class="keyword">var</span> tmp = ...;  <span class="comment">// 非全局变量</span></span><br><span class="line">&#125;());  <span class="comment">// 块结束</span></span><br></pre></td></tr></table></figure><h3 id="用闭包模拟私有方法">用闭包模拟私有方法</h3><p>JavaScript 并不提供原生的支持私有方法，但是可以使用闭包模拟私有方法。私有方法不仅仅有利于限制对代码的访问：还提供了管理全局命名空间的强大能力，避免非核心的方法弄乱了代码的公共接口部分。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Counter = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> privateCounter = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">changeBy</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">        privateCounter += val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        increment: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            changeBy(<span class="number">1</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        decrement: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            changeBy(<span class="number">-1</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        value: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> privateCounter;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(Counter.value()); <span class="comment">/* logs 0 */</span></span><br><span class="line">Counter.increment();</span><br><span class="line">Counter.increment();</span><br><span class="line"><span class="built_in">console</span>.log(Counter.value()); <span class="comment">/* logs 2 */</span></span><br><span class="line">Counter.decrement();</span><br><span class="line"><span class="built_in">console</span>.log(Counter.value()); <span class="comment">/* logs 1 */</span></span><br></pre></td></tr></table></figure><p>上面创建了一个环境，为三个函数所共享：<code>Counter.increment</code>, <code>Counter.decrement</code>和<code>Counter.value</code>。该共享环境创建于一个匿名函数体内，该函数一经定义立刻执行。环境中包含两个私有项：名为<code>privateCounter</code>的变量和名为<code>changeBy</code>的函数。这两项都无法在匿名函数外部直接访问。必须通过匿名包装器返回的三个公共函数访问。</p><p><strong>注意</strong>：</p><ul><li>由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。</li><li>闭包会在父函数外部，改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。</li></ul><h2 id="内存机制">内存机制</h2><p>首先JavaScript中的变量分为<strong>基本类型</strong>和<strong>引用类型</strong>。</p><ul><li>基本类型就是保存在栈内存中的简单数据段。基本类型有<code>Undefined</code>、<code>Null</code>、<code>Boolean</code>、<code>Number</code>和<code>String</code>。这些类型在内存中分别占有固定大小的空间，他们的值保存在<strong>栈空间</strong>，我们通过按值来访问的。</li><li>引用类型指的是那些保存在堆内存中的对象。引用类型，值大小不固定，栈内存中存放地址指向堆内存中的对象。是按引用访问的。栈内存中存放的只是该对象的访问地址，在堆内存中为这个值分配空间。</li></ul><h3 id="为什么会有栈内存和堆内存之分？">为什么会有栈内存和堆内存之分？</h3><p>与垃圾回收机制有关，为了使程序运行时占用的内存最小。</p><p>当一个方法执行时，每个方法都会建立自己的内存栈，在这个方法内定义的变量将会逐个放入这块栈内存里，随着方法的执行结束，这个方法的内存栈也将自然销毁了。因此，所有在方法中定义的变量都是放在栈内存中的；</p><p>当我们在程序中创建一个对象时，这个对象将被保存到运行时数据区中，以便反复利用（因为对象的创建成本通常较大），这个运行时数据区就是堆内存。堆内存中的对象不会随方法的结束而销毁，即使方法结束后，这个对象还可能被另一个引用变量所引用（方法的参数传递时很常见），则这个对象依然不会被销毁，只有当一个对象没有任何引用变量引用它时，系统的垃圾回收机制才会在核实的时候回收它。</p><h3 id="垃圾回收机制">垃圾回收机制</h3><p>Javascript具有自动垃圾回收机制(<code>GC</code>:<code>Garbage Collecation</code>)，也就是说，执行环境会负责管理代码执行过程中使用的内存。</p><p>JavaScript垃圾回收的机制很简单：<strong>找出不再使用的变量，然后释放掉其占用的内存，但是这个过程不是实时的，因为其开销比较大，所以垃圾回收器会按照固定的时间间隔周期性的执行</strong>。</p><p>不再使用的变量也就是生命周期结束的变量，当然只可能是局部变量，全局变量的生命周期直至浏览器卸载页面才会结束。局部变量只在函数的执行过程中存在，而在这个过程中会为局部变量在栈或堆上分配相应的空间，以存储它们的值，然后在函数中使用这些变量，直至函数结束，而闭包中由于内部函数的原因，外部函数并不能算是结束。</p><h4 id="清除方式">清除方式</h4><ul><li><strong>标记清除</strong>：垃圾回收器在运行的时候会给存储在内存中的所有变量都加上标记。然后，它会去掉环境中的变量以及被环境中的变量引用的变量的标记（闭包）。而在此之后再被加上标记的变量将被视为准备删除的变量，原因是环境中的变量已经无法访问到这些变量了。最后，垃圾回收器完成内存清除工作，销毁那些带标记的值并回收它们所占用的内存空间。</li><li><strong>引用计数</strong>：引用计数的含义是跟踪记录每个值被引用的次数。当声明了一个变量并将一个引用类型值赋给该变量时，则这个值的引用次数就是1。如果同一个值又被赋给另一个变量，则该值的引用次数加1。相反，如果包含对这个值引用的变量又取得了另外一个值，则这个值的引用次数减1。当这个值的引用次数变成0时，则说明没有办法再访问这个值了，因而就可以将其占用的内存空间回收回来。这样，当垃圾回收器下次再运行时，它就会释放那些引用次数为0的值所占用的内存。</li></ul><h2 id="原型-prototype">原型(prototype)</h2><p>原型是一个对象，其他对象可以通过它实现属性继承。JavaScript的对象中都包含了一个<code>Prototype</code>内部属性，这个属性所对应的就是该对象的原型。<code>Prototype</code>作为对象的内部属性，是不能被直接访问的。所以为了方便查看一个对象的原型，Firefox和Chrome中提供了<code>__proto__</code>这个非标准的访问器。</p><ul><li>所有的对象都有<code>__proto__</code>属性，该属性对应着该对象的原型。</li><li>所有的函数对象都有<code>prototype</code>属性，该属性的值会被赋值给该函数创建的对象的<code>__proto__</code>属性</li><li>所有的原型对象都有<code>constructor</code>属性，该属性对应创建所有指向该原型的实例的构造函数</li><li>函数对象和原型对象通过<code>prototype</code>和<code>constructor</code>属性进行相互关联</li><li><code>Object</code>实例对象的原型<code>obj.__proto__</code>就是<code>Object.prototype</code></li><li><code>hasOwnProperty</code>是<code>Object.prototype</code>的一个方法，该方法能判断一个对象是否包含自定义属性而不是原型链上的属性，因为&quot;hasOwnProperty&quot; 是 JavaScript 中唯一一个处理属性但是不查找原型链的函数</li></ul><h3 id="原型链">原型链</h3><p>因为每个对象和原型都有原型，对象的原型指向对象的父，而父的原型又指向父的父，这种原型层层连接起来的就构成了原型链。</p><p>当通过原型链查找一个属性的时候，首先查找的是对象本身的属性，如果找不到才会继续按照原型链进行查找。这样一来，如果想要覆盖原型链上的一些属性，我们就可以直接在对象中引入这些属性，达到属性隐藏的效果。</p><h2 id="对象创建方式">对象创建方式</h2><h3 id="1-object构造函数方式">1. Object构造函数方式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Person = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">Person.name = <span class="string">'Nike'</span>;</span><br><span class="line">Person.age = <span class="number">29</span>;</span><br></pre></td></tr></table></figure><p>这行代码创建了<code>Object</code>引用类型的一个新实例，然后把实例保存在变量<code>Person</code>中。</p><h3 id="2-对象字面量方式">2. 对象字面量方式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Person = &#123;</span><br><span class="line"> name: <span class="string">'Nike'</span>;</span><br><span class="line"> age: <span class="number">29</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>对象字面量是对象定义的一种简写形式，目的在于简化创建包含大量属性对象的过程。</p><blockquote><p><strong>注</strong>：前两种方法的缺点在于：它们都是用了同一个接口创建很多对象，会产生大量的重复代码，就是如果你有100个对象，那你要输入100次很多相同的代码。那我们有什么方法来避免过多的重复代码呢，就是把创建对象的过程封装在函数体内，通过函数的调用直接生成对象。</p></blockquote><h3 id="3-工厂模式">3. 工厂模式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createPerson</span>(<span class="params">name, age, job</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">    o.name = name;</span><br><span class="line">    o.age = age;</span><br><span class="line">    o.job = job;</span><br><span class="line">    o.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person1 = createPerson(<span class="string">'Nike'</span>, <span class="number">29</span>, <span class="string">'teacher'</span>);</span><br></pre></td></tr></table></figure><p>在使用工厂模式创建对象的时候，我们都可以注意到，在<code>createPerson</code>函数中，返回的是一个对象。但我们就无法判断返回的对象究竟是一个什么样的类型。于是就出现了第四种创建对象的模式。</p><h3 id="4-构造函数方式">4. 构造函数方式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, job</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">    <span class="keyword">this</span>.job = job;</span><br><span class="line">    <span class="keyword">this</span>.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">'Nike'</span>, <span class="number">29</span>, <span class="string">'teacher'</span>);</span><br><span class="line">alert(person1 <span class="keyword">instanceof</span> <span class="built_in">Object</span>); <span class="comment">//ture</span></span><br></pre></td></tr></table></figure><p>对比工厂模式，我们可以发现以下区别：</p><ul><li>没有显示地创建对象</li><li>直接将属性和方法赋给了<code>this</code>对象</li><li>没有<code>return</code>语句</li><li>终于可以识别的对象的类型。对于检测对象类型，我们应该使用instanceof操作符，我们来进行自主检测：</li></ul><p>那么构造函数确实挺好用的，但是它也有它的缺点：就是每个方法都要在每个实例上重新创建一遍，方法指的就是我们在对象里面定义的函数。如果方法的数量很多，就会占用很多不必要的内存。于是出现了第五种创建对象的方法。</p><h3 id="5-原型创建对象模式">5. 原型创建对象模式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">Person.prototype.name = <span class="string">'Nike'</span>;</span><br><span class="line">Person.prototype.age = <span class="number">20</span>;</span><br><span class="line">Person.prototype.jbo = <span class="string">'teacher'</span>;</span><br><span class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person();</span><br><span class="line">person1.name = <span class="string">'Greg'</span>;</span><br><span class="line">alert(person1.name); <span class="comment">//'Greg' --来自实例</span></span><br><span class="line">alert(person2.name); <span class="comment">//'Nike' --来自原型</span></span><br></pre></td></tr></table></figure><p>当为对象实例添加一个属性时，这个属性就会屏蔽原型对象中保存的同名属性。</p><p>这时候我们就可以使用构造函数模式与原型模式结合的方式，构造函数模式用于定义实例属性，而原型模式用于定义方法和共享的属性。</p><h3 id="6-组合使用构造函数模式和原型模式">6. 组合使用构造函数模式和原型模式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, job</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">    <span class="keyword">this</span>.job = job;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype = &#123;</span><br><span class="line">    <span class="keyword">constructor</span>: Person,</span><br><span class="line">    sayName: function()&#123;</span><br><span class="line">        alert(<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">'Nike'</span>, <span class="number">20</span>, <span class="string">'teacher'</span>);</span><br></pre></td></tr></table></figure><h3 id="7-动态原型模式">7. 动态原型模式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, job</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">    <span class="keyword">this</span>.job = job;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">this</span>.sayName != <span class="string">'function'</span>) &#123;</span><br><span class="line">        Person.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            alert(<span class="keyword">this</span>.name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">'Nike'</span>, <span class="number">20</span>, <span class="string">'teacher'</span>);</span><br><span class="line">person1.sayName();</span><br></pre></td></tr></table></figure><p>动态原型模式将所有信息封装在了构造函数中，而通过构造函数中初始化原型（仅第一个对象实例化时初始化原型），这个可以通过判断该方法是否有效而选择是否需要初始化原型。</p><h3 id="8-寄生构造函数方式">8. 寄生构造函数方式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, job</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">    o.name = name;</span><br><span class="line">    o.age = age;</span><br><span class="line">    o.job = job;</span><br><span class="line">    o.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">'Nike'</span>, <span class="number">29</span>, <span class="string">'teacher'</span>);</span><br></pre></td></tr></table></figure><p>寄生模式和工厂模式几乎一样，寄生模式和工厂模式的区别：</p><ul><li>寄生模式创建对象时使用了<code>new</code>关键字</li><li>寄生模式的外部包装函数是一个构造函数</li></ul><blockquote><p><strong>作用</strong>:寄生模式可以在特殊的情况下为对象来创建构造函数,原因在于我们可以通过构造函数重写对象的值，并通过return返回。重写调用构造函数(创建的对象的实例)之后的对象实例的新的值。</p></blockquote><h3 id="9-稳妥构造函数方式">9. 稳妥构造函数方式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, job</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">    o.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person(<span class="string">'Nike'</span>, <span class="number">29</span>, <span class="string">'teacher'</span>);</span><br><span class="line">person.sayName(); <span class="comment">// 使用稳妥构造函数模式只能通过其构造函数内部的方法来获取里面的属性值</span></span><br></pre></td></tr></table></figure><p>道格拉斯·克拉克福德发明了JavaScript中的稳妥对象这个概念。所谓稳妥对象，是指没有公共属性，而且其方法也不引用<code>this</code>对象。稳妥对象最适合在一些安全环境中（这些环境会禁止使用<code>this</code>和<code>new</code>），或者在防止数据被其他应用程序改动时使用。稳妥构造函数遵循的与寄生构造函数类似的模式，但又两点不同：</p><ul><li>一是新创建对象的实例方法不引用<code>this</code>；</li><li>二是不使用<code>new</code>操作符调用构造函数。</li></ul><blockquote><p><strong>注</strong>：与寄生构造函数模式类似，使用稳妥构造函数模式创建的对象与构造函数之间没有什么关系，因此instanceof操作符对这种对象也没有意义。</p></blockquote><h2 id="并发模型和事件循环-event-loop">并发模型和事件循环(event loop)</h2><p>JavaScript 的并发模型基于<strong>事件循环</strong>。</p><p><img src="http://static.blinkfox.com/js_event.png" alt="Js堆栈队列图"></p><h3 id="1-运行时概念">1. 运行时概念</h3><h4 id="栈">栈</h4><p>函数调用形成了一个栈帧。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">return</span> a + b + <span class="number">11</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> y = <span class="number">3</span>;</span><br><span class="line">  <span class="keyword">return</span> foo(x * y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(bar(<span class="number">7</span>));</span><br></pre></td></tr></table></figure><p>当调用 bar 时，创建了第一个帧 ，帧中包含了 bar 的参数和局部变量。当 bar 调用 foo 时，第二个帧就被创建，并被压到第一个帧之上，帧中包含了 foo 的参数和局部变量。当 foo 返回时，最上层的帧就被弹出栈（剩下 bar 函数的调用帧 ）。当 bar 返回的时候，栈就空了。</p><h4 id="堆">堆</h4><p>对象被分配在一个堆中，即用以表示一个大部分非结构化的内存区域。</p><h4 id="队列">队列</h4><p>一个 JavaScript 运行时包含了一个待处理的消息队列。每一个消息都与一个函数相关联。当栈拥有足够内存时，从队列中取出一个消息进行处理。这个处理过程包含了调用与这个消息相关联的函数（以及因而创建了一个初始堆栈帧）。当栈再次为空的时候，也就意味着消息处理结束。</p><h3 id="2-事件循环">2. 事件循环</h3><p>之所以称为<strong>事件循环</strong>，是因为它经常被用于类似如下的方式来实现：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (queue.waitForMessage()) &#123;</span><br><span class="line">  queue.processNextMessage();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果当前没有任何消息，queue.waitForMessage 会等待着同步将要到来的消息。</p><p>每一个消息完整的执行后，其它消息才会被执行。这个模型的一个缺点在于当一个消息的完成耗时过长，网络应用无法处理用户的交互如点击或者滚动。浏览器用“程序需要过长时间运行”的对话框来缓解这个问题。一个比较好的解决方案是使消息处理变短且如果可能的话，将一个消息拆分成几个消息。</p><p>在浏览器里，当一个事件出现且有一个事件监听器被绑定时，消息会被随时添加。如果没有事件监听器，事件会丢失。所以点击一个附带点击事件处理函数的元素会添加一个消息。其它事件亦然。</p><h3 id="3-绝不阻塞">3. 绝不阻塞</h3><p>事件循环(event loop)模型特性在于它<strong>永不阻塞</strong>。通常由事件或者回调函数进行 I/O (input/output)处理 。</p><hr><p>参考文档：</p><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript" target="_blank" rel="noopener">MDN</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;概览&quot;&gt;概览&lt;/h2&gt;
&lt;p&gt;JavaScript 是一种面向对象的动态语言，它包含类型、运算符、标准内置（ built-in）对象和方法。它的语法来源于 Java 和 C，所以这两种语言的许多语法特性同样适用于 JavaScript。需要注意的一个主要区别是 J
      
    
    </summary>
    
      <category term="前端" scheme="https://www.dxain.ml/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JavaScript" scheme="https://www.dxain.ml/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript基础教程</title>
    <link href="https://www.dxain.ml/zh-cn/js-base.html"/>
    <id>https://www.dxain.ml/zh-cn/js-base.html</id>
    <published>2019-04-12T10:13:29.000Z</published>
    <updated>2019-04-13T14:21:43.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-javascript介绍">一、JavaScript介绍</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript" target="_blank" rel="noopener">JavaScript</a>是目前所有主流浏览器上唯一支持的脚本语言，这也是早期<code>JavaScript</code>的唯一用途。其主要作用是在不与服务器交互的情况下修改<code>HTML</code>页面内容，因此其最关键的部分是<code>DOM</code>（文档对象模型），也就是<code>HTML</code>元素的结构。通过<code>Ajax</code>可以使<code>HTML</code>页面通过<code>JavaScript</code>，在不重新加载页面的情况下从服务器上获取数据并显示，大幅提高用户体验。通过<code>JavaScript</code>，使<code>Web</code>页面发展成胖客户端成为可能。</p><h3 id="语言的性质">语言的性质</h3><p>本节对<code>JavaScript</code>的性质做简要介绍，以帮你理解一些疑问。</p><p><code>JavaScript</code>和<code>ECMAScript</code>（JavaScript versus ECMAScript）<br>编程语言称为<code>JavaScript</code>，语言标准被称为<code>ECMAScript</code>。他们有不同名字的原因是因为“Java”已经被注册为商标（属于Oracle）。目前，只有<code>Mozilla</code>被正式允许使用“JavaScript”名称，因为很久以前他们得到一份许可。因此，开放的语言标准拥有不同的名字。当前的<code>JavaScript</code>版本是<code>ECMAScript 6</code>，<code>ECMAScript 7</code>当前是开发版。</p><p><code>JavaScript</code>之父，<code>Brendan Eich</code><a href="http://yanhaijing.com/javascript/2013/06/22/javascript-designing-a-language-in-10-days/" target="_blank" rel="noopener">迅速了创建一门编程语言</a>。（否则，Netscape将使用其他技术）。他借鉴了几门其他语言的一些特性：</p><ul><li>JavaScript借鉴了Java的语法和如何区分原始值和对象。</li><li>JavaScript的函数设计受Scheme和AWK的启发——他们（的函数）都是第一类（first-class）对象，并且在语言中广泛使用。闭包使他们（函数）变成强大的工具。</li><li>Self影响了JavaScript独一无二的面向对象编程(OOP)风格。它的核心思想（在这里我们没有提到）非常优雅，基于此创建的语言非常少。但后面会提到一个简单的模式照顾大部分用例。JavaScript面向对象编程的杀手级特性是你可以直接创建对象。不需要先创建类或其他类似的东西。</li><li>Perl和Python影响了JavaScript字符串，数组和正则表达式的操作。</li></ul><p><code>JavaScript</code>在最初的时候并不是一个完善的语言，因此也导致<code>JavaScript</code>遗留了很多令人诟病的问题。在开发稍大规模的应用时会显得力不从心，但是由于<code>JavaScript</code>本身是一种非常灵活的语言，因此在它的基础上开发程序库比较容易，因此出现了一大批非常优秀的第三方库，如<a href="http://jquery.com/" target="_blank" rel="noopener">jQuery</a>，<a href="http://extjs.org.cn/" target="_blank" rel="noopener">ExtJS</a>，<a href="http://underscorejs.org/" target="_blank" rel="noopener">underscorejs</a>，<a href="http://backbonejs.org/" target="_blank" rel="noopener">backbone</a>等等，由于这些第三方库，<code>JavaScript</code>变得非常简单。其中<code>jQuery</code>的使用非常广泛，它大幅简化了<code>DOM</code>和<code>Ajax</code>，已经成为了很多网站的标配。<code>jQuery</code>虽然基于<code>JavaScript</code>，但它提供了另外一种编程范式，也就是逻辑式编程，与<code>SQL</code>和正则表达式类似。</p><h3 id="javascript能做什么">JavaScript能做什么</h3><p><img src="http://static.blinkfox.com/js1.png" alt="JavaScript项目在Github所占比例"></p><p>如上图，<code>JavaScript</code>作为<a href="https://github.com/" target="_blank" rel="noopener">Github</a>上最流行、最火的编程语言，几乎无所不能。这里是<a href="https://segmentfault.com/u/puyart" target="_blank" rel="noopener">PuYart</a>的关于<a href="https://segmentfault.com/a/1190000003767058" target="_blank" rel="noopener"><code>JavaScript</code>就要统治世界了</a>的文章，可以让我们了解<code>JavaScript</code>到底能做什么的一些介绍。</p><ol><li>Web前端(各种前端工具类库、前端框架、动画效果、数据可视化等)</li><li>服务端开发(<a href="https://nodejs.org/" target="_blank" rel="noopener">Node.js</a>)</li><li>移动应用或者<code>Hybrid App</code>(Cordova)</li><li>桌面应用(<a href="http://nwjs.io/" target="_blank" rel="noopener">NW.js</a>、<a href="http://electron.atom.io/" target="_blank" rel="noopener">Electron</a>)</li><li>游戏(<a href="http://unity3d.com/cn/" target="_blank" rel="noopener">Unity3D</a>、<a href="http://www.cocos.com/doc/article/index?type=cocos2d-x&amp;url=/doc/cocos-docs-master/manual/framework/cocos2d-js/catalog/../1-about-cocos2d-js/1-1-a-brief-history/zh.md" target="_blank" rel="noopener">Cocos2d-js</a>、<a href="http://pomelo.netease.com/" target="_blank" rel="noopener">Pomelo</a>)</li><li>VR(<a href="https://www.phodal.com/blog/why-javascript-will-use-vr-world/" target="_blank" rel="noopener">JavaScript在VR世界的应用</a>)</li><li>硬件、嵌入式物联网等(<a href="http://blog.jobbole.com/46055/" target="_blank" rel="noopener">Tessel：用JavaScript做嵌入式开发</a>)</li><li>操作系统(<a href="http://node-os.com/" target="_blank" rel="noopener">NodeOS</a>)</li></ol><blockquote><p>Atwood’s Law: any application that can be written in JavaScript, will eventually be written in JavaScript.(Atwood定律：凡是能用JavaScript写出来的，最终都会用JavaScript写出来。)</p></blockquote><h2 id="二-javascript语法">二、 JavaScript语法</h2><h3 id="语句和表达式">语句和表达式</h3><p>了解<code>JavaScript</code>的语法，先来了解两个主要的语法类型：语句和表达式。</p><ul><li>语句通常是“做某些事情”。程序是一组语句的序列。举个例子，下面声明（创建）一个变量 <code>foo</code>：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo;</span><br></pre></td></tr></table></figure><ul><li>表达式是产生“值”。他们通常位于赋值操作的右边、函数参数等。举个例子：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span> * <span class="number">7</span></span><br></pre></td></tr></table></figure><p>语句和表达式之间的区别最好通过实例说明，<code>JavaScript</code>（像Java）有两种不同的方式实现<code>if-then-else</code>。一种是用语句：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x;</span><br><span class="line"><span class="keyword">if</span> (y &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">    x = y;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    x = -y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另一种是表达式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = y &gt;= <span class="number">0</span> ? y : -y;</span><br></pre></td></tr></table></figure><p>你可以将后者作为函数参数（但前者不行）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myFunction(y &gt;= <span class="number">0</span> ? y : -y)</span><br></pre></td></tr></table></figure><p>最后，每当<code>JavaScript</code>期待一个语句，你也可以用一个表达式代替。例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">foo(bar(<span class="number">7</span>, <span class="number">1</span>));</span><br></pre></td></tr></table></figure><p><code>foo(...);</code>是一个语句（也叫做表达式语句），<code>bar(7, 1)</code>则是一个表达式。他们都实现函数调用。</p><h3 id="流程控制语句和语句块">流程控制语句和语句块</h3><p>流程控制语句，其语句体可以是单条语句。举两个例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (obj !== <span class="literal">null</span>) obj.foo();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (x &gt; <span class="number">0</span>) x--;</span><br></pre></td></tr></table></figure><p>然而，任何语句总能被语句块代替，花括号包含零或多条语句。因此，你也可以这样写：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (obj !== <span class="literal">null</span>) &#123;</span><br><span class="line">    obj.foo();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (x &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    x--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为便于程序的阅读和维护，推荐使用后一种方式，即语句块方式。</p><h3 id="分号">分号</h3><p><code>JavaScript</code>中的分号是<a href="http://www.2ality.com/2011/05/semicolon-insertion.html" target="_blank" rel="noopener">可选的</a>。但省略（分号）可能会带来意想不到的结果，所以我建议还是写上分号。</p><p>正如上面所看到的，分号作为语句的结尾，但语句块不需要。仅有一种情况下你能看到语句块后面有分号——<strong>函数表达式后面的函数体块</strong>。<strong>表达式作为语句的结尾，后面是分号</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">3</span> * <span class="number">7</span>;</span><br><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; &#125;;</span><br></pre></td></tr></table></figure><h3 id="注释">注释</h3><p><code>JavaScript</code>的注释有两种形式：单行注释和多行注释。单行注释以<code>//</code>开头，以换行符结尾：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x++; <span class="comment">// 单行（single-line）注释</span></span><br></pre></td></tr></table></figure><p>多行注释用<code>/**/</code>包裹</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> 这是多行注释</span></span><br><span class="line"><span class="comment"> 多行哦</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h2 id="三-变量和赋值">三、变量和赋值</h2><p><code>JavaScript</code>中的变量在使用前必须先声明，否则会报错引用错误（Reference Error）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo;  <span class="comment">// 声明变量“foo”</span></span><br></pre></td></tr></table></figure><h3 id="赋值">赋值</h3><p>你可以在声明变量的同时为其赋值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="number">6</span>;</span><br></pre></td></tr></table></figure><p>你也可以给已经存在的变量重新赋值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">foo = <span class="number">4</span>;  <span class="comment">// 更改变量的值</span></span><br></pre></td></tr></table></figure><h3 id="复合赋值操作符">复合赋值操作符</h3><p>有很多复合赋值操作符，例如+=。下面的两个赋值操作等价：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x += <span class="number">1</span>;</span><br><span class="line">x = x + <span class="number">1</span>;</span><br></pre></td></tr></table></figure><h3 id="标识符和变量名">标识符和变量名</h3><p>标识符就是事物的名字，在<code>JavaScript</code>中他们扮演不同的语法角色。例如，变量的名称是一个标识符。</p><p>大体上，标识符的第一个字符可以是任何<code>Unicode</code>字符、美元标志符（$）或下划线（_）。后面可以是任意字符和数字。因此，下面全是合法的标识符：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">arg0</span><br><span class="line">_tmp</span><br><span class="line">$elem</span><br><span class="line">π</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>：首字符不能是数字，如果是数字的话，该如何区分是数字还是变量呢？</p></blockquote><p>一些标识符是“保留关键字”——他们是语法的一部分，不能用作变量名。从技术上讲，下面三个标识符不是保留字，但也不应该作为变量名：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">Infinity</span> <span class="literal">NaN</span> <span class="literal">undefined</span></span><br></pre></td></tr></table></figure><h2 id="四-值">四、值</h2><p><code>JavaScript</code>有所有我们期待的编程语言值类型：布尔，数字，字符串，数组等。<code>JavaScript</code>中的所有值都有属性。每个属性有一个键（或名字）和一个值。你可以使用点（.）操作符读取属性：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">value.propKey</span><br></pre></td></tr></table></figure><p>举个例子：字符串<code>abc</code>有属性<code>lenght</code>（长度）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'abc'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.length); <span class="comment">// 得到3</span></span><br></pre></td></tr></table></figure><p>上面的代码也可以写成下面这样：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'abc'</span>.length <span class="comment">// 得到3</span></span><br></pre></td></tr></table></figure><p>点操作符也可以用来给属性赋值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;  <span class="comment">// 空对象</span></span><br><span class="line">obj.foo = <span class="number">123</span>; <span class="comment">// 创建属性“foo”，设置它为123</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.foo); <span class="comment">// 得到123</span></span><br></pre></td></tr></table></figure><p>你也可以通过它（.）调用方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'hello'</span>.toUpperCase(); <span class="comment">// 得到HELLO</span></span><br></pre></td></tr></table></figure><p>上面，我们在值<code>hello</code>上面调用方法<code>toUpperCase()</code>。</p><h3 id="原始类型值和对象">原始类型值和对象</h3><p>JavaScript定义了不同值之间的区别：</p><ul><li>原始值包括：<code>boolean</code>，<code>number</code>，<code>string</code>，<code>null</code>和<code>undefined</code>。</li><li>所有其他的值都是对象。实际上对象被定义为——所有不为原始值的值。</li></ul><p>两者之间的主要区别在于他们是如何被比较的：每一个对象有一个独一无二的标志，并且仅和自己相等：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = &#123;&#125;;  <span class="comment">// 一个空对象</span></span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;&#125;;  <span class="comment">// 另一个空对象</span></span><br><span class="line">obj1 === obj2   <span class="comment">// false</span></span><br><span class="line">obj1 === obj1   <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>相反，所有原始值只要编码值相同就被认为是相同的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> prim1 = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">var</span> prim2 = <span class="number">123</span>;</span><br><span class="line">prim1 === prim2 <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="原始类型值">原始类型值</h3><p>下面全是原始类型值（简称：原始值）：</p><ul><li><p>布尔类型：true，false</p></li><li><p>数字类型：1736，1.351</p></li><li><p>字符串类型: ‘abc’，”abc”</p></li><li><p>两个“无值（non-values）”：undefined，null<br>原始值的特征：</p></li><li><p><strong>值做比较时,“内容”做比较</strong>。</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span> === <span class="number">3</span> <span class="comment">// true</span></span><br><span class="line"><span class="string">'abc'</span> === <span class="string">'abc'</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure><ul><li><strong>无法更改</strong>：值的属性无法更改，无法添加和移除属性，获取未知属性总返回undefined。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'abc'</span>;</span><br><span class="line">str.foo = <span class="number">3</span>; <span class="comment">// try to create property `foo` ⇒ no effect</span></span><br><span class="line">str.foo  <span class="comment">// unknown property ⇒  undefined</span></span><br></pre></td></tr></table></figure><h3 id="对象">对象</h3><h4 id="对象的类型">对象的类型</h4><p>所有非原始值的值都是对象。最常见的几种对象类型是：</p><ul><li>简单对象（类型是<code>Object</code>）能通过对象字面量创建：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    firstName: ‘Jane’, </span><br><span class="line">    lastName: ‘Doe’</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的对象有两个属性：<code>firstName</code>属性的值是“Jane”，<code>lastName</code>属性的值是“Doe”。</p><ul><li>数组（类型是<code>Array</code>）能通过数组字面量创建：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ ‘apple’, ‘banana’, ‘cherry’ ]</span><br></pre></td></tr></table></figure><p>上面的数组有三个元素，可以通过数字索引访问。例如“apple”的索引是0。</p><ul><li>正则表达式对象（类型是<code>RegExp</code>）能通过正则表达式字面量创建。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/^a+b+$/</span><br></pre></td></tr></table></figure><h4 id="对象的特征">对象的特征</h4><ul><li><strong>比较的是引用</strong>：比较的是标识符，每个值有自己的标识符。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#125; === &#123;&#125;  <span class="comment">// 两个不同的空对象, false</span></span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> obj2 = obj1;</span><br><span class="line">obj1 === obj2   <span class="comment">// true</span></span><br></pre></td></tr></table></figure><ul><li><strong>默认可以更改</strong>。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">obj.foo = <span class="number">123</span>;</span><br><span class="line">obj.foo <span class="comment">//123</span></span><br></pre></td></tr></table></figure><p>所有的数据结构（如数组）都是对象，但并不是所有的对象都是数据结构。例如：正则表达式是对象，但不是数据结构。</p><h3 id="undefined-和-null">undefined 和 null</h3><p><code>JavaScript</code>有两个“无值）”：<code>undefined</code>和<code>null</code>。</p><p><code>undefined</code>的意思是“没有值”。未初始化的变量是<code>undefined</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo;</span><br><span class="line">foo <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>读取不存在的属性时，将返回<code>undefined</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">var</span> obj = &#123;&#125;; <span class="comment">// 空对象</span></span><br><span class="line">&gt; obj.foo <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>缺省的参数也是<code>undefined</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line">f(); <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure><p><code>null</code>的意思是“没有对象”。它被用来表示对象的无值（参数，链上的对象等）。</p><p>通常情况下你应该把<code>undefined</code>和<code>null</code>看成是等价的，如果他们代表相同意义的无值的话。检查他们的一种方式是通过严格比较：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (x === <span class="literal">undefined</span> || x === <span class="literal">null</span>) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另一种在实际中使用的方法是认为undefined 和 null 都是false：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!x) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>警告</strong>：false，0，NaN 和 “” 都被当作false。</p></blockquote><h3 id="包装类型">包装类型</h3><p>对象类型的实例<code>Foo</code>（包括内建类型，例如Array和其他自定义类型）从对象<code>Foo.prototype</code>上获取方法。你可以通过读取这个方法的方式（不是调用）验证这点：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[].push === <span class="built_in">Array</span>.prototype.push  <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>相反，<strong>原始类型是没有类型的，所以每个原始类型有一个关联类型，称之为包装类型</strong>：</p><ul><li>布尔值的包装类型是 Boolean。布尔值从Boolean.prototype上获取方法：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="literal">true</span>.toString === <span class="built_in">Boolean</span>.prototype.toString    <span class="comment">//true</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：包装类型名字的首字母是大写的B。如果在JavaScript中布尔值的类型可以访问，那么它可能会被转换为布尔对象。</p></blockquote><ul><li>数字值的包装类型是<code>Number</code>。</li><li>字符串值的包装类型是<code>String</code>。</li></ul><p>包装类型也有实例（他们的实例是对象），但不常用。相反，包装类型有其他用处：<strong>如果你将他们作为函数调用，他们可以将值转换为原始类型</strong>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Number</span>(<span class="string">'123'</span>) <span class="comment">//123</span></span><br><span class="line"><span class="built_in">String</span>(<span class="literal">true</span>)  <span class="comment">//'true'</span></span><br></pre></td></tr></table></figure><h3 id="通过typeof和instanceof将值分类">通过typeof和instanceof将值分类</h3><p>有两个操作符可以用来将值分类：<code>typeof</code>主要用于原始值，<code>instanceof</code>主要用于对象。</p><h4 id="typeof-使用方法如下：">typeof 使用方法如下：</h4><p><code>typeof «value»</code></p><p><code>typeof</code>返回描述<code>value</code>“类型”的一个字符串。例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="literal">true</span> <span class="comment">//'boolean'</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="string">'abc'</span> <span class="comment">//'string'</span></span><br><span class="line"><span class="keyword">typeof</span> &#123;&#125; <span class="comment">// 空对象字面量,'object'</span></span><br><span class="line"><span class="keyword">typeof</span> [] <span class="comment">// 空数组字面量,'object'</span></span><br></pre></td></tr></table></figure><p>下面列出了<code>typeof</code>操作的所有结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">操作数 结果</span><br><span class="line">undefined&apos;undefined&apos;</span><br><span class="line">null&apos;object&apos;</span><br><span class="line">Boolean value&apos;boolean&apos;</span><br><span class="line">Number value&apos;number&apos;</span><br><span class="line">String value&apos;string&apos;</span><br><span class="line">Function&apos;function&apos;</span><br><span class="line">All other values&apos;object&apos;</span><br></pre></td></tr></table></figure><p>有两个结果和我们上面说的的原始值与对象是矛盾的：</p><ul><li>函数的类型是<code>function</code>而不是<code>object</code>。因为函数（类型为“function”）是对象（类型是对象）的子类型，这不是一个错误。</li><li><code>null</code>的类型是<code>object</code>。这是一个bug，但从没被修复，因为修复后会破坏现有的代码。</li></ul><h4 id="instanceof使用方法如下：">instanceof使用方法如下：</h4><p><code>«value» instanceof «Constr»</code></p><p>如果<code>value</code>是一个对象，并且<code>value</code> 是由构造函数<code>Constr</code>创建的（参考：类）。例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> Bar();  <span class="comment">// 通过构造函数Bar创建对象</span></span><br><span class="line">b <span class="keyword">instanceof</span> Bar    <span class="comment">//true</span></span><br><span class="line">&#123;&#125; <span class="keyword">instanceof</span> <span class="built_in">Object</span>    <span class="comment">//true</span></span><br><span class="line">[] <span class="keyword">instanceof</span> <span class="built_in">Array</span> <span class="comment">//true</span></span><br></pre></td></tr></table></figure><h3 id="深入阅读">深入阅读</h3><ul><li><a href="http://yanhaijing.com/javascript/2014/01/05/exploring-the-abyss-of-null-and-undefined-in-javascript/" target="_blank" rel="noopener">探索JavaScript中Null和Undefined的深渊</a></li></ul><h2 id="五-布尔">五、布尔</h2><p>布尔类型原始值包括<code>true</code>和<code>false</code>。下面的操作符会得到布尔值：</p><ul><li>二元逻辑运算符：&amp;&amp;（与），||（或）</li><li>前缀逻辑运算符：!（非）</li><li>等值运算符：=== !== == !=</li><li>比较运算符（字符串或数字）：&gt; &gt;= &lt; &lt;=</li></ul><h3 id="真值和假值">真值和假值</h3><p>每当<code>JavaScript</code>希望一个布尔值时（例如：if语句的条件），可以使用任何值。它将被理解（转换）为<code>true</code>或<code>false</code>。下面的值被理解为<code>false</code>：</p><ul><li>undefined, null</li><li>布尔: false</li><li>数字: 0, NaN</li><li>字符串: ‘’</li></ul><p>所有其他值被认为<code>true</code>。被理解为<code>false</code>的值称为假值，被理解为<code>true</code>的值称为真值。可以使用<code>Boolean</code>作为函数，测试值被理解为什么。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Boolean</span>(<span class="literal">undefined</span>)  <span class="comment">//false</span></span><br><span class="line"><span class="built_in">Boolean</span>(<span class="number">0</span>)    <span class="comment">//false</span></span><br><span class="line"><span class="built_in">Boolean</span>(<span class="number">3</span>)    <span class="comment">//true</span></span><br></pre></td></tr></table></figure><h3 id="二元逻辑运算符">二元逻辑运算符</h3><p><code>JavaScript</code>中的<strong>二元逻辑运算符是短路运算</strong>——如果第一个操作数可以确定结果，第二个操作数将不被验证（运算）。例如，在下面的代码中，函数<code>foo()</code>永远不会被调用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">false</span> &amp;&amp; foo()</span><br><span class="line"><span class="literal">true</span> || foo()</span><br></pre></td></tr></table></figure><p>此外，<strong>二元逻辑运算符会返回操作数中的一个</strong>，可能是一个布尔值，也可能不是。</p><ul><li><strong>与</strong>：如果第一个操作数是假值，返回第一个。否则返回第二个操作数。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">NaN</span> &amp;&amp; <span class="string">'abc'</span>    <span class="comment">//NaN</span></span><br><span class="line"><span class="number">123</span> &amp;&amp; <span class="string">'abc'</span>    <span class="comment">//'abc'</span></span><br></pre></td></tr></table></figure><ul><li><strong>或</strong>：如果第一个操作数是真值，返回第一个。否则，返回第二个操作数。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'abc'</span> || <span class="number">123</span>    <span class="comment">//'abc'</span></span><br><span class="line"><span class="string">''</span> || <span class="number">123</span>   <span class="comment">//123</span></span><br></pre></td></tr></table></figure><h3 id="等值运算符">等值运算符</h3><p>在<code>JavaScript</code>中检测相等，你可以使用严格相等（<code>===</code>）和严格不等（<code>!==</code>）。或者你也可以使用非严格相等（<code>==</code>）和非严格不等（<code>!=</code>）。</p><blockquote><p><strong>经验规则：总是用严格运算符，假装非严格运算符不存在。严格相等更安全。</strong></p></blockquote><h3 id="深入阅读-v2">深入阅读</h3><ul><li><a href="http://yanhaijing.com/javascript/2014/04/25/strict-equality-exemptions/" target="_blank" rel="noopener">在JavaScript中什么时候使用==是正确的？</a></li></ul><h2 id="六-数字">六、数字</h2><p><code>JavaScript</code>中的<strong>所有数字都是浮点型</strong>（虽然大部分的JavaScript引擎内部也使用整数）。至于为什么这样设计，查看这里（<a href="http://yanhaijing.com/javascript/2014/03/14/what-every-javascript-developer-should-know-about-floating-points" target="_blank" rel="noopener">每一个JavaScript开发者应该了解的浮点知识</a>）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> === <span class="number">1.0</span>   <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>特殊数字：</p><ul><li><code>NaN</code> (“不是一个数字 not a number”): 错误值。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Number</span>(<span class="string">'xyz'</span>)  <span class="comment">// 'xyz' 不能被转换为数字得到:NaN</span></span><br></pre></td></tr></table></figure><ul><li><code>Infinity</code>：也是最大错误值（无穷大）</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span> / <span class="number">0</span>   <span class="comment">//Infinity</span></span><br><span class="line"><span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">1024</span>)  <span class="comment">// 数字太大了,得到Infinity</span></span><br></pre></td></tr></table></figure><p><code>Infinity</code>有时很有用，因为它比任何其他数字都大。同样，<code>-Infinity</code> 比其他任何数字都小。</p><ul><li><code>JavaScript</code>有两个零，<code>+0</code>和<code>-0</code>。它（js引擎）通常不让你看到，并简单将两个零都显示为0：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">+<span class="number">0</span>  <span class="comment">//0</span></span><br><span class="line"><span class="number">-0</span>  <span class="comment">//0</span></span><br></pre></td></tr></table></figure><p>因此最好假装只有一个零（正如我们看到假值时所做的那样：<strong>-0 和 +0 都是假值</strong>）。</p><h3 id="运算符">运算符</h3><p><code>JavaScript</code>中有下列算数运算符：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">加: number1 + number2</span><br><span class="line">减: number1 - number2</span><br><span class="line">乘: number1 * number2</span><br><span class="line">除: number1 / number2</span><br><span class="line">模: number1 % number2</span><br><span class="line">自增: ++variable, variable++</span><br><span class="line">自减: –variable, variable–</span><br><span class="line">负值: -value</span><br><span class="line">正值（转换为数字）: +value</span><br></pre></td></tr></table></figure><p>全局对象<code>Math</code>通过函数提供更多算数运算操作。</p><p><code>JavaScript</code>中也有位运算符（例如：&amp;）。</p><h2 id="七-字符串">七、字符串</h2><p>字符串可以直接通过字符串字面量创建。这些字面量被单引号或双引号包裹。反斜线（\）转义字符并且产生一些控制字符。例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'abc'</span></span><br><span class="line"><span class="string">"abc"</span></span><br><span class="line"></span><br><span class="line"><span class="string">'Did she say "Hello"?'</span></span><br><span class="line"><span class="string">"Did she say \"Hello\"?"</span></span><br><span class="line"></span><br><span class="line"><span class="string">'That\'s nice!'</span></span><br><span class="line"><span class="string">"That's nice!"</span></span><br><span class="line"></span><br><span class="line"><span class="string">'Line 1\nLine 2'</span>  <span class="comment">// 换行</span></span><br><span class="line"><span class="string">'Backlash: \\'</span></span><br></pre></td></tr></table></figure><p>可以通过方括号访问单个字符：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'abc'</span>;</span><br><span class="line">str[<span class="number">1</span>]    <span class="comment">//'b'</span></span><br></pre></td></tr></table></figure><p><code>length</code>属性是字符串的字符数量。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'abc'</span>.length  <span class="comment">//3</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>提醒</strong>：字符串是不可变的，如果你想改变现有字符串，你需要创建一个新的字符串。</p></blockquote><h3 id="字符串运算符">字符串运算符</h3><p>字符串可以通过加号操作符（+）拼接，如果其中一个操作数为字符串，会将另一个操作数也转换为字符串。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> msgCount = <span class="number">3</span>;</span><br><span class="line"><span class="string">'You have '</span>+ msgCount + <span class="string">' messages'</span> <span class="comment">//'You have 3 messages'</span></span><br></pre></td></tr></table></figure><p>连续执行拼接操作可以使用<code>+=</code>操作符：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">''</span>;</span><br><span class="line">str += <span class="string">'Multiple '</span>;</span><br><span class="line">str += <span class="string">'pieces '</span>;</span><br><span class="line">str += <span class="string">'are concatenated.'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str); <span class="comment">//'Multiple pieces are concatenated.'</span></span><br></pre></td></tr></table></figure><h3 id="字符串方法">字符串方法</h3><p>字符串有许多有用的方法。例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'abc'</span>.slice(<span class="number">1</span>)  <span class="comment">// 复制子字符串,得到索引1及其之后的字符串，即：'bc'</span></span><br><span class="line"><span class="string">'abc'</span>.slice(<span class="number">1</span>, <span class="number">2</span>)   <span class="comment">//得到索引1和2之间的字符串，即：'b'</span></span><br><span class="line"></span><br><span class="line"><span class="string">'\t xyz  '</span>.trim()  <span class="comment">// 移除空白字符，即：'xyz'</span></span><br><span class="line"></span><br><span class="line"><span class="string">'mjölnir'</span>.toUpperCase()   <span class="comment">//转成大写，即：'MJÖLNIR'</span></span><br><span class="line"></span><br><span class="line"><span class="string">'abc'</span>.indexOf(<span class="string">'b'</span>)  <span class="comment">// 查找第一个b的索引，即：1</span></span><br><span class="line"><span class="string">'abc'</span>.indexOf(<span class="string">'x'</span>)    <span class="comment">//没有返回-1</span></span><br></pre></td></tr></table></figure><h2 id="八-语句">八、语句</h2><h3 id="条件-conditionals">条件（Conditionals）</h3><p><code>if</code>语句通过布尔条件决定执行那个分支：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (myvar === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// then</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (myvar === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// then</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// else</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (myvar === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// then</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (myvar === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">// else-if</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (myvar === <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="comment">// else-if</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// else</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面的<code>switch</code>语句，furit的值决定那个分支被执行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (fruit) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'banana'</span>:</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'apple'</span>:</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:  <span class="comment">// 所有其他情况</span></span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="循环-loops">循环（Loops）</h3><p>for 循环的格式如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(初始化; 当条件成立时循环; 下一步操作)</span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arr[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当条件成立时<code>while</code>循环继续循环它的循环体。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 和上面的for循环相等</span></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt; arr.length) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arr[i]);</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当条件成立时，<code>do-while</code>循环继续循环。由于条件位于循环体之后，所以循环体总是被至少至少执行一次。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125; <span class="keyword">while</span>(条件);</span><br></pre></td></tr></table></figure><p>在所有的循环中：</p><ul><li>break中断循环</li><li>continue开始一个新的循环迭代</li></ul><h2 id="九-函数">九、函数</h2><p>定义函数的一种方法是通过函数声明：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">param1, param2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> param1 + param2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码定义一个名称叫做<code>add</code>的函数，有两个参数<code>param1</code>和<code>param2</code>，并且返回参数的和。下面是如何调用这个函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">6</span>, <span class="number">1</span>)   <span class="comment">//7</span></span><br><span class="line">add(<span class="string">'a'</span>, <span class="string">'b'</span>)   <span class="comment">//'ab'</span></span><br></pre></td></tr></table></figure><p>另一种定义<code>add()</code>函数的方法是通过函数表达式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> add = <span class="function"><span class="keyword">function</span> (<span class="params">param1, param2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> param1 + param2;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>函数表达式产生一个值，因此可以直接将函数作为参数传递给其他函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">someOtherFunction(<span class="function"><span class="keyword">function</span> (<span class="params">p1, p2</span>) </span>&#123; ... &#125;);</span><br></pre></td></tr></table></figure><h3 id="函数声明提升">函数声明提升</h3><p>函数声明会被提升，他们全被移动到当前作用域开始之处。这允许你在函数声明之前调用它们：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    bar();  <span class="comment">// 没问题，bar被提升</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>：虽然变量声明也会被提升，但赋值的过程不会被提升：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    bar();  <span class="comment">// 有问题，bar是undefined</span></span><br><span class="line">    <span class="keyword">var</span> bar = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="特殊变量参数">特殊变量参数</h3><p><strong>在<code>JavaScript</code>中你可以调用任意函数并传递任意数量的参数</strong>——语言绝不会“抱怨”（参数检测）。都可以正常工作，然而，使所有参数可访问需要通过特殊变量<code>arguments</code>。<code>arguments</code>看起来像数组，但它没有数组的方法（称为类数组 array-like）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="built_in">arguments</span> &#125;</span><br><span class="line"><span class="keyword">var</span> args = f(<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>);</span><br><span class="line">args.length <span class="comment">//3</span></span><br><span class="line">args[<span class="number">0</span>]  <span class="comment">// 获取索引为0的元素,'a'</span></span><br></pre></td></tr></table></figure><h3 id="太多或太少参数">太多或太少参数</h3><p>让我们通过下面的函数探索<code>JavaScript</code>中传递太多或太少参数时如何处理</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(x, y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>多出的参数将被忽略（可以通过<code>arguments</code>访问）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f(<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>)    <span class="comment">//a b</span></span><br></pre></td></tr></table></figure><p>缺少的参数将会是<code>undefined</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">f(<span class="string">'a'</span>)    <span class="comment">//a undefined</span></span><br><span class="line">f() <span class="comment">//undefined undefined</span></span><br></pre></td></tr></table></figure><h3 id="可选参数">可选参数</h3><p>下面是一个常见模式，给参数设置默认值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pair</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">    x = x || <span class="number">0</span>;  <span class="comment">// (*)</span></span><br><span class="line">    y = y || <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> [ x, y ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>（*）</code>这行，如果x是真值（除了：<code>null</code>，<code>undefined</code> 等）， 操作符返回x。否则，它返回第二个操作数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pair()  <span class="comment">//[ 0, 0 ]</span></span><br><span class="line">pair(<span class="number">3</span>) <span class="comment">//[ 3, 0 ]</span></span><br><span class="line">pair(<span class="number">3</span>, <span class="number">5</span>)  <span class="comment">//[ 3, 5 ]</span></span><br></pre></td></tr></table></figure><h3 id="强制数量">强制数量</h3><p>如果你想强制参数的数量，你可以检测<code>arguments.length</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pair</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">arguments</span>.length !== <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Need exactly 2 arguments'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="将arguments-转换为数组">将arguments 转换为数组</h3><p><code>arguments</code>不是一个数组，它仅仅是类数组（array-like）：它有一个<code>length</code>属性，并且你可以通过方括号索引方式访问它的元素。然而，你不能移除元素，或在它上面调用任何数组方法。因此，有时你需要将其转换为数组。这就是下面函数的作用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toArray</span>(<span class="params">arrayLikeObject</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [].slice.call(arrayLikeObject);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="十-异常处理">十、异常处理</h2><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch" target="_blank" rel="noopener">异常处理</a>最常见的方式像下面这样：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throwException</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Problem!'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    throwException();</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e);  <span class="comment">// 错误：信息</span></span><br><span class="line">    <span class="built_in">console</span>.log(e.stack);  <span class="comment">// 非标准，但大部分浏览器支持</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>try分支包裹易出错的代码，如果try分支内部抛出异常，catch分支将会执行。</p><h2 id="十一-严格模式">十一、严格模式</h2><p>严格模式开启检测和一些其他措施，使<code>JavaScript</code>变成更整洁的语言。推荐使用严格模式。为了开启严格模式，只需在<code>JavaScript</code>文件或<code>script</code>标签第一行添加如下语句：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br></pre></td></tr></table></figure><p>你也可以在每个函数上选择性开启严格模式，只需将上面的代码放在函数的开头：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">functionInStrictMode</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">    'use strict'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面的两小节看下严格模式的三大好处。</p><h3 id="明确错误">明确错误</h3><p>让我们看一个例子，严格模式给我们明确的错误，否则<code>JavaScript</code>总是静默失败：下面的函数<code>f()</code> 执行一些非法操作，它试图更改所有字符串都有的只读属性——<code>length</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="string">'abc'</span>.length = <span class="number">5</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当你调用上面的函数，它静默失败，赋值操作被简单忽略。让我们将<code>f()</code>在严格模式下运行：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f_strict</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">    'use strict'</span>;</span><br><span class="line">    <span class="string">'abc'</span>.length = <span class="number">5</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在浏览器报给我们一些错误：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f_strict()  <span class="comment">// TypeError: Cannot assign to read only property 'length' of abc</span></span><br></pre></td></tr></table></figure><h3 id="不是方法的函数中的this">不是方法的函数中的this</h3><p>在严格模式下，不作为方法的函数中的<code>this</code>值是<code>undefined</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f_strict</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">    'use strict'</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(f_strict() === <span class="literal">undefined</span>);  <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>在非严格模式下，<code>this</code>的值是被称作全局对象（<code>global object</code>）（在浏览器里是<code>window</code>）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(f() === <span class="built_in">window</span>);  <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="不再自动创建全局变量">不再自动创建全局变量</h3><p>在非严格模式下，如果你给不存在的变量赋值，<code>JavaScript</code>会自动创建一个全局变量：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123; foo = <span class="number">5</span> &#125;</span><br><span class="line">f()  <span class="comment">// 不会报错</span></span><br><span class="line">foo <span class="comment">// 5</span></span><br></pre></td></tr></table></figure><p>在严格模式下，这会产生一个错误：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f_strict</span>(<span class="params"></span>) </span>&#123; <span class="string">'use strict'</span>; foo2 = <span class="number">4</span>; &#125;</span><br><span class="line">f_strict()  <span class="comment">// ReferenceError: foo2 is not defined</span></span><br></pre></td></tr></table></figure><h3 id="深入阅读-v3">深入阅读</h3><ul><li><a href="http://yanhaijing.com/javascript/2013/12/28/demystifying-this-in-javascript" target="_blank" rel="noopener">揭秘javascript中谜一样的this</a></li><li><a href="http://yanhaijing.com/javascript/2014/04/30/javascript-this-keyword" target="_blank" rel="noopener">JavaScript中的this关键字</a></li></ul><h2 id="十二-变量作用域和闭包">十二、变量作用域和闭包</h2><p>在<code>JavaScript</code>中，你必须使用变量之前，通过<code>var</code>声明变量：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x;</span><br><span class="line">x = <span class="number">3</span>;</span><br><span class="line">y = <span class="number">4</span>;  <span class="comment">// ReferenceError: y is not defined</span></span><br></pre></td></tr></table></figure><p>你可以用一条<code>var</code>语句声明和初始化多个变量：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">1</span>, y = <span class="number">2</span>, z = <span class="number">3</span>;</span><br></pre></td></tr></table></figure><p>但我建议每个变量使用一条语句。因此，我将上面的语句重写为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> y = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">var</span> z = <span class="number">3</span>;</span><br></pre></td></tr></table></figure><p>由于提升（见下文），最好在函数顶部声明变量。</p><h3 id="变量和函数作用域">变量和函数作用域</h3><p>变量的作用域总是整个函数（没有块级作用域）。例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="number">-3</span>;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>) &#123;  <span class="comment">// (*)</span></span><br><span class="line">        <span class="keyword">var</span> tmp = -x;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(tmp);  <span class="comment">// 3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以看到tmp变量不仅在（*）所在行的语句块存在，它在整个函数内都存在。</p><h3 id="变量提升">变量提升</h3><p>变量声明会被提升：声明会被移到函数的顶部，但赋值过程不会。举个例子，在下面的函数中<code>（*）</code>行位置声明了一个变量。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(tmp); <span class="comment">// undefined</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">false</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> tmp = <span class="number">3</span>;  <span class="comment">// (*)</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在内部，上面的函数被执行像下面这样：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> tmp;  <span class="comment">// declaration is hoisted</span></span><br><span class="line">    <span class="built_in">console</span>.log(tmp);</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">false</span>) &#123;</span><br><span class="line">        tmp = <span class="number">3</span>;  <span class="comment">// assignment stays put</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="闭包">闭包</h3><p>每个函数保持和函数体内部变量的连接，甚至离开创建它的作用域之后。例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createIncrementor</span>(<span class="params">start</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;  <span class="comment">// (*)</span></span><br><span class="line">        <span class="keyword">return</span> start++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>（*）</code>行开始的函数在它创建时保留上下文，并在内部保存一个<code>start</code>活动值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> inc = createIncrementor(<span class="number">5</span>);</span><br><span class="line">inc()   <span class="comment">// 5</span></span><br><span class="line">inc() <span class="comment">// 6</span></span><br><span class="line">inc()   <span class="comment">// 7</span></span><br></pre></td></tr></table></figure><p>闭包是一个函数加上和其作用域链的链接。因此，<code>createIncrementor()</code>返回的是一个闭包。</p><h3 id="iife：模拟块级作用域">IIFE：模拟块级作用域</h3><p>有时你想模拟一个块，例如你想将变量从全局作用域隔离。完成这个工作的模式叫做 <code>IIFE</code>(立即执行函数表达式(<code>Immediately Invoked Function Expression</code>))：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;  <span class="comment">// 块开始</span></span><br><span class="line">    <span class="keyword">var</span> tmp = ...;  <span class="comment">// 非全局变量</span></span><br><span class="line">&#125;());  <span class="comment">// 块结束</span></span><br></pre></td></tr></table></figure><p>上面你会看到函数表达式被立即执行。外面的括号用来阻止它被解析成函数声明；只有函数表达式能被立即调用。函数体产生一个新的作用域并使<code>tmp</code>变为局部变量。</p><h3 id="闭包实现变量共享">闭包实现变量共享</h3><p>下面是个经典问题，如果你不知道，会让你费尽思量。因此，先浏览下，对问题有个大概的了解。</p><p>闭包保持和外部变量的连接，有时可能和你想像的行为不一致：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">    result.push(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> i &#125;);  <span class="comment">// (*)</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(result[<span class="number">1</span>]()); <span class="comment">// 5 (不是 1)</span></span><br><span class="line"><span class="built_in">console</span>.log(result[<span class="number">3</span>]()); <span class="comment">// 5 (不是 3)</span></span><br></pre></td></tr></table></figure><p><code>(*)</code>行的返回值总是当前的i值，而不是当函数被创建时的i值。当循环结束后，i的值是5，这是为什么数组中的所有函数的返回值总是一样的。如果你想捕获当前变量的快照，你可以使用<code>IIFE</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">    (<span class="function"><span class="keyword">function</span> (<span class="params">i2</span>) </span>&#123;</span><br><span class="line">        result.push(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> i2 &#125;);</span><br><span class="line">    &#125;(i));  <span class="comment">// 复制当前的i</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>深入阅读</p><ul><li><a href="http://yanhaijing.com/javascript/2013/08/30/understanding-scope-and-context-in-javascript" target="_blank" rel="noopener">认识javascript中的作用域和上下文</a></li><li><a href="http://yanhaijing.com/javascript/2014/04/30/JavaScript-Scoping-and-Hoisting" target="_blank" rel="noopener">JavaScript的作用域和提升机制</a></li><li><a href="http://yanhaijing.com/javascript/2014/04/29/what-is-the-execution-context-in-javascript" target="_blank" rel="noopener">了解JavaScript的执行上下文</a></li></ul><h2 id="十三-对象和继承">十三、对象和继承</h2><p>和所有的值类型一样，对象有属性。事实上，你可以将对象当作一组属性的集合，每个属性都是一对（键和值）。键是字符串，值可以是任意<code>JavaScript</code>值。到目前为止，我们仅仅见过键是标识符的属性，因为点操作符处理的键必须为标识符。在这节，你讲见到另一种访问属性的方法，能将任意字符串作为键。</p><h3 id="单个对象">单个对象</h3><p>在<code>JavaScript</code>中，你可以直接创建对象，通过对象字面量：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> jane = &#123;</span><br><span class="line">    name: <span class="string">'Jane'</span>,</span><br><span class="line"></span><br><span class="line">    describe: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">        'use strict'</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'Person named '</span>+<span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>上面的对象有两个属性：<code>name</code>和<code>describe</code>。你能读（“get”）和 写（“set”）属性：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">jane.name  <span class="comment">// get，'Jane'</span></span><br><span class="line">jane.name = <span class="string">'John'</span>;  <span class="comment">// set</span></span><br><span class="line">jane.newProperty = <span class="string">'abc'</span>;  <span class="comment">// 自动创建</span></span><br></pre></td></tr></table></figure><p>属性是函数如<code>describe</code>可以被当作方法调用。当调用他们时可以在它们内部通过this引用对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">jane.describe()  <span class="comment">// 调用方法,'Person named John'</span></span><br><span class="line">jane.name = <span class="string">'Jane'</span>;</span><br><span class="line">jane.describe() <span class="comment">// 'Person named Jane'</span></span><br></pre></td></tr></table></figure><p><code>in</code>操作符用来检测一个属性是否存在：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'newProperty'</span> <span class="keyword">in</span> jane   <span class="comment">// true</span></span><br><span class="line"><span class="string">'foo'</span> <span class="keyword">in</span> jane   <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>若读取一个不存在的属性，将会得到<code>undefined</code>值。因此上面的两个检查也可以像下面这样：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jane.newProperty !== <span class="literal">undefined</span>  <span class="comment">// true</span></span><br><span class="line">jane.foo !== <span class="literal">undefined</span>  <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p><code>delete</code>操作符用来删除一个属性：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> jane.newProperty <span class="comment">//true</span></span><br><span class="line"><span class="string">'newProperty'</span> <span class="keyword">in</span> jane   <span class="comment">//false</span></span><br></pre></td></tr></table></figure><h3 id="任意键属性">任意键属性</h3><p>属性的键可以是任意字符串。到目前为止，我们看到的对象字面量中的和点操作符后的属性关键字。按这种方法你只能使用标识符。如果你想用其他任意字符串作为键名，你必须在对象字面量里加上引号，并使用方括号获取和设置属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="string">'not an identifier'</span>: <span class="number">123</span> &#125;;</span><br><span class="line">obj[<span class="string">'not an identifier'</span>]    <span class="comment">//123</span></span><br><span class="line">obj[<span class="string">'not an identifier'</span>] = <span class="number">456</span>;</span><br></pre></td></tr></table></figure><p>方括号允许你动态计算属性关键字：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="string">'name'</span>;</span><br><span class="line">jane[x]; <span class="comment">// 'Jane'</span></span><br><span class="line">jane[<span class="string">'na'</span>+<span class="string">'me'</span>]; <span class="comment">// 'Jane'</span></span><br></pre></td></tr></table></figure><h3 id="引用方法">引用方法</h3><p>如果你引用一个方法，它将失去和对象的连接。就其本身而言，函数不是方法，其中的<code>this</code>值为<code>undefined</code>（严格模式下）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> func = jane.describe;</span><br><span class="line">func()  <span class="comment">// TypeError: Cannot read property 'name' of undefined</span></span><br></pre></td></tr></table></figure><p>解决办法是使用函数内置的<code>bind()</code>方法。它创建一个新函数，其<code>this</code>值固定为给定的值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> func2 = jane.describe.bind(jane);</span><br><span class="line">func2() <span class="comment">// 'Person named Jane'</span></span><br></pre></td></tr></table></figure><h3 id="方法内部的函数">方法内部的函数</h3><p>每个函数都有一个特殊变量<code>this</code>。如果你在方法内部嵌入函数是很不方便的，因为你不能从函数中访问方法的<code>this</code>。下面是一个例子，我们调用<code>forEach</code>循环一个数组：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> jane = &#123;</span><br><span class="line">    name: <span class="string">'Jane'</span>,</span><br><span class="line">    friends: [ <span class="string">'Tarzan'</span>, <span class="string">'Cheeta'</span> ],</span><br><span class="line">    logHiToFriends: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">        'use strict'</span>;</span><br><span class="line">        <span class="keyword">this</span>.friends.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">friend</span>) </span>&#123;</span><br><span class="line">            <span class="comment">// 这里的“this”是undefined</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">' says hi to '</span> + friend);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用<code>logHiToFriends</code>会产生错误：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jane.logHiToFriends()   <span class="comment">// TypeError: Cannot read property 'name' of undefined</span></span><br></pre></td></tr></table></figure><p>有两种方法修复这问题。</p><ul><li>将<code>this</code>存储在不同的变量。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">logHiToFriends: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">    'use strict'</span>;</span><br><span class="line">    <span class="keyword">var</span> that = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">this</span>.friends.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">friend</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(that.name + <span class="string">' says hi to '</span> + friend);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>forEach的第二个参数允许提供<code>this</code>值。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">logHiToFriends: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">    'use strict'</span>;</span><br><span class="line">    <span class="keyword">this</span>.friends.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">friend</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">' says hi to '</span> + friend);</span><br><span class="line">    &#125;, <span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>JavaScript</code>中函数表达式经常被用作函数参数。时刻小心函数表达式中的<code>this</code>。</p><h3 id="构造函数：对象工厂">构造函数：对象工厂</h3><p>除了作为“真正”的函数和方法，函数还在JavaScript中扮演第三种角色：<strong>如果通过new操作符调用，他们会变为构造函数，对象的工厂</strong>。构造函数是对其他语言中的类的粗略模拟。约定俗成，构造函数的第一个字母大写。例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置实例数据</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Point</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.x = x;</span><br><span class="line">    <span class="keyword">this</span>.y = y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 方法</span></span><br><span class="line">Point.prototype.dist = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.sqrt(<span class="keyword">this</span>.x*<span class="keyword">this</span>.x + <span class="keyword">this</span>.y*<span class="keyword">this</span>.y);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>我们看到构造函数分为两部分：首先，<code>Point</code>函数设置实例数据。其次，<code>Point.prototype</code>属性包含对象的方法。前者的数据是每个实例私有的，后面的数据是所有实例共享的。</p><p>我们通过new操作符调用<code>Point</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Point(<span class="number">3</span>, <span class="number">5</span>);</span><br><span class="line">p.x <span class="comment">//3</span></span><br><span class="line">p.dist();    <span class="comment">//5.830951894845301</span></span><br></pre></td></tr></table></figure><p>p是<code>Point</code>的一个实例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">p <span class="keyword">instanceof</span> Point  <span class="comment">//true</span></span><br><span class="line"><span class="keyword">typeof</span> p    <span class="comment">//'object'</span></span><br></pre></td></tr></table></figure><h3 id="深入阅读-v4">深入阅读</h3><ul><li><a href="http://yanhaijing.com/javascript/2013/08/23/javascript-inheritance-how-to-shoot-yourself-in-the-foot-with-prototypes" target="_blank" rel="noopener">Javascript继承 原型的陷阱</a></li><li><a href="http://yanhaijing.com/javascript/2013/08/30/encapsulation-of-javascript" target="_blank" rel="noopener">Javascript 封装问题</a></li></ul><h2 id="十四-数组">十四、数组</h2><p>数组是数组元素的序列，能通过整数索引方法数组元素，数组索引从0开始。</p><h3 id="数组字面量">数组字面量</h3><p>数组字面量创建数组很方便：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">var</span> arr = [ <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span> ];</span><br></pre></td></tr></table></figure><p>上面的数组有三个元素：分别是字符串“a”，“b”， “c”。你可以通过整数索引访问它们：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">arr[<span class="number">0</span>]  <span class="comment">//'a'</span></span><br><span class="line">arr[<span class="number">0</span>] = <span class="string">'x'</span>;</span><br><span class="line">arr</span><br><span class="line"><span class="comment">// [ 'x', 'b', 'c' ]</span></span><br></pre></td></tr></table></figure><p><code>length</code>属性总表示一个数组有多少项元素。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.length    <span class="comment">//3</span></span><br></pre></td></tr></table></figure><p>除此之外它也可以用来从数组上移除尾部元素：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">arr.length = <span class="number">2</span>; </span><br><span class="line">arr <span class="comment">// [ 'x', 'b' ]</span></span><br></pre></td></tr></table></figure><p><code>in</code>操作符也可以在数组上工作。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">in</span> arr <span class="comment">// arr在索引为1处是否有元素？,true</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">in</span> arr <span class="comment">// arr在索引为5处是否有元素？false</span></span><br></pre></td></tr></table></figure><p>值得注意的是数组是对象，因此可以有对象属性：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">arr.foo = <span class="number">123</span>;</span><br><span class="line">arr.foo   <span class="comment">// 123</span></span><br></pre></td></tr></table></figure><h3 id="数组方法">数组方法</h3><p>数组有许多方法。举些例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [ <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span> ];</span><br><span class="line"></span><br><span class="line">arr.slice(<span class="number">1</span>, <span class="number">2</span>)  <span class="comment">// 复制元素，[ 'b' ]</span></span><br><span class="line">arr.slice(<span class="number">1</span>)    <span class="comment">// [ 'b', 'c' ]</span></span><br><span class="line"></span><br><span class="line">arr.push(<span class="string">'x'</span>)  <span class="comment">// 在末尾添加一个元素，4</span></span><br><span class="line">arr <span class="comment">// [ 'a', 'b', 'c', 'x' ]</span></span><br><span class="line"></span><br><span class="line">arr.pop()  <span class="comment">// 移除最后一个元素，'x'</span></span><br><span class="line">arr   <span class="comment">// [ 'a', 'b', 'c' ]</span></span><br><span class="line"></span><br><span class="line">arr.shift()  <span class="comment">// 移除第一个元素，'a'</span></span><br><span class="line">arr <span class="comment">// [ 'b', 'c' ]</span></span><br><span class="line"></span><br><span class="line">arr.unshift(<span class="string">'x'</span>)  <span class="comment">// 在前面添加一个元素，3</span></span><br><span class="line">arr <span class="comment">// [ 'x', 'b', 'c' ]</span></span><br><span class="line"></span><br><span class="line">arr.indexOf(<span class="string">'b'</span>)  <span class="comment">// 查找给定项在数组中的索引，若不存在返回-1，</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line">arr.indexOf(<span class="string">'y'</span>)  <span class="comment">// -1</span></span><br><span class="line"></span><br><span class="line">arr.join(<span class="string">'-'</span>)  <span class="comment">// 将元素拼接为一个字符串，'x-b-c'</span></span><br><span class="line">arr.join(<span class="string">''</span>)    <span class="comment">// 'xbc'</span></span><br><span class="line">arr.join()  <span class="comment">// 'x,b,c'</span></span><br></pre></td></tr></table></figure><h3 id="遍历数组">遍历数组</h3><p>有几种方法可以遍历数组元素。其中两个最重要的是<code>forEach</code>和<code>map</code>。</p><p><code>forEach</code>遍历整个数组，并将当前元素和它的索引传递给一个函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[ <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span> ].forEach(<span class="function"><span class="keyword">function</span> (<span class="params">elem, index</span>) </span>&#123;  <span class="comment">// (*)</span></span><br><span class="line">    <span class="built_in">console</span>.log(index + <span class="string">'. '</span> + elem);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>上面代码的输出</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0.</span> a</span><br><span class="line"><span class="number">1.</span> b</span><br><span class="line"><span class="number">2.</span> c</span><br></pre></td></tr></table></figure><p>注意<code>（*）</code>行的函数参数是可省略的。例如：它可以只有一个参数<code>elem</code>。</p><p><code>map</code>创建一个新数组，通过给每个存在数组元素应用一个函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].map(<span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123; </span><br><span class="line">    <span class="keyword">return</span> x*x </span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// [ 1, 4, 9 ]</span></span><br></pre></td></tr></table></figure><h3 id="深入阅读-v5">深入阅读</h3><ul><li><a href="http://yanhaijing.com/javascript/2014/01/17/fun-with-javascript-native-array-functions" target="_blank" rel="noopener">有趣的javascript原生数组函数</a></li></ul><h2 id="十五-正则表达式">十五、正则表达式</h2><p><code>JavaScript</code>内建支持正则表达式。他们被双斜线分隔：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/^abc$/</span><br><span class="line">/[A-Za-z0<span class="number">-9</span>]+<span class="regexp">/</span></span><br></pre></td></tr></table></figure><h3 id="方法-test-：测试是否匹配">方法 test()：测试是否匹配</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/^a+b+$/.test(<span class="string">'aaab'</span>)   <span class="comment">// true</span></span><br><span class="line">/^a+b+$/.test(<span class="string">'aaa'</span>)    <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h3 id="方法-exec-：匹配和捕获组">方法 exec()：匹配和捕获组</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/a(b+)a/.exec(<span class="string">'_abbba_aba_'</span>)    <span class="comment">// [ 'abbba', 'bbb' ]</span></span><br></pre></td></tr></table></figure><p>返回的数组第一项（索引为0）是完整匹配，捕获的第一个分组在第二项（索引为1），等。有一种方法可以反复调用获取所有匹配。</p><h3 id="方法-replace-：搜索并替换">方法 replace()：搜索并替换</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'&lt;a&gt; &lt;bbb&gt;'</span>.replace(<span class="regexp">/&lt;(.*?)&gt;/g</span>, <span class="string">'[$1]'</span>) <span class="comment">// '[a] [bbb]'</span></span><br></pre></td></tr></table></figure><p><code>replace</code>的第一个参数必须是正则表达式，并且开启全局搜索（<code>/g</code>标记），否则仅第一个匹配项会被替换。有一种方法使用一个函数来计算替换项。</p><h2 id="十六-数学">十六、数学</h2><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math" target="_blank" rel="noopener">Math</a>是一个有算数功能的对象。例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Math</span>.abs(<span class="number">-2</span>) <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">Math</span>.pow(<span class="number">3</span>, <span class="number">2</span>) <span class="comment">// 3^2 = 9</span></span><br><span class="line"><span class="built_in">Math</span>.max(<span class="number">2</span>, <span class="number">-1</span>, <span class="number">5</span>) <span class="comment">//5</span></span><br><span class="line"><span class="built_in">Math</span>.round(<span class="number">1.9</span>) <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">Math</span>.cos(<span class="built_in">Math</span>.PI)  <span class="comment">// 预定义常量π，-1</span></span><br></pre></td></tr></table></figure><h2 id="十七-标准库的其他功能">十七、标准库的其他功能</h2><p><code>JavaScript</code>标准库相对简单，但有很多其他东西你可以使用：</p><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date" target="_blank" rel="noopener">Date</a>：日期构造函数，主要功能有转换和创建日期字符串，访问日期组成部分（年，小时等）。<br><a href="http://www.2ality.com/2011/08/json-api.html" target="_blank" rel="noopener">JSON</a>：一个对象，功能是转换和生成<code>JSON</code>数据。<br><a href="https://developer.mozilla.org/en-US/docs/Web/API/console" target="_blank" rel="noopener">console.*</a>方法：浏览器的具体方法，不是语言成分的部分，但他们也可以在<a href="https://nodejs.org/" target="_blank" rel="noopener">Node.js</a>中工作。</p><h2 id="十八-下一步学什么？">十八、下一步学什么？</h2><p>在你学会了这篇文章的基础教程后，你可以转到大部分章节末尾提到的高级教程。此外，我建议你看下面的资源：</p><ul><li>Style guides: I have written <a href="http://www.2ality.com/2013/07/meta-style-guide.html" target="_blank" rel="noopener">a guide to style guides</a></li><li><a href="http://underscorejs.org/" target="_blank" rel="noopener">Underscore.js</a>: 一个弥补JavaScript标准库缺少的功能的库</li><li><a href="http://jsbooks.revolunet.com/" target="_blank" rel="noopener">JSbooks – free JavaScript books</a></li><li><a href="http://uptodate.frontendrescue.org/" target="_blank" rel="noopener">Frontend rescue: how to keep up to date on frontend technologies</a></li><li><a href="http://yanhaijing.com/" target="_blank" rel="noopener">http://yanhaijing.com</a> 当然还有我的博客也非常不错哦</li><li><a href="http://yanhaijing.com/es5" target="_blank" rel="noopener">http://yanhaijing.com/es5</a> 如果你想成为高手，我建议阅读<code>ecmascript</code>规范</li><li><a href="http://yanhaijing.com/javascript/2013/12/11/24-JavaScript-best-practices-for-beginners" target="_blank" rel="noopener">给javascript初学者的24条最佳实践</a></li><li><a href="http://yanhaijing.com/javascript/2014/04/23/seven-javascript-quirks-i-wish-id-known-about" target="_blank" rel="noopener">我希望我知道的七个JavaScript技巧</a></li></ul><p>参考自原文：<a href="http://www.2ality.com/2013/06/basic-javascript.html" target="_blank" rel="noopener">http://www.2ality.com/2013/06/basic-javascript.html</a><br>参考自译文：<a href="http://yanhaijing.com/basejs/" target="_blank" rel="noopener">http://yanhaijing.com/basejs/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一-javascript介绍&quot;&gt;一、JavaScript介绍&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript&quot; target=&quot;_blank&quot; rel=&quot;noopen
      
    
    </summary>
    
      <category term="前端" scheme="https://www.dxain.ml/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JavaScript" scheme="https://www.dxain.ml/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Promise 杂谈</title>
    <link href="https://www.dxain.ml/zh-cn/talk-promise.html"/>
    <id>https://www.dxain.ml/zh-cn/talk-promise.html</id>
    <published>2019-03-01T11:12:21.000Z</published>
    <updated>2022-07-23T10:32:11.502Z</updated>
    
    <content type="html"><![CDATA[<h4 id="promise-是如何解决回调地狱问题的？">Promise 是如何解决回调地狱问题的？</h4><p>所谓回调地狱，可能它的危害并不全在于由于过多的嵌套函数导致日渐增长的缩进最终会超过你的屏幕宽度，而是它剥夺了我们编写 try-catch，throw 这样的代码的权利，并且会有调用信任的问题。</p><p>使用回调函数调用第三方服务或者模块，回调函数的执行权会交给了第三方，可能出现的问题就会可能有多次调用，回调时间不稳定(过早或过晚)等等的问题，虽然这些问题我们可能通过其他手段进行解决，比如通过一个 flag 值来控制调用次数的问题:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">let called = false;</span><br><span class="line"></span><br><span class="line">rpc(&apos;https://path/to/service&apos;, (err, res) =&gt; &#123;</span><br><span class="line">    if (called) return;</span><br><span class="line">    // do somthing with res</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>但是这样始终非常不方便，代码中也会出现很多不必要的副作用，往往会给我们代码设计带来麻烦。</p><p>而 Promise 的出现，通过控制反转的方法，让回调函数只做将它本身的返回值返回的操作，然后让 Promise 将这个值存起来，并通知所有需要知道此函数调用成功的函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">    rpc(&apos;https://path/to/service&apos;, (err, res) =&gt; &#123;</span><br><span class="line">    resolve(res);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;).then((res) =&gt; &#123;</span><br><span class="line">    // do somthing with res</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这样，有利于消除副作用，基于回调函数的返回值与代码逻辑不再全部放在第三方调用的回调中了。</p><p>而对于回调函数执行的时间不稳定问题，由于使用第三方模块的时候，回调函数的执行时机对于我们是一个黑盒，如果模块的设计者不加注意，很容易会导致 release zalgo 问题，也就是如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">let urls = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">function rpc (url, callback) &#123;</span><br><span class="line">    if (urls[url]) &#123;</span><br><span class="line">        return callback(urls[url]);</span><br><span class="line">    &#125;</span><br><span class="line">    request(url, (err, res) =&gt; &#123;</span><br><span class="line">        urls[url] = res;</span><br><span class="line">        callback(err, res);</span><br><span class="line">    &#125;));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果这样实现第三方模块，那么这里的回调函数调用时机是不确定的，有可能是同步调用，有可能是异步调用，有时候这里会导致一些难以追踪的 bug。</p><p>但是使用了 Promise 进行包裹，不需要担心这个问题，因为 then 函数始终都是异步执行的。因为我们执行 new Promise 函数中的 resolve 函数的时候，内部实现是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// promise 的简单实现</span><br><span class="line">function _resolve(value)&#123;</span><br><span class="line">if (self.state === &apos;pending&apos;) &#123;</span><br><span class="line">       nextTick(() =&gt; &#123; // nextTick 代表异步执行，可以是 process.nextTick, 也可以是 setTimeout</span><br><span class="line">           self.state = &apos;fulfilled&apos;;</span><br><span class="line">           self.value = value;</span><br><span class="line">           // 批量执行通过 then 函数添加的成功回调，回调函数存放到一个数组中</span><br><span class="line">           self.resolveQueue.forEach(cb =&gt; &#123;</span><br><span class="line">               cb(value);</span><br><span class="line">           &#125;);</span><br><span class="line">       &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以我们在取得回调函数返回值的 then 函数始终是被异步执行的，无需担心 release zalgo 问题。</p><p>并且由于 Promise 的内部实现，不会出现多次调用回调函数的问题，原因在由于 Promise 本身是一个有穷状态机，本身包含 pending, fulfilled, rejected 三种状态，并且从 pending 状态到 fulfilled 状态与 pending 状态到 rejected 状态不可逆，所以上面的回调函数中，即使写成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">....</span><br><span class="line">rpc(&apos;https://path/to/service&apos;, (err, res) =&gt; &#123;</span><br><span class="line">   if (err) reject(err);</span><br><span class="line">    resolve(res);</span><br><span class="line">&#125;);</span><br><span class="line">....</span><br></pre></td></tr></table></figure><p>也不会影响实际代码的运行，如果出现了 err, 会先运行 reject 函数, Promise 的状态就会变为 rejected 状态，后面的 resolve 函数执行会被忽略，代码变得可靠很多。</p><p>另外，在 Promise 中，你甚至可以 resolve 一个 PromiseLike 的对象，也就是一个包含 then 方法的对象，根据 Promise/A+ 规范的实现，在执行这种 PromiseLike 对象的 then 方法的时候，会对传入的 resolve，reject 方法的执行次数进行控制：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">....</span><br><span class="line">// 此为本人根据 Promise/A+ 规范实现部分代码</span><br><span class="line">let called = false;</span><br><span class="line">// x 表示 上一个 Promise resolve 传入的值</span><br><span class="line">if ((x !== null &amp;&amp; typeof x === &apos;object&apos;) || typeof x === &apos;function&apos;) &#123; // 如果是对象或者是函数</span><br><span class="line">    try &#123;</span><br><span class="line">        // 这里是鸭子模型，只要有 then 方法就尝试执行</span><br><span class="line">    let then = x.then;</span><br><span class="line">        if (typeof then === &apos;function&apos;) &#123;</span><br><span class="line">             // 说明是一个 thenable 对象</span><br><span class="line">            then.call(x, y =&gt; &#123;</span><br><span class="line">                // 避免 then 函数中多次执行第一次传入的函数(即此函数)，如多次执行则以第一次执行为准</span><br><span class="line">                 // 而且如果 reject 函数先执行，那么这个函数的执行会被忽略</span><br><span class="line">                if (called) return;</span><br><span class="line">                called = true;</span><br><span class="line">                resolvePromise(promise, y, resolve, reject);</span><br><span class="line">            &#125;, err =&gt; &#123;</span><br><span class="line">                // 避免 then 函数中多次执行第二次传入的函数(即此函数)，如多次执行则以第一次执行为准</span><br><span class="line">                // 而且如果 resolve(resolvePromise) 函数先执行，那么这个函数的执行会被忽略</span><br><span class="line">                if (called) return;</span><br><span class="line">                called = true;</span><br><span class="line">                return reject(err);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            resolve(x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch (err) &#123;</span><br><span class="line">        // 如果 then 方法中有异常，也需要将 promise 置为 reject</span><br><span class="line">        // 但是为了防止前面 then 函数中 resolve(resolvePromise) 与 reject 已经被执行过后</span><br><span class="line">        // then 方法执行又出错，添加 called 值来判断，如果已经执行过 resolvePromise/reject 方法</span><br><span class="line">        // 那么这里 catch 到的错误会被忽略</span><br><span class="line">        // 否则以此错误来 reject Promise</span><br><span class="line">        if (called) return;</span><br><span class="line">        called = true;</span><br><span class="line">        reject(err);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line">....</span><br></pre></td></tr></table></figure><p>其实，called 变量判断回调执行与否是为了防范 thenable 对象的实现不符合 Promise 的机制，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">let p = new Promise((resolve) =&gt; &#123;</span><br><span class="line">    resolve();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">p.then(() =&gt; &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">        then(a, b) &#123;</span><br><span class="line">            a(); // 会执行一次 reoslve(resolvePromise)</span><br><span class="line">            a(); // 同样会执行 resolve 函数，但是后续逻辑被 called 拦截了，不会真正执行</span><br><span class="line">            b(); // 执行 reject 函数，但是被 called 拦截了</span><br><span class="line">            throw &apos;real?&apos;; // 这里会使 try-catch 中 catch 后的代码执行，但是同样被 called 拦截</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>对于超时问题，Promise 还提供了 race 方法，让我们的调用可以方便地添加超时机制，让代码尽可能在可控的范围内。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">let rpcSync = new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">    rpc(&apos;https://path/to/service&apos;, (err, res) =&gt; &#123;</span><br><span class="line">    if (err) return reject(err);</span><br><span class="line">        resolve(res);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">Promise.race([</span><br><span class="line">    rpcSync(&apos;http://path/to/service&apos;),</span><br><span class="line">    new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">        setTimeout(() =&gt; &#123;</span><br><span class="line">            resolve();</span><br><span class="line">        &#125;, 5000);</span><br><span class="line">    &#125;);</span><br><span class="line">]);</span><br></pre></td></tr></table></figure><p>注：函数副作用指调用函数时除了返回函数值还会修改函数外的变量</p><p>composing Promise<br>我们在使用 Promise 的时候，应当充分利用 Promise 的优势， 不能将 Promise 当成回调函数来使用，避免像以下的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">UserOrm.get(id).then((data) =&gt; &#123;</span><br><span class="line">...</span><br><span class="line">SchoolOrm.get(data.school).then((school) =&gt; &#123;</span><br><span class="line">        ...</span><br><span class="line">       ChairManOrm.get(school.chairMan).then((chairMan) =&gt; &#123;</span><br><span class="line">        .....</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>当然，Promise 通过上面阐释的多种机制优化了很多回调函数存在的问题，上面的代码可能会比单纯使用回调函数要好，但是这样的代码风格很糟糕，如果业务逻辑复杂，会让编写者非常难受，而其实我们可以借助 Promise，让其他 Promise 进行链接。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">UserOrm.get(id)</span><br><span class="line">.then((data) =&gt; &#123;</span><br><span class="line">    return SchoolOrm.get(data.school);</span><br><span class="line">&#125;)</span><br><span class="line">.then((school) =&gt; &#123;</span><br><span class="line">    return ChairManOrm.get(school.chairMan);</span><br><span class="line">&#125;)</span><br><span class="line">.then((chairMan) =&gt; &#123;</span><br><span class="line">    ....</span><br><span class="line">&#125;)</span><br><span class="line">.catch((err) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这样的链式调用会比第一个例子中的 then 地狱要好得多，我们只需要在 then 函数里面返回另一个 Promise，那么在下一个链式的 then 函数中就能拿到返回的 Promise 的输出结果。</p><p>而原理在于，根据 Promise/A+ 规范，then 函数的内部处理中，如果 then 函数传入的第一个函数的返回值是一个 Promise 的时候，会根据 Promise Resolution Procedure 的处理，递归地为返回的 Promise 添加 then 函数处理，直到返回结果不是 Promise 对象，并以此值作为上一层 Promise 的返回结果。</p><p>而对于返回非 Promise 值，then 函数也会直接将这个返回值直接传递给下一个 Promise，这样就有利于我们写出利用缓存结果的函数了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">getUrl().then((url) =&gt; &#123;</span><br><span class="line">    if (urls[url]) &#123;</span><br><span class="line">        return resolve(urls[url]);</span><br><span class="line">    &#125;</span><br><span class="line">    return rpc(url); // rpc 返回一个 promise</span><br><span class="line">&#125;).then((data) =&gt; &#123;</span><br><span class="line">    // get data</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>上面这个函数利用了内存结果缓存而不用担心上面所说的 release zalgo 问题，因为后一个 then 函数一定是异步被执行的。另外由于 Promise 内部对 then 函数传入的函数都添加了 try-catch 处理，所以我们在 then 函数中直接 throw 一个错误，那么这个错误会被捕获到，并以这个错误作为 Promise 的 reject 原因传给下一个 Promise。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">getUrl().then((url) =&gt; &#123;</span><br><span class="line">    if (/^http|https/.test(url)) throw new Error(&apos;url Error&apos;);</span><br><span class="line">    if (urls[url]) &#123;</span><br><span class="line">        return resolve(urls[url]);</span><br><span class="line">    &#125;</span><br><span class="line">    return rpc(url); // rpc 返回一个 promise</span><br><span class="line">&#125;).then((data) =&gt; &#123;</span><br><span class="line">    // get data</span><br><span class="line">&#125;)</span><br><span class="line">.catch((err) =&gt; &#123;</span><br><span class="line">    // get err</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>后面的 catch 函数会得到在 then 函数 throw 出来的错误。</p><p>所以，我们在 then 函数里面，最好显式地 return 一个值或者 throw 一个错误，这样我们可以让 then 函数的行为符合我们的预期。</p><p>promise 值穿透问题<br>所谓 promise 值穿透问题就是当你在调用 then 函数的时候，传入的参数不是一个函数的话，那么传入的参数会被忽略，并返回上一个 Promise 的返回结果。</p><p>Promise.resolve(1).then(Promise.resolve(2)).then((res) =&gt; { console.log(res); }); // 1<br>这是因为在 Promise 中，then 函数会有传入的值类型判断：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">then (onFulfilled, onReject) &#123;</span><br><span class="line">    if (typeof onFulfilled !== &apos;function&apos;) onFulfilled = (res) =&gt; res;</span><br><span class="line">    if (typeof onReject !== &apos;function&apos;) onReject = (err) =&gt; throw err;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当传入值非函数的时候，内部会赋予一个默认的返回 Promise 返回结果的函数，因此当我们在调用 then 函数的时候一定需要注意 then 函数是接受函数作为参数的。</p><p>批量 Promise<br>在业务场景中，我们会常常遇到需要批量执行一些异步操作，通常数据会存放在一个数组中，但是如果我们直接循环数组，然后希望在这些异步操作都结束之后做某些操作，在编写代码的时候不加注意，会容易写出这样的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">orm.getList().then((datas) =&gt; &#123;</span><br><span class="line">    datas.forEach((&#123;id&#125;) =&gt; &#123;</span><br><span class="line">        orm.delete(id);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)</span><br><span class="line">.then(() =&gt; &#123;</span><br><span class="line">    console.log(&apos;all list be deleted&apos;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>实际上，最后一个 then 函数的执行时机并不等于所有列表数据都被删除之后的时刻。按照逻辑，真正的代码应该是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">orm.getList().then((datas) =&gt; &#123;</span><br><span class="line">    let promises = datas.map((&#123;id&#125;) =&gt; &#123;</span><br><span class="line">        return orm.delete(id);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    return Promise.all(promises);</span><br><span class="line">&#125;)</span><br><span class="line">.then(() =&gt; &#123;</span><br><span class="line">    console.log(&apos;all list be deleted&apos;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>借助 Promise.all 来达到批量的 Promise 都执行完后再去执行某些逻辑的目的。</p><p>而如果在服务端，有一些批量异步操作可能由于数据列表过长，不希望如此大量的异步操作同一时间进行，那么我们就需要控制同一时间内可进行的异步操作的数量：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">// 一个控制 Promise 并发量的 demo</span><br><span class="line">function parallel (fn, con, thisArg) &#123;</span><br><span class="line">    let jobs = [];</span><br><span class="line">    let current = 0;</span><br><span class="line">    let next = () =&gt; &#123;</span><br><span class="line">      let job = jobs.shift();</span><br><span class="line">        if (job) &#123;</span><br><span class="line">            current ++;</span><br><span class="line">            let &#123; args, resolve, reject &#125; = job;</span><br><span class="line">            fn.apply(thisArg, args).then((res) =&gt; &#123;</span><br><span class="line">                current --;</span><br><span class="line">                next();</span><br><span class="line">                resolve(res);</span><br><span class="line">            &#125;, (err) =&gt; &#123;</span><br><span class="line">                current --;</span><br><span class="line">                next();</span><br><span class="line">                reject(err);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    return function (...args) &#123;</span><br><span class="line">        if (current &lt; con) &#123;</span><br><span class="line">            current ++;</span><br><span class="line">            return new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">               return fn.apply(thisArg, args);</span><br><span class="line">            &#125;).then(res =&gt; &#123;</span><br><span class="line">                current --;</span><br><span class="line">                next();</span><br><span class="line">                return res;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">                jobs.push(&#123;</span><br><span class="line">                    resolve,</span><br><span class="line">                    reject,</span><br><span class="line">                    args</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let executor = parallel(function (data) &#123;</span><br><span class="line">    // dom something with data</span><br><span class="line">    return asyncOperation(data); // asyncOPeration 返回一个 Promise</span><br><span class="line">&#125;, 10);</span><br><span class="line"></span><br><span class="line">Promise.all(datas.map(executor)).then(() =&gt; &#123;</span><br><span class="line">    console.log(&apos;all done&apos;);</span><br><span class="line">&#125;);</span><br><span class="line">async/await 时代</span><br><span class="line">async/await 是谁的语法糖？</span><br><span class="line">这个问题见仁见智，实现过 co 库的更熟悉 generator 运行机制的也许会说是生成器函数与 yield 操作符的语法糖，但是更熟悉 Promise 运行机制的也许会说是 Promise 的语法糖。</span><br><span class="line"></span><br><span class="line">(async function ()&#123;</span><br><span class="line">    await new Promise((resolve) =&gt; &#123;</span><br><span class="line">        setTimeout(() =&gt; &#123;</span><br><span class="line">            resolve(1);</span><br><span class="line">        &#125;, 5000);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>所谓语法糖，是以某种对功能没有影响的语法，方便程序员调用并使程序更简洁。</p><p>所以在生成器角度来看，async/await 提供了类似 co 库的自动运行 generator 对象的 next 方法的机制，达到异步控制流的目的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">function _asyncToGenerator(fn) &#123;</span><br><span class="line">return function () &#123;</span><br><span class="line">var gen = fn.apply(this, arguments);</span><br><span class="line">return new Promise(function (resolve, reject) &#123;</span><br><span class="line">function step(key, arg) &#123;</span><br><span class="line">try &#123;</span><br><span class="line">var info = gen[key](arg);</span><br><span class="line">var value = info.value;</span><br><span class="line">&#125; catch (error) &#123;</span><br><span class="line">reject(error);</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">if (info.done) &#123;</span><br><span class="line">resolve(value);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">return Promise.resolve(value).then(function (value) &#123;</span><br><span class="line">step(&quot;next&quot;, value);</span><br><span class="line">&#125;, function (err) &#123;</span><br><span class="line">step(&quot;throw&quot;, err);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return step(&quot;next&quot;);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">_asyncToGenerator(function* () &#123;</span><br><span class="line">    yield new Promise(function (resolve) &#123;</span><br><span class="line">        setTimeout(function () &#123;</span><br><span class="line">            resolve(1);</span><br><span class="line">        &#125;, 5000);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>*注：以上代码通过 babel 插件 babel-plugin-transform-async-to-generator 进行转化</p><p>在 Promise 的角度，async/await 提供了使某个函数统一返回值为 Promise，并且提供 then 方法的方便调用方式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Promise.resolve().then(function () &#123;</span><br><span class="line">    return new Promise(resolve =&gt; &#123;</span><br><span class="line">        setTimeout(() =&gt; &#123;</span><br><span class="line">            resolve(1);</span><br><span class="line">        &#125;, 5000);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;).then(function () &#123;&#125;);</span><br></pre></td></tr></table></figure><p>*注：以上代码通过 babel 插件 babel-plugin-async-to-promises 进行转化</p><p>可以看作 async 操作符内部创建了一个 Promise 对象，await 只能在 async 函数中使用，可以理解为 then 方法只能在 Promise 对象之后调用。</p><p>但是模拟与实现是两码事，从实现上来说，个人认为 async/await 更偏向于 Promise 的实现，因为在 node 中原生的 async/await 与 Promise 几乎是一样快的。</p><p>async/await 内部干了些什么事情？<br>对于 async 操作符来说，它基本功能就类似下面的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 转化前形如</span><br><span class="line">async function test () &#123;</span><br><span class="line">    return 1;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 经过转化后</span><br><span class="line">function test () &#123;</span><br><span class="line">    return Promise.resolve(1);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>也就是说，async 操作符执行后会返回一个 Promise。</p><p>那么 await 做了什么事情呢？根据 tc39 的 async/await 实现规范来讲，它类似于以下这幅图：</p><p>那么我们自行来翻译一下，将左边 foo 函数使用我们 Promise 语法来表达右边的意思：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function foo (v) &#123;</span><br><span class="line">let implicit_promise = new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">        let promise = new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">            resolve(v);</span><br><span class="line">        &#125;).then(w =&gt; &#123;</span><br><span class="line">            resolve(w)</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">return implicit_promise;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先，只要使用了 async 声明的函数，内部会创建一个隐式 promise，也就是所谓的 implicit_promise，然后 await 会将传入的 v 包裹成一个新的 Promise，对于 w 的赋值操作与后面返回 return w 这些，都放在了这个新建的 Promise 的 then 函数逻辑中了。</p><p>注意，在翻译实现的时候，故意忽略了一个 Promise 的创建也就是 throwaway Promise 这个 promise，这个 promise 是我们翻译的噪音，不需要理会，因为它本身的作用是底层引擎为了兼容适应 API 的实现，创建出来的一个 Promise，它本身并没有其他作用。</p><p>所以我们知道了，其实 async/await 更多地是给我们提供语法糖，优化了 Promise 的 then 调用链的语法使用，而对于 await 后面，它接受的是一个表达式，至于传入的 v 是一个基本类型的值还是一个 Promise 对象，它都会统一包裹一层 Promise。</p><p>对于传入值 v 为一个 Promise 的时候，我们在调用 resolve 函数的时候传入一个 Promise，最终我们在 then 函数中拿到的是传入的 Promise 的返回结果，这部分的实现逻辑与 Promise A+ 规范有关，这里不再阐述。</p><p>当然，这里是可以进一步优化的，当我们传入的 v 是一个 Promise 的时候，我们其实不需要额外包裹一层 Promise，而这个优化点也就是 node@V8 到 node@V10 的对于 async/await 的优化所在。优化的手段类似如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function foo (v) &#123;</span><br><span class="line">let implicit_promise = new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">Promise.resolve(v).then(w =&gt; &#123;</span><br><span class="line">            resolve(w);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">return implicit_promise;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>即是用 Promise.resolve(v) 来代替 new Promise(res =&gt; res(v))。因为在 Promise.resolve 中如果传入值为另一个 Promise，会将这个传入的 Promise 直接返回：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">let p = new Promise(res =&gt; res(1));</span><br><span class="line"></span><br><span class="line">let testP = Promise.resolve(p);</span><br><span class="line"></span><br><span class="line">testP === p // true</span><br><span class="line">多个 async/await 的执行顺序</span><br><span class="line">曾经看过一个题目，代码如下：</span><br><span class="line"></span><br><span class="line">async function first() &#123;</span><br><span class="line">  console.log(&apos;first start&apos;);</span><br><span class="line">  await second();</span><br><span class="line">  console.log(&apos;first end&apos;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">async function second() &#123;</span><br><span class="line">  console.log(&apos;second&apos;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(&apos;start&apos;);</span><br><span class="line">setTimeout(() =&gt; &#123;</span><br><span class="line">  console.log(&apos;setTimeout&apos;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">first();</span><br><span class="line"></span><br><span class="line">new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">  console.log(&apos;promise1&apos;);</span><br><span class="line">  resolve();</span><br><span class="line">&#125;).then(res =&gt; &#123;</span><br><span class="line">  console.log(&apos;then&apos;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 结果</span><br><span class="line">// start</span><br><span class="line">// first start</span><br><span class="line">// seond</span><br><span class="line">// promise1</span><br><span class="line">// then</span><br><span class="line">// first end</span><br><span class="line">// setTimeout</span><br></pre></td></tr></table></figure><p>对于结果来说，如果你已经理解了上面章节所说的 async/await 底层原理，那么就很容易写出类似下面我对上面代码进行翻译的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">function first () &#123;</span><br><span class="line"> const implicit_promise = new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">        console.log(&apos;first start&apos;);</span><br><span class="line">        second().then((res) =&gt; &#123;</span><br><span class="line">            resolve();</span><br><span class="line">        &#125;).then(() =&gt; &#123;</span><br><span class="line">            console.log(&apos;first end&apos;);</span><br><span class="line">        &#125;);</span><br><span class="line"> &#125;);</span><br><span class="line"></span><br><span class="line"> return implicit_promise;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function second () &#123;</span><br><span class="line">    const implicit_promise = new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">        console.log(&apos;second&apos;);</span><br><span class="line">        resolve();</span><br><span class="line"> &#125;);</span><br><span class="line"></span><br><span class="line"> return implicit_promise;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(&apos;start&apos;);</span><br><span class="line">setTimeout(() =&gt; &#123;</span><br><span class="line">  console.log(&apos;setTimeout&apos;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">first();</span><br><span class="line"></span><br><span class="line">new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">  console.log(&apos;promise1&apos;);</span><br><span class="line">  resolve();</span><br><span class="line">&#125;).then(res =&gt; &#123;</span><br><span class="line">  console.log(&apos;then&apos;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这两段代码在 chrome 浏览器 71.0.3578.98 下运行结果是一样的。</p><p>以上就是我对于 Promise 以及基于 Promise 的语法的一些思考与见解，希望大家看完都能有所收获。</p><p>附录</p><p><a href="https://v8.js.cn/blog/fast-async/" target="_blank" rel="noopener">https://v8.js.cn/blog/fast-async/</a></p><p>xieranmaya/blog#3</p><p>《you don’t know javascript》</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;promise-是如何解决回调地狱问题的？&quot;&gt;Promise 是如何解决回调地狱问题的？&lt;/h4&gt;
&lt;p&gt;所谓回调地狱，可能它的危害并不全在于由于过多的嵌套函数导致日渐增长的缩进最终会超过你的屏幕宽度，而是它剥夺了我们编写 try-catch，throw 这样的代
      
    
    </summary>
    
      <category term="ES6" scheme="https://www.dxain.ml/categories/ES6/"/>
    
    
      <category term="promise" scheme="https://www.dxain.ml/tags/promise/"/>
    
      <category term="请求" scheme="https://www.dxain.ml/tags/%E8%AF%B7%E6%B1%82/"/>
    
      <category term="ajax" scheme="https://www.dxain.ml/tags/ajax/"/>
    
  </entry>
  
  <entry>
    <title>滚滚红尘，一个转身就是陌路天涯；虚拟网络，一个删除就是再无交集！</title>
    <link href="https://www.dxain.ml/zh-cn/vr-net.html"/>
    <id>https://www.dxain.ml/zh-cn/vr-net.html</id>
    <published>2019-01-07T19:33:49.000Z</published>
    <updated>2019-01-07T19:40:00.000Z</updated>
    
    <content type="html"><![CDATA[<p style="text-indent:2em">​谁是你心上的疼，谁是你忘不了的情，谁是你醒不了的梦？见与不见，思念一直在；爱与不爱，心一直在。滚滚红尘，一个转身就是陌路天涯；虚拟网络，一个删除就是再无交集。相遇靠缘分，相守靠人心。不是所有的人，都能一直在等；不是所有的情，都能维系一生。许多的名字，越来越模糊；许多的心情，越来越陌生。</p><a id="more"></a><p style="text-indent:2em">​不是不想念，而是怕自作多情；不是不怀念，而是怕再也回不到曾经。一生中，总会有一个人忘不了，却再也不会去打扰。有的人，只剩下了一个名字，却怎么也舍不得删去；有的情，只留下了一段回忆，却无论如何也不能忘记。不敢打开回忆，只怕往事滚滚如潮；不敢重提旧情，放不下的牵挂，只有自己的心知道。只能，远远的看着，静静的守着，深深的祝福着。</p><p><img src="https://cdn.pixabay.com/photo/2019/01/24/21/12/couple-3953348_960_720.jpg" alt></p><p>​</p><p style="text-indent:2em"><br>也许，这就是缘分最好的结局，彼此爱过疼过，怨过伤过，一切又回到了陌生，却再也抹不去来过的痕迹。任四季交替，任时光飞逝，爱过的心灵，痛过的泪滴，却一直深藏在心底，未曾远离。不联系，不代表不想念；不提及，不代表不想起。有情有义的人，都不会把彼此真正忘记。相伴过的往昔，已然是一生的美丽。惟愿，你过得比我好。缘分，总有不期而遇的惊喜，亦有不说再见的离去。变幻的是心情，不变的是感情。</p><p></p><p style="text-indent:2em">​也曾一起嬉戏，一起相依；如今再无交集，再无信息。陌生的熟悉了，熟悉的走远了，缘分只是一场经历；遇见的美丽，感情需要用心珍惜。网络虽然虚拟，却有真情实意，谁也伤不起！一些人，一些事，就像是自然风景。回不去的山，回不去的水，回不去的感情；留不住的风，留不住的雨，留不住的热情。错过了，就过了；爱走了，就走了。</p><p>​</p><p style="text-indent:2em"><br>若是纠缠不清，累的是自己；若是留恋不放，苦的是自己。回不来的是曾经，换来的只能是同情。爱过了不后悔，爱走了不强求。缘来真心以对，缘去坦然面对。最好的感情，就是找一个能够聊得来的伴。各种的话题，永远说不完；重复的语言，也不觉得厌倦。陪伴，是两情相悦的一种习惯；懂得，是两心互通的一种眷恋。总是觉得相聚的时光太短，原来，走得最快的不是时间，而是两个人在一起时的快乐。幸福，就是有一个读懂你的人；温暖，就是有一个愿意陪伴你的人。</p><p></p><p><img src="https://cdn.pixabay.com/photo/2017/01/27/16/36/love-2013497_960_720.png" alt></p><p>​</p><p style="text-indent:2em"><br>人总有脆弱的时候，并不需要太多的浪漫和语言。累了，有一个拥抱可以依靠；痛了，有一句懂得可以舒缓。即使两两相望，也是一份无言的喜欢。即使默默思念，也是一份踏实的心安。人，总要有一个家遮风避雨；心，总要有一个港湾休憩靠岸。最长久的情，是平淡中的不离不弃；最贴心的暖，是风雨中的相依相伴。懂，是心灵的一种呵护，是生命的一种温度。距离的远近，妨碍不了心与心的对语，阻隔不了魂与魂的相吸。穿越时空的心音，总是让人悸动；流在眼角的热泪，总是让人心疼。</p><p></p><p style="text-indent:2em">​因为有人懂，情怀可以诉说，痛苦可以解脱；因为有人懂，孤单时有人相陪，无助时有人安慰。懂，是世界上最温情的语言。简短的话语，却包含了万千。因为深有体会，所以知你的负累，懂你的苦衷；因为感同身受，所以心疼你的真诚，珍惜你的感情。懂，是通往心里的桥梁，引起共鸣。因为懂得，所以包容；因为懂得，所以心同。</p><p>​</p><p style="text-indent:2em"><br>懂得，让心与心没有距离，让生命彼此疼惜。懂得，是生命中最美好的相通，最深刻的感动。家，很平淡，只要每天都能看见亲人的笑脸，就是幸福的展现；爱，很简单，只要每天都会彼此挂念，就是踏实的情感。幸福并不缥缈，在于心的感受；爱情并不遥远，在于两心知的默契。心，只有一颗，不要装的太多；人，只有一生，不要追逐的太累。</p><p></p><p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1547390107439&amp;di=9a10f760cedcb5f8b257f73a4378651a&amp;imgtype=0&amp;src=http%3A%2F%2Fbpic.ooopic.com%2F15%2F89%2F26%2F97b8OOOPICc5.jpg" alt></p><p>​</p><p style="text-indent:2em"><br>心灵的愉悦，来自精神的富有；简单的快乐，来自心态的知足。时间，会沉淀最真的情感；风雨，会考验最暖的陪伴。走远的，只是过眼云烟；留下的，才是值得珍惜的情缘。来得热烈，未必守得长久；爱得平淡，未必无情无义。眼睛看到的许是假象，心的感受才最真实；耳朵听到的许是虚幻，心的聆听才最重要。</p><p></p><p>​</p><p style="text-indent:2em"><br>时间会告诉我们，简单的喜欢，最长远；平凡中的陪伴，最心安；懂你的人，最温暖。用心呵护一份情，用爱守望这一程，不留遗憾给生命。遇见，只是一个开始；守望，才能相伴一生。珍惜爱你的人和你爱的人！</p><p></p>]]></content>
    
    <summary type="html">
    
      &lt;p style=&quot;text-indent:2em&quot;&gt;
​谁是你心上的疼，谁是你忘不了的情，谁是你醒不了的梦？见与不见，思念一直在；爱与不爱，心一直在。滚滚红尘，一个转身就是陌路天涯；虚拟网络，一个删除就是再无交集。相遇靠缘分，相守靠人心。不是所有的人，都能一直在等；不是所有的情，都能维系一生。许多的名字，越来越模糊；许多的心情，越来越陌生。
&lt;/p&gt;
    
    </summary>
    
      <category term="美文欣赏" scheme="https://www.dxain.ml/categories/%E7%BE%8E%E6%96%87%E6%AC%A3%E8%B5%8F/"/>
    
    
      <category term="人生感悟" scheme="https://www.dxain.ml/tags/%E4%BA%BA%E7%94%9F%E6%84%9F%E6%82%9F/"/>
    
      <category term="情感" scheme="https://www.dxain.ml/tags/%E6%83%85%E6%84%9F/"/>
    
      <category term="生活" scheme="https://www.dxain.ml/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>迟来的2018总结</title>
    <link href="https://www.dxain.ml/zh-cn/sum-of-2018.html"/>
    <id>https://www.dxain.ml/zh-cn/sum-of-2018.html</id>
    <published>2019-01-05T17:33:49.000Z</published>
    <updated>2019-01-05T17:33:49.000Z</updated>
    
    <content type="html"><![CDATA[<div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="输入密码，查看文章内容。" />    <label for="pass">输入密码，查看文章内容。</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      这是一篇加密文章，内容可能是个人情感宣泄或者收费技术。如果你确实想看，请与我联系。
    
    </summary>
    
      <category term="心情随笔" scheme="https://www.dxain.ml/categories/%E5%BF%83%E6%83%85%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="感悟" scheme="https://www.dxain.ml/tags/%E6%84%9F%E6%82%9F/"/>
    
      <category term="生活总结" scheme="https://www.dxain.ml/tags/%E7%94%9F%E6%B4%BB%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>Vue响应式原理</title>
    <link href="https://www.dxain.ml/zh-cn/vue-response-principle.html"/>
    <id>https://www.dxain.ml/zh-cn/vue-response-principle.html</id>
    <published>2018-12-25T20:12:49.000Z</published>
    <updated>2018-12-25T20:12:49.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>1、vue响应式原理就是对你数据的变化，vue会有一个响应，去完成某件事。<br>2、vue的响应式原理就是基于vue知道了数据发生了变化，那么vue是如何知道数据发生了变化呢？<br>3、数据劫持 vue.js 采用数据劫持结合发布者-订阅者模式的方式，通过Object.defineProperty()来劫持各个属性的setter,getter，在数据变动时发布消息给订阅者，触发相应的监听回调</p></blockquote><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.defineProperty()方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回这个值</span><br></pre></td></tr></table></figure><h5 id="4-数据劫持盲区">4、数据劫持盲区</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. vue 在实例化的时候会将data数据中的属性全部做数据劫持</span><br><span class="line">2. 如果时对象，也会迭代本身属性将全部属性都实现数据劫持</span><br><span class="line">3. 当赋值的时候，如果时newVal是对象，也会迭代newVal的属性实现全部属性的数据劫持</span><br><span class="line"></span><br><span class="line">什么时候会发生盲区：</span><br><span class="line">    比如说，data中现有一个obj 的值 list，但是现有list中没有name 这个属性。现在主动 list.name = 1，因为list.name的属性不是 Getter/Setter，所以赋值后不会去发布消息给订阅者，订阅者也没有办法更新。这就是数据劫持盲区 但是有一个有趣的现象：就是虽然obj.newparam不会发布消息，但是如果别的发布者触发的时候，页面局部渲染时如果包括obj.newparam的值，渲染效果也是会显示obj.newparam的最新值。这是由于页面更新时是直接读取的obj.newparam的值。</span><br></pre></td></tr></table></figure><h5 id="5-数组array的特殊性">5. 数组Array的特殊性</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vue中实现的方法实际是对数组的属性重写，重写过后的方法不仅能实现原有的功能，还能发布消息给订阅者。</span><br><span class="line"></span><br><span class="line">当然Array也有特殊现象：如果要更新 Array 某个索引对应的值得时候，要用Vue.set方式实现</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;1、vue响应式原理就是对你数据的变化，vue会有一个响应，去完成某件事。&lt;br&gt;
2、vue的响应式原理就是基于vue知道了数据发生了变化，那么vue是如何知道数据发生了变化呢？&lt;br&gt;
3、数据劫持 vue.js 采用数据劫持结合发布者-订阅者模式的方式，通过Object.defineProperty()来劫持各个属性的setter,getter，在数据变动时发布消息给订阅者，触发相应的监听回调&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="前端" scheme="https://www.dxain.ml/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="vue" scheme="https://www.dxain.ml/tags/vue/"/>
    
      <category term="原理" scheme="https://www.dxain.ml/tags/%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>为何一定要买一线城市的房子？</title>
    <link href="https://www.dxain.ml/zh-cn/bug-house.html"/>
    <id>https://www.dxain.ml/zh-cn/bug-house.html</id>
    <published>2018-09-15T20:42:23.000Z</published>
    <updated>2018-09-15T20:42:23.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="普通人投资最好的方式是什么？">普通人投资最好的方式是什么？</h3><p>那么毋庸置疑是房子。为什么说是房子呢？</p><p>因为买房子的难度低风险低，只有房子是保值增值最好的投资品。那么普通人能挣钱的方法和渠道有哪些, 工作? 创业? 投资？</p><a id="more"></a><ul><li>A. 对于工作，朝九晚五可以维系基本的生活，人生一眼可以看到头。</li><li>B. 对于创业，那是九死一生，你要有勇气，要有战略，有策略，会经营，懂管理，还要会抓建设。</li><li>C.对于投资，我个人认为风险第一，那么买房和其他的投资品，比如股票基金，期货外汇相比，买房的收益是七个人挣钱，两个人持平，一个人亏本，而股票却刚刚好相反。七个人亏本，两个人持平，一个人赚钱，十年前的股票，2600点，十年后的今天股票依然是2600点，而房子从十年前5000多块钱涨到现在的5万多块钱，所以证明股票是用来住的，房子是用来哈哈的，大家都懂。</li></ul><p>对于我个人而言，是从职场到创业到做企业，到买房。</p><blockquote><p>总结：明明可以买房致富，非要装逼创业。其实财富是认知的变现，人要有拥有财富的能力，更加要有驾驭财富的能力，为什么普通人投资最好的方式是买房，因为买房是大确定性低风险。</p></blockquote><h3 id="为什么要买房？年初不买房-一年又白忙-怎么解释呢？">为什么要买房？年初不买房，一年又白忙，怎么解释呢？</h3><p>1.通货膨胀，负债缩水，怎么讲呢，比如：20年前1万块钱，那可是全村的首富，那现在1万块钱可能会变成贫困户，如果我们1万块钱存在银行，银行支付利息给你，那么恭喜你从首富变成了贫困户，我们的钱存在银行，通货膨胀不值钱，如果我们20年前找银行借了1万块钱，买深圳的地建房，现在还银行的本金和利息，请问财富发生了什么变化？通货膨胀导致钱不值钱，那负债同样也会缩水。</p><p>2.货币贬值，先讲什么是货币？早期的货币是用贵金属，金，银，铜等来做交易，因为贵金属的稀缺性和铸造技术瓶颈等原因，难以量产，所以不容易引发严重的通货膨胀和财富变动，18世纪，纸币走上了历史舞台，通过印发纸币，政府可以简单粗暴的拿到资金，做国家的各项开销，纸币就是政府的信用背书。大家可以关注一下，2008年至2018年十年时间，广义货币供应量m2，从最初的47.5万亿增加到180.2万亿，增加3.8倍，十年里平均增速达到了16.35%，远超过GDP的年均7个点的增速。</p><p>3.明显的感受到工资上涨，物价上涨，当然房子也上涨。先说工资，十年前请一个收银员，月薪800到1000元，工作十小时，休息两天，现在请一个收银员，月薪4000元，工作八小时，休息四天。物价上涨，十年前一个鸡煲48块钱，四个人吃，平均客单价12块，现在198元一个鸡煲，四个人吃，平均客单价50左右，而房子的价格，2009年深圳平均单价，8000元每平方，2019年平均单价54000左右，平均增长了20.4%，十年增长了6.5倍，远超m2的平均增幅。<br>所以为什么要买房，因为房价上涨的速度高于工资上涨，物价上涨，所以年初不买房一年又白忙。</p><h3 id="买房投资理念是什么-？">“买房投资理念是什么”？</h3><ul><li><p>国家发展的红利，城市发展的红利；买房长期看人口，中期看土地，短期看金融，当下看政策，跟随人口城市化进程的发展，农村人赚到钱要去镇上生活，镇上的人赚到钱要去市里，市里的人赚到钱要去省会城市，省会城市的人赚到钱要来一线城市，人往高处走，水向低处流。</p></li><li><p>只有一线城市才有房地产，因为它是一个产业链，有金融属性，而三四线城市就是商品房给人消费的，所以买房就要买核心城市的核心资产。</p></li><li><p>在香港民间流传一句话，先上车再置换，讲的是不要等好存钱再去买房，先在当下买一个，用资产来追资产，涨一波再来置换。其实在深圳，30-40平方的房子，单价5万左右，总价也就150-200万，首付也就50万-60万，可以先在一线城市有一个物业再说。</p></li><li><p>那么具体怎么买，可以根据一个人的资产负债，收入支出，现金流来做个买房计划，那买房最大的风险是什么，月供，做好五年防守计划就可以了。</p></li></ul><h3 id="我的买房理念是四高一低-哪四高？高流通性-高租金-高杠杆-高收益-低风险">我的买房理念是四高一低，哪四高？高流通性，高租金，高杠杆，高收益，低风险</h3><p>买房投资是一个计算和计划，以及对财富的认知的过程。</p><p>买房是一道数学题。例如100万全款买一套房子，</p><p>1.如果房子涨了10%，房子的总价变成110万，那么投资回报率10%，如果100万的房子首付三成30万，房子同样涨10%，那么投资回报率33%，同样100万的房子，首付一成，10万的房子同样涨10%，那投资回报率百分之百，这数学题会做了吗？</p><p>2.这样有人就会说贷款有利息;没有利息，哪里有利润，那好吧，我买的房子我算过账，260万的房子，70万全包买完，贷款200万，月供10500，租金可以租到6000，月供差5500，(里面还有自己的还款的本金1800)，那10500-6000-1800=2700块，2700元*12个月=32400，260万总价的房子，大家可以算一下，房子每年涨多少可以覆盖成本。得出来的结论是32400÷260万=1.25%，这是有形的成本，还有无形的价值，还记得为什么要买房？里面有讲过通货膨胀和负债缩水吗？这样大家就知道明白了吧。</p><p>3.涨幅看选愁，赚钱靠杠杆，深圳买房无非是领涨 普涨 和补涨的问题。但是热点片区涨幅是很快，但首付比例，要高一些，补涨的片区可能涨得慢一些，因为涨得慢不好卖，所以可以买到性价比高的房子，首付低用长时间来看，只是先涨或是后涨的问题，那么投资的收益可是完全不同的。</p><h3 id="总结">总结</h3><p>买房是一道数学题，涨幅看选愁，赚钱靠杠杆，吃不穷，穿不穷，算不好帐，一辈子穷。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;普通人投资最好的方式是什么？&quot;&gt;普通人投资最好的方式是什么？&lt;/h3&gt;
&lt;p&gt;那么毋庸置疑是房子。为什么说是房子呢？&lt;/p&gt;
&lt;p&gt;因为买房子的难度低风险低，只有房子是保值增值最好的投资品。那么普通人能挣钱的方法和渠道有哪些, 工作? 创业? 投资？&lt;/p&gt;
    
    </summary>
    
      <category term="房产" scheme="https://www.dxain.ml/categories/%E6%88%BF%E4%BA%A7/"/>
    
    
      <category term="买房" scheme="https://www.dxain.ml/tags/%E4%B9%B0%E6%88%BF/"/>
    
      <category term="投资" scheme="https://www.dxain.ml/tags/%E6%8A%95%E8%B5%84/"/>
    
  </entry>
  
  <entry>
    <title>vue表格编辑</title>
    <link href="https://www.dxain.ml/zh-cn/vue-table-editing.html"/>
    <id>https://www.dxain.ml/zh-cn/vue-table-editing.html</id>
    <published>2018-05-30T19:33:49.000Z</published>
    <updated>2018-05-30T19:33:49.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>由于最近项目遇到需要在表格里面添加编辑并且对表格进行编辑判断，所以总结了下方法，希望为遇到类似问题的同学提供参考</p></blockquote><a id="more"></a><blockquote><p>HTML内容</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-table :data=<span class="string">"tableData"</span> border style=<span class="string">"width: 100%"</span>&gt;</span><br><span class="line">    &lt;el-table-column prop=<span class="string">"date"</span> label=<span class="string">"日期"</span> width=<span class="string">"180"</span>&gt;</span><br><span class="line">    &lt;<span class="regexp">/el-table-column&gt;</span></span><br><span class="line"><span class="regexp">    &lt;el-table-column prop="name" label="姓名" width="180"&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>el-table-column&gt;</span><br><span class="line">    &lt;el-table-column prop=<span class="string">"address"</span> label=<span class="string">"地址"</span>&gt;</span><br><span class="line">    &lt;<span class="regexp">/el-table-column&gt;</span></span><br><span class="line"><span class="regexp">    &lt;el-table-column label="编辑"&gt;</span></span><br><span class="line"><span class="regexp">      &lt;template slot-scope="scope"&gt;</span></span><br><span class="line"><span class="regexp">        &lt;el-form :model="scope.row" :rules="rules" ref="testForm"&gt;</span></span><br><span class="line"><span class="regexp">          &lt;el-form-item prop="test"&gt;</span></span><br><span class="line"><span class="regexp">            &lt;el-input v-model="scope.row.test" auto-complete="off"&gt;&lt;/</span>el-input&gt;</span><br><span class="line">          &lt;<span class="regexp">/el-form-item&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>el-form&gt;</span><br><span class="line">      &lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>el-table-column&gt;</span><br><span class="line">  &lt;<span class="regexp">/el-table&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>JS内容</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Main = &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">      <span class="keyword">const</span> testValidate = <span class="function"><span class="keyword">function</span>(<span class="params">rules, value, callback</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (value) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(value)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        rules:&#123;</span><br><span class="line">        test: [&#123;<span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">validator</span>: testValidate, <span class="attr">trigger</span>: <span class="string">'blur'</span>&#125;]</span><br><span class="line">        &#125;,</span><br><span class="line">        tableData: [&#123;</span><br><span class="line">          date: <span class="string">'2016-05-02'</span>,</span><br><span class="line">          name: <span class="string">'王小虎'</span>,</span><br><span class="line">          address: <span class="string">'上海市普陀区金沙江路 1518 弄'</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">          date: <span class="string">'2016-05-04'</span>,</span><br><span class="line">          name: <span class="string">'王小虎'</span>,</span><br><span class="line">          address: <span class="string">'上海市普陀区金沙江路 1517 弄'</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">          date: <span class="string">'2016-05-01'</span>,</span><br><span class="line">          name: <span class="string">'王小虎'</span>,</span><br><span class="line">          address: <span class="string">'上海市普陀区金沙江路 1519 弄'</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">          date: <span class="string">'2016-05-03'</span>,</span><br><span class="line">          name: <span class="string">'王小虎'</span>,</span><br><span class="line">          address: <span class="string">'上海市普陀区金沙江路 1516 弄'</span></span><br><span class="line">        &#125;]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">var</span> Ctor = Vue.extend(Main)</span><br><span class="line"><span class="keyword">new</span> Ctor().$mount(<span class="string">'#app'</span>)</span><br></pre></td></tr></table></figure><blockquote><p>效果</p></blockquote><p><img src="/uploads/vue%E8%A1%A8%E6%A0%BC%E7%BC%96%E8%BE%91/%E8%A1%A8%E6%A0%BC%E7%BC%96%E8%BE%91.jpg" alt="表格编辑"></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;由于最近项目遇到需要在表格里面添加编辑并且对表格进行编辑判断，所以总结了下方法，希望为遇到类似问题的同学提供参考&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="前端" scheme="https://www.dxain.ml/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="vuejs" scheme="https://www.dxain.ml/tags/vuejs/"/>
    
      <category term="表格" scheme="https://www.dxain.ml/tags/%E8%A1%A8%E6%A0%BC/"/>
    
  </entry>
  
  <entry>
    <title>前端库</title>
    <link href="https://www.dxain.ml/zh-cn/front-end-library.html"/>
    <id>https://www.dxain.ml/zh-cn/front-end-library.html</id>
    <published>2018-04-30T15:21:49.000Z</published>
    <updated>2018-04-30T15:21:49.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>收集一些自己遇到过（用过）的插件，demo一类，收集记录一下，亦或是觉得不错的知识点，查漏补缺，总结自己的不足之处</p></blockquote><a id="more"></a><h4 id="前端文档">前端文档</h4><p><a href="https://docschina.org/" target="_blank" rel="noopener">印记中文</a></p><p>深入挖掘国外前端新领域，为中国 Web 前端开发人员提供优质文档！</p><h4 id="小程序开发">小程序开发</h4><blockquote><p>美团mpvue</p></blockquote><p><a href="http://mpvue.com/" target="_blank" rel="noopener">mpvue文档</a></p><p><a href="https://github.com/mpvue/awesome-mpvue" target="_blank" rel="noopener">汇总awesome-mpvue</a></p><h4 id="前端库">前端库</h4><blockquote><p>vue日历组件</p></blockquote><p><a href="https://github.com/jinzhe/vue-calendar" target="_blank" rel="noopener">vue-calendar</a></p><p>基于vuejs+webpack环境使用的日期选择插件</p><p>精简类的日历，支持多选日期</p><p><a href="https://github.com/Wanderxx/vue-fullcalendar" target="_blank" rel="noopener">vue-fullcalendar</a></p><p>基于vuejs的fullcalendar，日历记事本一类的</p><p><a href="https://github.com/icai/vue2-calendar" target="_blank" rel="noopener">vue2-calendar</a></p><p>各种类型日历均有，价格日历，API丰富</p><p><a href="https://github.com/Real0n/vue-component-calendar" target="_blank" rel="noopener">vue-component-calendar</a></p><p>类似美团，移动端用，底部弹出层，可选开始与结束日期</p><blockquote><p>UI库</p></blockquote><p><a href="http://element.eleme.io/#/" target="_blank" rel="noopener">Element</a></p><p>基于 Vue 2.0 的组件库</p><p><a href="https://www.iviewui.com/" target="_blank" rel="noopener">iView</a></p><p>一套基于Vue.js的高质量的UI组件库</p><p><a href="https://github.com/vuejs/vuex" target="_blank" rel="noopener">Vuex</a></p><p>应用设计的状态管理架构</p><p><a href="https://github.com/airyland/vux" target="_blank" rel="noopener">Vux</a></p><p>基于 Vue 和 WeUI 的移动端 UI 组件库</p><blockquote><p>价格日历</p></blockquote><p><a href="https://github.com/fugm/PriceCalendar" target="_blank" rel="noopener">酒店价格日历</a></p><p>基于YUI3开发的价格日历组件</p><p><a href="https://github.com/wind-stone/price-calendar" target="_blank" rel="noopener">price-calendar</a></p><p>价格日历，可以统一设置全月每天的价格，还可以单独设置某天的价格</p><p><a href="https://github.com/liukaijv/price-calendar" target="_blank" rel="noopener">price-calendar</a></p><p>精简价格展示日历</p><p><a href="https://github.com/lscho/am-daymoney" target="_blank" rel="noopener">daymoney</a></p><p>简易价格日历，可编辑价格</p><blockquote><p>滚动条插件</p></blockquote><p><a href="https://github.com/itmyhome2013/jquery-custom-content-scroller" target="_blank" rel="noopener">jquery-custom-content-scroller</a></p><p>页面多列滚动布局</p><blockquote><p>ES6知识</p></blockquote><p><a href="https://github.com/hanekaoru/es6-cheatsheet-chinese" target="_blank" rel="noopener">es6-cheatsheet-chinese</a></p><p>ES6中文版，包括一些常用代码片段</p><blockquote><p>ES5规范</p></blockquote><p><a href="https://www.w3.org/html/ig/zh/wiki/ES5" target="_blank" rel="noopener">ES5</a></p><blockquote><p>前端书籍</p></blockquote><p><a href="http://www1.w3cfuns.com/feres.php?do=picture&amp;listtype=book" target="_blank" rel="noopener">前端书籍墙（电子书）</a></p><p><a href="http://pan.baidu.com/share/home?uk=1866459472#category/type=0" target="_blank" rel="noopener">百度盘分享书籍（电子书）</a></p><blockquote><p>JSON在线效验工具</p></blockquote><p><a href="http://jsonlint.com/" target="_blank" rel="noopener">JSONLint</a></p><blockquote><p>HTML各个版本head头部样式</p></blockquote><p><a href="http://lab.dimpurr.com/html-head-generator/" target="_blank" rel="noopener">HTML head Generator</a></p><blockquote><p>工具库</p></blockquote><p><a href="https://github.com/jashkenas/underscore" target="_blank" rel="noopener">underscore</a></p><p><a href="https://github.com/madrobby/zepto" target="_blank" rel="noopener">zepto</a></p><p><a href="https://github.com/jashkenas/backbone" target="_blank" rel="noopener">backbone</a></p><p><a href="https://icomoon.io/" target="_blank" rel="noopener">icomoon</a> 图片字体</p><blockquote><p>Vue学习建议</p></blockquote><p><a href="https://zhuanlan.zhihu.com/p/23134551" target="_blank" rel="noopener">Vue 2.0 的建议学习顺序</a></p><h4 id="各大框架包管理">各大框架包管理</h4><p><a href="https://libraries.io" target="_blank" rel="noopener">Libraries</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;收集一些自己遇到过（用过）的插件，demo一类，收集记录一下，亦或是觉得不错的知识点，查漏补缺，总结自己的不足之处&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="前端" scheme="https://www.dxain.ml/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="工具" scheme="https://www.dxain.ml/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="前端库" scheme="https://www.dxain.ml/tags/%E5%89%8D%E7%AB%AF%E5%BA%93/"/>
    
      <category term="组件" scheme="https://www.dxain.ml/tags/%E7%BB%84%E4%BB%B6/"/>
    
      <category term="小程序" scheme="https://www.dxain.ml/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>elementui表格头提示信息</title>
    <link href="https://www.dxain.ml/zh-cn/elementui-table-header-prompt-information.html"/>
    <id>https://www.dxain.ml/zh-cn/elementui-table-header-prompt-information.html</id>
    <published>2018-04-25T11:22:33.000Z</published>
    <updated>2018-04-25T11:22:33.000Z</updated>
    
    <content type="html"><![CDATA[<h5 id="第一步">第一步</h5><blockquote><p>在表格添加 :render-header=“renderHeader”</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-table :data=<span class="string">"tableData"</span> border style=<span class="string">"width: 100%"</span>&gt;</span><br><span class="line">    &lt;el-table-column inline-template label=<span class="string">"日期"</span> width=<span class="string">"180"</span> :render-header=<span class="string">"renderHeader"</span>&gt;</span><br></pre></td></tr></table></figure><h5 id="第二步">第二步</h5><blockquote><p>在method方法里添加方法</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">renderHeader(createElement, &#123; column, _self&#125;) &#123;</span><br><span class="line">      <span class="keyword">let</span> label = column.label</span><br><span class="line">        <span class="keyword">return</span> createElement(<span class="string">'div'</span>,&#123;<span class="string">'class'</span> : <span class="string">'header-center'</span>&#125;,</span><br><span class="line">          [</span><br><span class="line">            createElement(<span class="string">'span'</span>, &#123;<span class="attr">attrs</span>: &#123;<span class="attr">type</span>: <span class="string">'text'</span>&#125;&#125;, [label]),</span><br><span class="line">            createElement(<span class="string">'el-tooltip'</span>,</span><br><span class="line">            &#123;</span><br><span class="line">                attrs: &#123;</span><br><span class="line">                  <span class="string">'content'</span>: <span class="string">'这是一个提示'</span>,</span><br><span class="line">                          <span class="string">'placement'</span>: <span class="string">'top'</span></span><br><span class="line">                          &#125;</span><br><span class="line">                 &#125;,</span><br><span class="line">                 [</span><br><span class="line">               createElement(<span class="string">'i'</span>, &#123;<span class="string">'class'</span>: <span class="string">'el-icon-information'</span>&#125;)</span><br><span class="line">              ]</span><br><span class="line">               )</span><br><span class="line">               <span class="comment">/* createElement('i', &#123;'class': 'el-icon-information ml-5'&#125;) */</span></span><br><span class="line"></span><br><span class="line">          ]</span><br><span class="line">        );</span><br><span class="line">      &#125;,</span><br></pre></td></tr></table></figure><blockquote><p>效果</p></blockquote><p><img src="/uploads/%E8%A1%A8%E6%A0%BC%E5%A4%B4%E6%8F%90%E7%A4%BA/%E8%A1%A8%E6%A0%BC%E5%A4%B4%E6%8F%90%E7%A4%BA.jpg" alt="表格头提示"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;第一步&quot;&gt;第一步&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;在表格添加 :render-header=“renderHeader”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;
      
    
    </summary>
    
      <category term="前端" scheme="https://www.dxain.ml/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="表格头" scheme="https://www.dxain.ml/tags/%E8%A1%A8%E6%A0%BC%E5%A4%B4/"/>
    
      <category term="elementUI" scheme="https://www.dxain.ml/tags/elementUI/"/>
    
  </entry>
  
  <entry>
    <title>对过去，要淡；对现在，要惜。对未来，要信</title>
    <link href="https://www.dxain.ml/zh-cn/trust-in-the-future.html"/>
    <id>https://www.dxain.ml/zh-cn/trust-in-the-future.html</id>
    <published>2018-04-23T14:28:11.000Z</published>
    <updated>2018-04-23T14:28:11.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1547389418814&amp;di=46d4909377faaa5db5cc021ba6032685&amp;imgtype=0&amp;src=http%3A%2F%2Fbaiducdn.pig66.com%2Fuploadfile%2F2016%2F0324%2F20160324103946535.jpg" alt="图1"></p><a id="more"></a><p>​</p><p style="text-indent:2em"><br>幸福的人生，需要三种姿态 ：对过去，要淡；对现在，要惜。对未来，要信。人生的答卷没有橡皮擦，写上去就无法再更改，过去的就让它过去，否则就是跟自己过不去。真正属于你的，只有活生生的现在，只有握得住当下，才有可能掌控自己的命运。只有相信未来，相信自己，今天的你才能成就明天的你。</p><p></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://timgsa.baidu.com/timg?image&amp;amp;quality=80&amp;amp;size=b9999_10000&amp;amp;sec=1547389418814&amp;amp;di=46d4909377faaa5db5cc021ba6032685&amp;amp;imgtype=0&amp;amp;src=http%3A%2F%2Fbaiducdn.pig66.com%2Fuploadfile%2F2016%2F0324%2F20160324103946535.jpg&quot; alt=&quot;图1&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="心情随笔" scheme="https://www.dxain.ml/categories/%E5%BF%83%E6%83%85%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="人生感悟" scheme="https://www.dxain.ml/tags/%E4%BA%BA%E7%94%9F%E6%84%9F%E6%82%9F/"/>
    
      <category term="哲理" scheme="https://www.dxain.ml/tags/%E5%93%B2%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>前端路线</title>
    <link href="https://www.dxain.ml/zh-cn/front-end-route.html"/>
    <id>https://www.dxain.ml/zh-cn/front-end-route.html</id>
    <published>2018-04-16T13:33:49.000Z</published>
    <updated>2022-07-23T10:32:11.502Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/oxsayps.png" alt="Web Developer Roadmap"></p><h2 id="声明">声明</h2><blockquote><p>这个路线图的本意是让你对整体有一个大致的了解，并能在当你为接下来需要学习什么而感到困惑时引导你，而不是鼓励你去学习那些时尚和潮流的东西 (what is hip and trendy)。你应该对关于 <strong>为什么一个工具在某些场景下比另一个更适合使用有自己的理解 (grow some understanding)，并记住时尚和潮流永远不意味着它最适合这份工作 (best suited for the job)</strong></p></blockquote><h2 id="🚀-介绍">🚀 介绍</h2><p><img src="https://note.youdao.com/yws/api/personal/file/WEB0d948dea73e2cba38188b82c458ba647?method=download&amp;shareKey=d58d37a08f577097dc2bbddee8f1bdc4" alt></p><h2 id="🎨-前端路线图">🎨 前端路线图</h2><p><img src="https://note.youdao.com/yws/api/personal/file/WEB6b82fed332c42e8e883bb892d9cad6ec?method=download&amp;shareKey=d58d37a08f577097dc2bbddee8f1bdc4" alt></p><h2 id="👽-后端路线图">👽 后端路线图</h2><p><img src="https://note.youdao.com/yws/api/personal/file/WEB2e094ae7b50152c18f0dceeab3b2efef?method=download&amp;shareKey=d58d37a08f577097dc2bbddee8f1bdc4" alt></p><h2 id="👷-devops-路线图">👷 DevOps 路线图</h2><p><img src="https://note.youdao.com/yws/api/personal/file/WEBd7fa3a35262af3d62c4b89d4e49bb42e?method=download&amp;shareKey=d58d37a08f577097dc2bbddee8f1bdc4" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://i.imgur.com/oxsayps.png&quot; alt=&quot;Web Developer Roadmap&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;声明&quot;&gt;声明&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;这个路线图的本意是让你对整体有一个大致的了解，并能
      
    
    </summary>
    
      <category term="前端" scheme="https://www.dxain.ml/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="学习路线" scheme="https://www.dxain.ml/tags/%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/"/>
    
      <category term="大前端" scheme="https://www.dxain.ml/tags/%E5%A4%A7%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>对js的call和apply的理解</title>
    <link href="https://www.dxain.ml/zh-cn/understanding-call-apply.html"/>
    <id>https://www.dxain.ml/zh-cn/understanding-call-apply.html</id>
    <published>2018-03-17T15:33:49.000Z</published>
    <updated>2018-03-17T15:33:49.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><ol><li>apply和call的区别在哪里？</li><li>什么情况下用哪apply什么情况下用call？</li><li>apply的其他巧妙用法？</li></ol></blockquote><a id="more"></a><ul><li>首先理解下为什么要用call 和 apply?在js的OOP（面向对象编程）中，经常这样用</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义了一个叫cat的构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cat</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 每个对象都有个隐藏的原型属性，叫prototype。</span></span><br><span class="line">cat.prototype=&#123;</span><br><span class="line">food:<span class="string">"fish"</span>,</span><br><span class="line">say:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"喵喵喵~"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 对这个对象进行实例化</span></span><br><span class="line"><span class="keyword">var</span> black_cat=<span class="keyword">new</span> cat();</span><br><span class="line">black_cat.say();  <span class="comment">//喵喵喵~</span></span><br><span class="line"></span><br><span class="line">但是如果我们有一个对象white_cat=&#123;<span class="attr">food</span>:<span class="string">"bone"</span>&#125;,我们不想对他重新定义say方法。那么久可以用</span><br><span class="line">black_cat的say方法：</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> white_cat;</span><br><span class="line">black_cat.say.call(white_cat)   <span class="comment">//喵喵喵~</span></span><br><span class="line">black_cat.say.apply(white_cat)   <span class="comment">//喵喵喵~</span></span><br><span class="line"></span><br><span class="line">所以：call和apply就是为了动态改变<span class="keyword">this</span>而存在的。 call、apply方法能劫持另外一个对象的方法，继承另外一个对象的属性.</span><br></pre></td></tr></table></figure><ul><li><p>function.call(obj,params)方法能接受两个参数，obj：代表function类里面的this对象 。params是参数列表。</p></li><li><p>function.apply(obj,arr)方法能接受两个参数，obj：代表function类里面的this对象 。arr是参数数组。<br>所以：call和apply的意思差不多。只是接受参数的形式不一样。</p></li><li><p>apply的巧妙用法：</p></li><li><p>Array.prototype.push 可以实现两个数组合并</p></li><li><p>同样push方法没有提供push一个数组,但是它提供了push(param1,param,…paramN) 所以同样也可以通过apply来装换一下这个数组,即:</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1=<span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">"1"</span>,<span class="string">"2"</span>,<span class="string">"3"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr2=<span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">"4"</span>,<span class="string">"5"</span>,<span class="string">"6"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.prototype.push.apply(arr1,arr2);</span><br><span class="line">或者求数组里面的最大值：</span><br><span class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line"><span class="built_in">Math</span>.max.apply(<span class="literal">null</span>,arr)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;apply和call的区别在哪里？&lt;/li&gt;
&lt;li&gt;什么情况下用哪apply什么情况下用call？&lt;/li&gt;
&lt;li&gt;apply的其他巧妙用法？&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="前端" scheme="https://www.dxain.ml/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="js" scheme="https://www.dxain.ml/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>遇见</title>
    <link href="https://www.dxain.ml/zh-cn/to-meeting.html"/>
    <id>https://www.dxain.ml/zh-cn/to-meeting.html</id>
    <published>2018-01-12T14:28:11.000Z</published>
    <updated>2018-01-12T14:28:11.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1547389254073&amp;di=7454cc0ddcadfc1a991a0ab343ada5f8&amp;imgtype=0&amp;src=http%3A%2F%2Fp0.ssl.cdn.btime.com%2Ft01bf937b6e6d28e244.png%3Fsize%3D638x342" alt></p><a id="more"></a><font size="4"><blockquote class="blockquote-center"><p>在对的时间遇到对的人，幸福。</p><p>​  在错的时间遇到对的人，遗憾。</p><p>​  在对的时间遇到错的人，失望。</p><p>​  在错的时间遇到错的人，痛苦。</p></blockquote></font>​]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://timgsa.baidu.com/timg?image&amp;amp;quality=80&amp;amp;size=b9999_10000&amp;amp;sec=1547389254073&amp;amp;di=7454cc0ddcadfc1a991a0ab343ada5f8&amp;amp;imgtype=0&amp;amp;src=http%3A%2F%2Fp0.ssl.cdn.btime.com%2Ft01bf937b6e6d28e244.png%3Fsize%3D638x342&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="心情随笔" scheme="https://www.dxain.ml/categories/%E5%BF%83%E6%83%85%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="人生感悟" scheme="https://www.dxain.ml/tags/%E4%BA%BA%E7%94%9F%E6%84%9F%E6%82%9F/"/>
    
      <category term="哲理" scheme="https://www.dxain.ml/tags/%E5%93%B2%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>写给2018年的自己，再见2017，你好2018！</title>
    <link href="https://www.dxain.ml/zh-cn/to-myself-2018.html"/>
    <id>https://www.dxain.ml/zh-cn/to-myself-2018.html</id>
    <published>2017-12-31T10:12:46.000Z</published>
    <updated>2017-12-31T10:12:46.000Z</updated>
    
    <content type="html"><![CDATA[<div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="输入密码，查看文章内容。" />    <label for="pass">输入密码，查看文章内容。</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">U2FsdGVkX19EHGdmXRcbYnVEmOEImChBHrzDWHjlsmZVOKQyWVLVFcUCFSzkhDiJX7ytn3sGyDYnezzUtBRAfgOuFUk6C9iDiCeUZKq8bBnEAAC8St9Fji+OVH9V7y5277VP0ym9XXI7E1ZvjXEACc1PQrLeIsG20F2Qp3Zkf9or3OvY28B9tY9jo1SFK90RsoMXBCDOOJDGfMrQPKFiXG/Lmeehwvpa3TpOT7DypZ1FyquPUItoXA+ODusMfpZjfIxS3pgLhut/p56NY7k+fhmohHfRgPh4B8kGps7Y3b49kegDmXiiH8fH0NojN3CI9t5RjAVFq+5PwxxS9FVidol7uqVbg8Oe9Xct8FVny5aLuX27UNzfmiSrVom9VhDZETBnK/c1b+zp4rpppL39yB3KxeZJxUhYMU2U9Hv5VDfZIEvZ+iplNqqKruW0FHLJ8Pm7GmXrGt1/ljHOn2YAI1QBtFv9wHLf6b712MFG2/zaf8vFfr/COhnSlLu1S4NhWYP2Sw6G/uIQ6uWPxqYvpt1iWq4EpF/8X1uI7hX2sGtHpSamHgvodwlirK8xGGh9ESjtss3jgmB4kQnZgxygTc/A2mfjCpPnqwUgpVvepE4ba6S9hqT2+TWQQaeDdBN4T3CX2KyxHfoVVhattL0ndRp4kn6zVB9G1bfLJHsRKwO4e5x8ZTFwvhagLVAjmJrEOwwswHg3ZnbEdei+8kdZ3LK2DjjWNWYFpu5R6qCEapwQGOSSBhK2k7eY9jKtKyfT/PAqxPIAEP8DGOWyCkuekWYTwLPUVdDHoVckQrveuHyTIDAOBei6143ejyUduCEz/D8INCrKAcHrwlhZOiF8jfBhxoJb98ZAo+wm64o8sZRl9zbNnykMvLFbK/WkQPBRstNXKbBGJXV+AQJHtkhenvbwIWs69B/yEXpvc4xbsx43MQVy29hpVtuW/fMnJz0VMrn0HqDbCeoPj48rCTSSBsogz4Q+dh+l5byIAhGCkX3MxVv3KfW3EJvTO8NSB59cgedtINoKmikO1Snkpzhme/Kqqrr3XCdsLJ4bsRDcFuZWWhcOCEv6c35YgC8IHbBL93LJyw+XBzIms/+CWzgZJxdDqUsh0pBXXVD6CG3gqYdtVlmVh8fqyDlivGAhLUs9S8/VN97zfG3EjstgRdEjGqvx6+zCwhqizrPcXRfkm/3JWTg8DeTaC+PtZXhqsX27Kc7GEHOuJ5pYwWGNCJLcnv9K6j0u2ytr3nXCUhZvokwHGKAH22GiRkxw520Utw1tM0eHx0j6+W8mWE68sbZNGzQTC5Aeyh+TpGWPTcf1j/IUIef66dVcaci3D62xsscxjKll33alOq72sonh3naGjvttG7Yazdgqhg6jL02jwXJ1yWBlkzGmz4/WrSBx4FgydvuiGRxTSg00N4YmbgHL3wvrUYdh4ZzEICMsmB4k54gSnpLi96s+ddwFa17024GtzLMn3FzbGNIxPHXe3XpxeOHQjlvRp1xcFNV/KREP+pMQPHbpQ9TWJV4xBZBk7X/5oKD0zhokAQPYzvlvtouH6ZC6Z9WcrkHOuMsIxTbgu1FWWo8iHkXMYKgyUAfm3NYaIgh3BQsonQvzeyNaZbnzpncdDjxkWtm9nvOTiDgw4osNPNdkyr1O6YrtkzwX96EpGM1XREndSO4MvbTn+81yzGCUiepMX8ys5LAyTSaDImOUtsAyymgoEdwRpHKMbgxWfB2bjNLo4JzU7dupBWhDMBw5U1hh3JhoPhF2WVh0+PktsgA6CxZhsRRlgphAxtdZYxO/uLcnSJ4AT7IVEW6Xx7a1aNC4Qii+C2qFDu7/9pE5iQ7xx29KkC81Htu3MhstmUQUH8o2ryZt535e1SHnfTNUGJoEYfIfjT2GUWJw4bPWJ6WhOmJ2P1bfFDwqFPSoXAyVSIKM5tKaeBkjyTYCFkYBwtWOUAoRG/QXYgXdZaR8S9z4eeL2d1N8Is/HaYQl2dG8/5pvPRZZDPnQlMlmOErl/NYDOcucuamv9CPkxYi/xXKTeWFSmcMMf2b22ynp+JWgnNXO9jECbzxm+YZboNDyPzIa/y7khFY46D18nU/PHZd5bsfPjxIPHBjVQfU32jmRykBkuvsJ0l3TPSo25Hv3JYBroDOg2tjwvfzZyo8sMqEr4DX9QT+HskUWhMJQ+o9peZM6QyBT4ouIlewtCDf/Y/F9Oca/sM9aARvkICOotUdA5kycvpBiCBbekqR570dmraTpkauQjNARQgnpoDTqluATPIJO6r/rZDNQrCNpcbAdeepy7vDR0odMNDNWBrHbtBAw22I+FeOlbOX4yGjfNDhXBzcxhATRICTJusxQz0iHbbJ1njuibVMEUjH3cP46H7aXH51Oc+fPlL2AMgYaVf2tUFF82JsBKRX8Ou11JZTwpjV4DE2P0UfeiM9ubDcg92roX6UPd4GXTwu69oRItbo1b0BwQ20PLBtCIZXnk+7vkaEorO6k8sfV4uUudFBDnaKtP71LT//rfDcf6mjlZH6qGtO7LBzjawrORJML+vG9n6BdpAwH+24W2CAMhs+8YixNAF7VFnEu0AazatkI61c0KxDnybHvnjaxl9NmHhIIk2SwLA287u9+DrQyECAHTQQbSvioQV3grTGvJLVF4cnPt3DEjRC6hra6565uWz0pKJzSpGTu6zurUytQDkZGcmfyTMGtHIXXq6sT0zJtlu2jYae4eK3MRI7Xlld3hupqHxzkYvO+W/6rkYAjHMq3JdJghdGVJplb9YLHXxrWNsEMWX8YJaH394o0U9pFeB24zXxSYQhl3Q4Mg83lcEUuor5G6F2dBVDW5/F4lqOdvnmU7hk7RxBBuSItlmuCXfwm63sB1gjKmtryiO0lMQpskowxEAMSo+mf5Uz5uaUu7x8OATKQsTBsNEv3oS4DYluRbUHrvHZNmSbdu8LYsgow+KhPpJd0umtYTHmpNNw5oaVovM4VYrhnnmhKxpT+aE7DoS/nyKGWoRwCAP6PCDof+RnNFDY5SqjhiHlvhCbH/PSXRQXCnrNkjz6gST/G5L3/D8XBULU3UusiP14blAwHnRHxGEsDf+nctzLGaS73BQPbu/FCwiAcXRwYcrqV802OjEUFJiFotl3Xh5NOcBYdUc/jT3Yd7wNUNmRSr1JBHl20H5ra/G81pggBVsyWaH4JFhRQLuKZN3w6RWvb5ZPeeEcXLV1qPS7j6eipJmX1xGMMggX4DwzKH5bfcFlE3BPmOP++8XgB4X3nD0iUdQ6kxPJzSNHUA3jF4dbl+y7IlGarObl4v29GjR8qZXCVnxkZT0RrWYOnHfBVWZafZUsKrPD7KsLMl64mHU6qVEpeQaeDXY+uhC8hElIMDV2egb43+cxSOvIKYQLw2ZpxiCyuqA8CVifVWWdt5teQKL9K28+lw5SjWkni0/BEPZbFtDfOr2k7YWYnOK62yHJXn+UmcI0bTU5pSOqxIhfoA1NfdaSn677nqqLVH4Q94ArMzZxVQom8/JS9/F4xH5D6Cz34LyApeSiMKJyFJL7dCu4O0Xserqa18qXzkBFSnfrhX4ewfeTtv9/YX6kM1OCSEp/hCrm6FqInayswOziyLkQq81M/Z6O/K0eAuqFIiDoKKGB2T2Klox6bLfwnAWWaNQiNn1SOgSNB7saLAEHZISgA/C7ooVr0EYT4XN+loj2gJo5SUJ6mGraRqRYweILb4qcXSYHUOD/P7hD2/E+Gy4yIajg+N26UeIXnv6OeryLToFtjK09qHDc80XN8dvDK7ctjjZ0lneLbjDpUcjq9bkrqG3vERmy74lKtnwukGijmcWe7oQa3gmR5VUIJFi1nqEnJaM0C8DF979qPedw0C2CKBnXuc4ejEIJmBu1qVSVI1fAQJlC3vdeT/ZOHLNE+ob/s2OWwX5xAi2IaVBcxFMIfjkvsHy7Kow63dc+lB07V6vnbbQ+GWPLFRkyRBNI8</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      这是一篇加密文章，内容可能是个人情感宣泄或者收费技术。如果你确实想看，请与我联系。
    
    </summary>
    
      <category term="心情随笔" scheme="https://www.dxain.ml/categories/%E5%BF%83%E6%83%85%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="感悟" scheme="https://www.dxain.ml/tags/%E6%84%9F%E6%82%9F/"/>
    
      <category term="励志" scheme="https://www.dxain.ml/tags/%E5%8A%B1%E5%BF%97/"/>
    
      <category term="生活总结" scheme="https://www.dxain.ml/tags/%E7%94%9F%E6%B4%BB%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript里的循环方法</title>
    <link href="https://www.dxain.ml/zh-cn/loop-method-in-javaScript.html"/>
    <id>https://www.dxain.ml/zh-cn/loop-method-in-javaScript.html</id>
    <published>2017-07-25T21:08:22.000Z</published>
    <updated>2017-07-25T21:08:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>JavaScript诞生已经有20多年了，我们一直使用的用来循环一个数组的方法是这样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for (var index = 0; index &lt; myArray.length; index++) &#123;</span><br><span class="line">  console.log(myArray[index]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自从JavaScript5起，我们开始可以使用内置的forEach方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">myArray.forEach(function (value) &#123;</span><br><span class="line">  console.log(value);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>写法简单了许多，但也有短处：你不能中断循环(使用<code>break</code>语句或使用<code>return</code>语句。</p><p>JavaScript里还有一种循环方法：<code>for–in</code></p><p>for-in循环实际是为循环”enumerable“对象而设计的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123;a:1, b:2, c:3&#125;;</span><br><span class="line"></span><br><span class="line">for (var prop in obj) &#123;</span><br><span class="line">  console.log(&quot;obj.&quot; + prop + &quot; = &quot; + obj[prop]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 输出:</span><br><span class="line">// &quot;obj.a = 1&quot;</span><br><span class="line">// &quot;obj.b = 2&quot;</span><br><span class="line">// &quot;obj.c = 3&quot;</span><br></pre></td></tr></table></figure><p>你也可以用它来循环一个数组：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for (var index in myArray) &#123;    // 不推荐这样</span><br><span class="line">  console.log(myArray[index]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不推荐用for-in来循环一个数组，因为，不像对象，数组的<code>index</code>跟普通的对象属性不一样，是重要的数值序列指标。</p><p>总之，<code>for–in</code>是用来循环带有字符串key的对象的方法。</p><ol><li>for-of循环</li></ol><p>JavaScript6里引入了一种新的循环方法，它就是for-of循环，它既比传统的for循环简洁，同时弥补了forEach和for-in循环的短板。</p><p>我们看一下它的for-of的语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for (var value of myArray) &#123;</span><br><span class="line">  console.log(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>for-of的语法看起来跟for-in很相似，但它的功能却丰富的多，它能循环很多东西。</p><p>for-of循环使用例子：</p><blockquote><p>循环一个数组(Array):</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">let iterable = [10, 20, 30];</span><br><span class="line"></span><br><span class="line">for (let value of iterable) &#123;</span><br><span class="line">  console.log(value);</span><br><span class="line">&#125;</span><br><span class="line">// 10</span><br><span class="line">// 20</span><br><span class="line">// 30</span><br></pre></td></tr></table></figure><p>我们可以使用<code>const</code>来替代<code>let</code>，这样它就变成了在循环里的不可修改的静态变量。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">let iterable = [10, 20, 30];</span><br><span class="line"></span><br><span class="line">for (const value of iterable) &#123;</span><br><span class="line">  console.log(value);</span><br><span class="line">&#125;</span><br><span class="line">// 10</span><br><span class="line">// 20</span><br><span class="line">// 30</span><br></pre></td></tr></table></figure><blockquote><p>循环一个字符串：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">let iterable = &quot;boo&quot;;</span><br><span class="line"></span><br><span class="line">for (let value of iterable) &#123;</span><br><span class="line">  console.log(value);</span><br><span class="line">&#125;</span><br><span class="line">// &quot;b&quot;</span><br><span class="line">// &quot;o&quot;</span><br><span class="line">// &quot;o&quot;</span><br></pre></td></tr></table></figure><blockquote><p>循环一个类型化的数组(TypedArray)：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">let iterable = new Uint8Array([0x00, 0xff]);</span><br><span class="line"></span><br><span class="line">for (let value of iterable) &#123;</span><br><span class="line">  console.log(value);</span><br><span class="line">&#125;</span><br><span class="line">// 0</span><br><span class="line">// 255</span><br></pre></td></tr></table></figure><blockquote><p>循环一个Map:</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">let iterable = new Map([[&quot;a&quot;, 1], [&quot;b&quot;, 2], [&quot;c&quot;, 3]]);</span><br><span class="line"></span><br><span class="line">for (let [key, value] of iterable) &#123;</span><br><span class="line">  console.log(value);</span><br><span class="line">&#125;</span><br><span class="line">// 1</span><br><span class="line">// 2</span><br><span class="line">// 3</span><br><span class="line"></span><br><span class="line">for (let entry of iterable) &#123;</span><br><span class="line">  console.log(entry);</span><br><span class="line">&#125;</span><br><span class="line">// [a, 1]</span><br><span class="line">// [b, 2]</span><br><span class="line">// [c, 3]</span><br></pre></td></tr></table></figure><blockquote><p>循环一个 Set:</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">let iterable = new Set([1, 1, 2, 2, 3, 3]);</span><br><span class="line"></span><br><span class="line">for (let value of iterable) &#123;</span><br><span class="line">  console.log(value);</span><br><span class="line">&#125;</span><br><span class="line">// 1</span><br><span class="line">// 2</span><br><span class="line">// 3</span><br></pre></td></tr></table></figure><blockquote><p>循环一个 DOM collection</p></blockquote><p>循环一个DOM collections，比如NodeList，之前我们讨论过如何循环一个NodeList，现在方便了，可以直接使用for-of循环：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// Note: This will only work in platforms that have</span><br><span class="line">// implemented NodeList.prototype[Symbol.iterator]</span><br><span class="line">let articleParagraphs = document.querySelectorAll(&quot;article &gt; p&quot;);</span><br><span class="line"></span><br><span class="line">for (let paragraph of articleParagraphs) &#123;</span><br><span class="line">  paragraph.classList.add(&quot;read&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>循环一个拥有enumerable属性的对象</p></blockquote><p>for–of循环并不能直接使用在普通的对象上，但如果我们按对象所拥有的属性进行循环，可使用内置的Object.keys()方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for (var key of Object.keys(someObject)) &#123;</span><br><span class="line">  console.log(key + &quot;: &quot; + someObject[key]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>循环一个生成器(generators)</p></blockquote><p>我们可循环一个生成器(generators):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">function* fibonacci() &#123; // a generator function</span><br><span class="line">  let [prev, curr] = [0, 1];</span><br><span class="line">  while (true) &#123;</span><br><span class="line">    [prev, curr] = [curr, prev + curr];</span><br><span class="line">    yield curr;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">for (let n of fibonacci()) &#123;</span><br><span class="line">  console.log(n);</span><br><span class="line">  // truncate the sequence at 1000</span><br><span class="line">  if (n &gt;= 1000) &#123;</span><br><span class="line">    break;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;JavaScript诞生已经有20多年了，我们一直使用的用来循环一个数组的方法是这样的：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;
      
    
    </summary>
    
      <category term="前端" scheme="https://www.dxain.ml/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="总结" scheme="https://www.dxain.ml/tags/%E6%80%BB%E7%BB%93/"/>
    
      <category term="JavaScript" scheme="https://www.dxain.ml/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>使用ionic打包android apk的教程</title>
    <link href="https://www.dxain.ml/zh-cn/use-ionic-apk.html"/>
    <id>https://www.dxain.ml/zh-cn/use-ionic-apk.html</id>
    <published>2017-06-23T20:12:36.000Z</published>
    <updated>2022-07-23T10:32:11.502Z</updated>
    
    <content type="html"><![CDATA[<p>Ionic(ionicframework)一款开源的Html5移动App开发框架,是AngularJS移动端解决方案,Ionic以流行的原生移动开发SDK为蓝本,使开发过原生iOS或安卓app的任何人都容易理解，下面我们来看一篇关于使用ionic打包android apk例子吧。<br>ionic进行开发完项目后，需要进行打包。如果需要上架的话，在Android端，打完包后还需要签名然后上传至各应用商店。<br>首先是关于apk签名，Android程序的安装是以包名（package name）进行区分的，就是同样的包名会被认作是同一个程序。这样就可以进行升级、替换。但是包名是一个可以被查看的字符串，这样就可能被伪造，然后其他人就可以自己创建一个应用去替代你的应用，结果可想而知。而签名就是为了防止这样的情况发生，当你的程序被签名后安装，只有同样包名与签名的程序才能被替换安装。而签名是不可能简单被伪造的，从而保证了程序的安全性。</p><ol><li>一、打包apk</li></ol><p>ionic bulid android   //打包测试包<br>ionic build --release android  //打包正式包<br>ionic里面打包的命令特别简单，只需要一条命令，上面一条命令是用来打包测试包的，里面已经包含了签名，可以直接在手机上安装，但是不能用来上应用市场，第二条命令是打包成一个没有签名的apk，不能直接安装，需要进行第二个步骤。</p><ol start="2"><li>二、签名apk</li></ol><p>1.生成签名(.keystore)文件<br>keytool -genkey -v -keystore demo.keystore -alias demo.keystore -keyalg RSA -validity 20000<br>keytool是工具名称，-genkey意味着执行的是生成数字证书操作，-v表示将生成证书的详细信息打印出来；<br>-keystore demo.keystore 证书的文件名；<br>-alias demo.keystore 表示证书的别名<br>-keyalg RSA 生成密钥文件所采用的算法；<br>-validity 20000 该数字证书的有效期；<br>输入后会让你回答关于你公司和地区的一些问题，这些回答一定要记住，以后更新apk的时候需要用到，最好截屏记录。</p><ol start="3"><li>2.签名apk</li></ol><p>jarsigner -verbose -keystore /yourpath/demo.keystore -signedjar demo_signed.apk demo.apk demo.keystore<br>jarsigner是工具名称，-verbose表示将签名过程中的详细信息打印出来；<br>-keystore /yourpath/demo.keystore 之前生成的证书<br>-signedjar demo_signed.apk 签名后的apk<br>demo.apk 需要签名的apk<br>demo.keystore 证书的别名</p><h4 id="1-首先要对源代码进行编译">1.首先要对源代码进行编译</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cordova build --release android</span><br></pre></td></tr></table></figure><p>注意，发布要使用Release版本，所以这里加上–release选项。完成之后生成了未签名的apk，在这个目录中platforms/android/build/outputs/apk/HelloWorld-release-unsigned.apk。</p><h4 id="2-生成key">2.生成key</h4><p>在应用开发的时候，因为有微信分享等功能，所以已经有keystore文件了。那么就可以忽略该步骤。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keytool -genkey -v -keystore my-release-key.keystore -alias alias_name -keyalg RSA -keysize 2048 -validity 10000</span><br></pre></td></tr></table></figure><p>该工具会问一些问题，填写之后生成keystore文件。</p><h4 id="3-对apk文件进行签名">3.对apk文件进行签名</h4><p>进入到platforms/android/build/outputs/apk/目录中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd platforms/android/build/outputs/apk/</span><br></pre></td></tr></table></figure><p>keystore文件和apk文件在一个目录下的话比较方便，最好把keystore拷贝到apk的目录。然后执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 -keystore my-release-key.keystore HelloWorld-release-unsigned.apk alias_name</span><br></pre></td></tr></table></figure><p>jarsigner是JDK中的工具，请确保JDK的安装配置是正确的。</p><h4 id="4-使用zipalign优化apk">4.使用zipalign优化apk</h4><p>zipalign工具位于/path/to/Android/sdk/build-tools/VERSION/zipalign，请确保Android SDK的配置是正确的。然后执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D:\Android\sdk\build-tools\23.0.3\zipalign -v 4 HelloWorld-release-unsigned.apk HelloWorld.apk</span><br></pre></td></tr></table></figure><p>其实只要第一步就够了，生成了release的apk之后，就可以使用签名工具了！只需要注意一点，把JDK和Android SDK配置正确就好了！<a href="https://pan.baidu.com/s/1boNf6Q7" target="_blank" rel="noopener">地址在这里</a>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Ionic(ionicframework)一款开源的Html5移动App开发框架,是AngularJS移动端解决方案,Ionic以流行的原生移动开发SDK为蓝本,使开发过原生iOS或安卓app的任何人都容易理解，下面我们来看一篇关于使用ionic打包android apk例
      
    
    </summary>
    
      <category term="移动端" scheme="https://www.dxain.ml/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
    
      <category term="cordova" scheme="https://www.dxain.ml/tags/cordova/"/>
    
      <category term="ionic" scheme="https://www.dxain.ml/tags/ionic/"/>
    
      <category term="手机" scheme="https://www.dxain.ml/tags/%E6%89%8B%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>搭建ionic</title>
    <link href="https://www.dxain.ml/zh-cn/create-ionic-project.html"/>
    <id>https://www.dxain.ml/zh-cn/create-ionic-project.html</id>
    <published>2017-06-12T13:33:49.000Z</published>
    <updated>2022-07-23T10:32:11.502Z</updated>
    
    <content type="html"><![CDATA[<ol><li>查看ionic版本信息 ionic -v</li><li>降级ionic版本</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall -g ionic</span><br><span class="line">npm cache clean</span><br><span class="line">npm install -g ionic@2</span><br><span class="line">ionic start your-project blank --v2 --id com.xxx.myproject</span><br></pre></td></tr></table></figure><ol start="3"><li>安装ionic ：npm install -g ionic@1.2.4</li><li>安装过程</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">安装ionic 及 cordova</span><br><span class="line">安装命令</span><br><span class="line">npm install -g cordova ionic</span><br><span class="line"></span><br><span class="line">更新命令</span><br><span class="line">npm update -g cordova ionic</span><br><span class="line"></span><br><span class="line">安装特定版本</span><br><span class="line">npm install -g ionic cordova@5.0.0</span><br><span class="line">npm install -g ionic@1.6.5</span><br><span class="line"></span><br><span class="line">删除命令</span><br><span class="line">npm uninstall cordova -g</span><br><span class="line">npm uninstall ionic -g</span><br><span class="line"></span><br><span class="line">npm 淘宝镜像(GFW，导致很多插件下载失败)</span><br><span class="line"></span><br><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br><span class="line">// 安装完成后，以后所有的插件都使用cnpm这个命令来进行安装</span><br><span class="line">cnpm install -g ionic cordova</span><br><span class="line">创建应用</span><br><span class="line"></span><br><span class="line">创建ionic 项目，可选模板：sidemenu（侧滑菜单），tabs（底部tab），blank 空白</span><br><span class="line"></span><br><span class="line">ionic start myapp blank</span><br><span class="line">ionic start myapp tabs</span><br><span class="line">ionic start myapp sidemenu</span><br><span class="line">如果是github上下载的项目，里面的插件、依赖项一般通过下面命令下载：</span><br><span class="line"></span><br><span class="line">bower install</span><br><span class="line">npm install</span><br><span class="line">如果是老ionic 项目，如果需要更新项目里面的ionic文件（如js类库）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ionic lib update</span><br><span class="line">浏览器端运行</span><br><span class="line"></span><br><span class="line">ionic serve</span><br><span class="line">ionic serve --lab</span><br><span class="line">真机模拟、打包、运行</span><br><span class="line"></span><br><span class="line">ionic platform add android  //[iOS]</span><br><span class="line">最新命令cordova compile android   （ionic build android）</span><br><span class="line">ionic run android</span><br><span class="line">ionic emulate android</span><br><span class="line">如何用xcode 打包IONIC 项目（IPK）</span><br><span class="line"></span><br><span class="line">将项目文件copy到MAC底下。运行终端，cd到项目所在文件夹，运行</span><br><span class="line"></span><br><span class="line">ionic platform add ios</span><br><span class="line">然后finder，在 platforms-&gt;ios-&gt;xxx.xcodeproj 打开项目</span><br><span class="line"></span><br><span class="line">然后，将xcode的模拟器类型选成iOS Device</span><br><span class="line"></span><br><span class="line">然后在XCODE 的菜单栏 选择 Product -- Archive ，会生成 xxx的Archive文件。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">在窗口右侧的Submit to AppStore 按钮的下方，点击 Export...</span><br><span class="line"></span><br><span class="line">有三个选项</span><br><span class="line"></span><br><span class="line">Save to IOS App Store Deployment</span><br><span class="line">Save to Ad Hoc Deployment</span><br><span class="line">Save for Enterprise Deployment</span><br><span class="line">选第二个Save to Ad Hoc Deployment 打包成.ipk</span><br><span class="line"></span><br><span class="line">选择证书等等，选择导出文件夹，导出</span><br></pre></td></tr></table></figure><p>ionic start payApp tabs --type=ionic-angular</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;查看ionic版本信息 ionic -v&lt;/li&gt;
&lt;li&gt;降级ionic版本&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;
      
    
    </summary>
    
      <category term="移动端" scheme="https://www.dxain.ml/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
    
      <category term="cordova" scheme="https://www.dxain.ml/tags/cordova/"/>
    
      <category term="ionic" scheme="https://www.dxain.ml/tags/ionic/"/>
    
      <category term="手机" scheme="https://www.dxain.ml/tags/%E6%89%8B%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>红尘渡口，你的痴心遇见了谁的情缘</title>
    <link href="https://www.dxain.ml/zh-cn/meeting-love.html"/>
    <id>https://www.dxain.ml/zh-cn/meeting-love.html</id>
    <published>2016-08-16T19:33:49.000Z</published>
    <updated>2016-08-16T19:33:49.000Z</updated>
    
    <content type="html"><![CDATA[<p style="text-indent:2em">​自古红尘多忧愁，入了红尘，亦醉了红尘。红尘多梦，梦亦然，红尘梦里一场烟，梦里红尘一场空。一支断箫，承载了多少迷人的爱情故事；一曲离殇，吟唱了多少不舍的红尘美梦。梦，早已随风消逝，情，却在红尘里徘徊缠绵。</p><a id="more"></a><p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1547388954146&amp;di=5920b7a841ab3b824dc76fb2aa9ff1ff&amp;imgtype=0&amp;src=http%3A%2F%2Fpic1.win4000.com%2Fwallpaper%2F2018-03-13%2F5aa75d78ecbfb.jpg" alt="图1"></p><p>​</p><p style="text-indent:2em"><br>相思桥下，你的痴心会遇见谁的情缘？谁的等待会邂逅你的守候？青石板旁，你的脚步会为谁停留？而谁又会是那个一直等待你出现的有缘人？几经波折，几经弯路，你眉下的倾城笑容为谁扬起？红尘彼岸的烟花又为谁灿烂绽放？风萧萧，路遥遥，一指嫣红为谁停留，一倾相思为谁痴守。</p><p></p><p>​</p><p style="text-indent:2em"><br>红尘渡口渡有缘，有缘遇见便是分，缘分自古三分天意，七分争取，如能牵手便是福分，如若不能一起白头，便惟愿各自安好。红尘渡口不知渡了多少有缘人，渡桥边不知又有多少人在苦苦等待有缘人的到来。等待只是为了遇见对的人，而对的人总会在恰当的时候出现，不浮不躁，不卑不亢，冥冥之中，我们都会遇见一个倾心之人。</p><p></p><p>​</p><p style="text-indent:2em"><br>成长的步伐从来不会为谁而停止，不知不觉，后知后觉，时光的脚步带领着自己也来到了红尘的渡口，矫情的岁月在渡桥边焕发着多少的痴男怨女，唯美浪漫的爱情故事不知让多少人甘愿一往情深。在这红尘渡口下，我终于遇见了人潮汹涌里那个特别的你，情愿一生痴守的你。今生有幸与你牵手，今世甘愿为你守候。</p><p></p><p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1547389050195&amp;di=70e5fc02578d771152bdf9130e12d803&amp;imgtype=0&amp;src=http%3A%2F%2Fpic1.win4000.com%2Fwallpaper%2F2017-11-06%2F59fffdeced3d6.jpg" alt="图2"></p><p>​</p><p style="text-indent:2em"><br>渡桥边，西楼上悬挂着如钩的月儿，庭院一角锁着的是谁的落寞？窗前的一帘幽梦，苍老了谁的痴心等待？今宵月光正好，星星也正闪耀，晚风开始唤起我对你美好的追忆，那一段柔情岁月。渡口旁，我邀明月共赏，我等天地见证。</p><p></p><p>​</p><p style="text-indent:2em"><br>一刻停留，一世等待，遇见你是我今生的缘，牵起你的手更是我今世的分。奈何，烟花易冷；奈何，情缘难分。当痴心遇上了冷风，不知吹散了多少的相遇，而那瞬间绚丽的花期，又不知辜负了多少的斑斓年华。</p><p></p><p>​</p><p style="text-indent:2em"><br>我想在红尘渡口边建一间温暖小屋，在那里只有属于我们的世界，那是我期盼已久的事情，那是我能想到最浪漫的事情，与你一起牵手，看尽繁华流年，阅遍风花雪月。于是，在每一个风淡云轻的日子里，在每一个夜深人静的黑夜里，我总是忍不住遥望远方灯火阑珊处，不敢挑逗脑海里不灭的思绪，亦不想去思量心底那缠绵的思念。偏偏，夜越是深，人越是静，我越是控制不了自己去想你，幻想着一切只属于我们的美好。</p><p></p><p>​</p><p style="text-indent:2em"><br>红尘渡口停留凝望注视，回首彼岸，犹记当初相遇时，你仿佛诗歌里柔情的女子一般出现在我的世界，你我只一眼的对视，你的容颜从此扣动着我的心弦，让我惹上了孤独的相思，无尽的眷恋。一世情长只为你一人，一生眷恋独倾你一人心。</p><p></p><p><img src="https://dpic.tiankong.com/vc/je/QJ6345815289.jpg?x-oss-process=style/670ws" alt="图3"></p><p>​</p><p style="text-indent:2em"><br>当过往被定格成照片，岁月覆盖了所有美好的曾经，往事一幕一幕在脑海里放映，可爱的人儿被一页一页翻过，而你始终是我最不愿翻过的一页。岁月辗转，流年似水一去不复返，时光如同激流一般匆匆逝去，纵然一切早已物是人非，纵然一切早已随风飘逝，但你依然是我红尘渡口上不舍的眷恋。</p><p></p><p>​</p><p style="text-indent:2em"><br>自古红尘美梦令人醉，醉心红尘入凡间，痴心永存心底成追忆。我欲剪一段流年光阴，寄于岁月深处下；拾一段时光回忆，藏于红尘碎梦里。我想要把你就这样一笔一划地写进心里，写成心底最美丽的诗。我想要把你就这样一字一句地唱到脑海，唱成记忆里最动听的歌。</p><p></p><p style="text-indent:2em">​红尘渡口，你的痴心遇见了谁的情缘？而又是谁的等待邂逅了你的守候？凡尘俗世里，在经历了感情的风风雨雨之后，在漫长的独自等待之后，愿你我都能遇见一个动心的温暖人儿，如此，甚好。</p>]]></content>
    
    <summary type="html">
    
      &lt;p style=&quot;text-indent:2em&quot;&gt;
​自古红尘多忧愁，入了红尘，亦醉了红尘。红尘多梦，梦亦然，红尘梦里一场烟，梦里红尘一场空。一支断箫，承载了多少迷人的爱情故事；一曲离殇，吟唱了多少不舍的红尘美梦。梦，早已随风消逝，情，却在红尘里徘徊缠绵。
&lt;/p&gt;
    
    </summary>
    
      <category term="美文欣赏" scheme="https://www.dxain.ml/categories/%E7%BE%8E%E6%96%87%E6%AC%A3%E8%B5%8F/"/>
    
    
      <category term="情感" scheme="https://www.dxain.ml/tags/%E6%83%85%E6%84%9F/"/>
    
      <category term="生活" scheme="https://www.dxain.ml/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
</feed>
